"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function ($) {
    /**
     * глобальные переменные, которые используются многократно
     */
    var global = {
        // время для анимаций
        animationTime: 200,
        animationLongTime: 1500,

        // контрольные точки адаптива
        wdDesktopXxl: 1919,
        wdDesktopXl: 1599,
        wdDesktopLg: 1279,
        wdDesktop: 1023,
        wdTabletLg: 959,
        wdTabletMd: 767,
        wdTabletSm: 639,
        wdPhone: 479,

        // проверка на ios
        isIos: navigator.userAgent.match(/(iPod|iPhone|iPad)/)
    };

    /**
     * Подключение js partials
     */
    function addToFavorites() {
        $(".b-link__add-favorites").on("click", function () {
            var id = $(this).attr("data-product");
            var this_button = $(this);
            $.ajax({
                type: "POST",
                url: "/ajax/catalog.element_favorite.php",
                data: { "id": +id, "price_code": $(this_button).attr('data-price_code') },
                success: function success(data) {
                    this_button.replaceWith(data);
                    addToFavorites();
                }
            });
        });
    }

    addToFavorites();
    $('.b-catalog-navigation__select-smallest').change(function () {
        var params = {
            'catalogNav': $(this).val()
        };

        setAttr(params, '#nav_mobile');
    });
    $('.js-sort-by').change(function () {
        var params = {
            'sortField': $(this).val(),
            'sortOrder': $(this).find(':selected').attr('data-order')
        };

        setAttr(params, '');
    });
    function catalog_tile_template(data) {
        var html = '<li class="b-product__item">';

        if (data['new'] == 1 || data['best_price'] == 1 || data['best'] == 1 || data['sale'] == 1) {
            html += '<div class="b-product__item--badge">';

            if (data['new'] == 1) html += '<a class="b-product__item--badge--item b-product__item--badge--new" title="Новинка" data-tooltip="right"></a>';

            if (data['best_price'] == 1) html += '<a class="b-product__item--badge--item b-product__item--badge--best-price" title="Лучшая цена" data-tooltip="right"></a>';

            if (data['best'] == 1) html += '<a class="b-product__item--badge--item b-product__item--badge--best-choice" title="Лучший выбор" data-tooltip="right"></a>';

            if (data['sale'] == 1) html += '<a class="b-product__item--badge--item b-product__item--badge--discount" title="Скидка" data-tooltip="right"></a>';

            html += '</div>';
        }

        html += '<a href="' + data['url'] + '" class="b-product__item--name">\
    		<div class="b-product__image-owerflow">\
    			<div class="b-product__image-owerflow-horisontal"><img class="b-product__item--image" src="' + data['image'] + '" alt="' + data['name'] + '"></div>\
    			</div>\
    		<p class="b-product__item-text">' + data['name'] + '</p></a>\
    		<div class="b-product__item--footer">';

        if (data['favorite'] == '1') html += '<a class="b-product__item--add-favorites b-product__item--add-favorites--active" href="javascript: void(0);" title="В избранном" data-tooltip="right" style="display: none"></a>'; //2 спринт
        else html += '<a class="b-product__item--add-favorites" href="javascript: void(0);" title="В избранное" data-tooltip="right" style="display: none"></a>'; //2 спринт

        html += '<a class="b-product__item--add-compare b-product__item--add-compare--active" href="javascript: void(0);" title="Сравнить" data-tooltip="right" style="display: none"></a>\
    		<div class="b-product__item--price">';
        if (data['newprice'] != data['oldprice']) {
            html += '<span class="b-product__item--discount" data-discount="' + data['discount'] + '">-' + data['discount'] + '%</span>\
    				<span class="b-product__item--priceold-line-through"><span class="b-product__item--priceold" data-price="' + data['oldprice'] + '">' + data['oldprice'] + '<span class="b-rouble">q</span></span></span>';
        }
        html += '<span class="b-product__item--pricenew b-price-large" data-price="' + data['newprice'] + '">' + data['newprice'] + '<span class="b-rouble">a</span></span>\
    		</div>\
    		</div>\
    		<input type="hidden" name="artikcul" value="' + data['articul'] + '" />\
    	</li>';

        return html;
    }

    function catalog_tile_template_all(html) {
        var html_all = '<div class="b-product b-product--inner">\
    		<ul class="b-product__list">' + html + '</ul>\
        </div>';

        return html_all;
    }

    function catalog_imagelist_template(data) {
        var html = '<div class="b-catalog-photo__item">\
            <div class="b-catalog-photo__item--photo">\
                <a href="' + data['url'] + '" title="' + data['name'] + '" class="">\
                    <img class="" src="' + data['image'] + '" alt="' + data['name'] + '" title="' + data['name'] + '" />\
                </a>\
            </div>\
            <div class="b-catalog-photo__item--text">\
                <a href="' + data['url'] + '" class="">' + data['name'] + '</a>';
        if (data['articul'] && data['articul'] !== 'undefined') html += '<span class="b-catalog-photo__item--bar-code" data-articul="' + data['articul'] + '">Артикул ' + data['articul'] + '</span>';
        html += '</div>';

        if (data['new'] == 1 || data['best_price'] == 1 || data['best'] == 1 || data['sale'] == 1) {
            html += '<div class="b-product__item--badge">';

            if (data['new'] == 1) html += '<a class="b-product__item--badge--item b-product__item--badge--new" title="Новинка" data-tooltip="right"></a>';

            if (data['best_price'] == 1) html += '<a class="b-product__item--badge--item b-product__item--badge--best-price" title="Лучшая цена" data-tooltip="right"></a>';

            if (data['best'] == 1) html += '<a class="b-product__item--badge--item b-product__item--badge--best-choice" title="Лучший выбор" data-tooltip="right"></a>';

            if (data['sale'] == 1) html += '<a class="b-product__item--badge--item b-product__item--badge--discount" title="Скидка" data-tooltip="right"></a>';

            html += '</div>';
        }

        if (data['newprice'] != data['oldprice']) {
            /*html += '<div class="b-catalog-photo__item--badge b-catalog-photo__item--badge-discount text-uppercase">Скидка ' + data['discount'] + '%</div>'; */
            html += '<span class="b-catalog-photo__item--discount" data-discount="' + data['discount'] + '">-' + data['discount'] + '%</span>\
            	<span class="b-catalog-photo__item--priceold-line-through"><span class="b-catalog-photo__item--priceold" data-price="' + data['oldprice'] + '">' + data['oldprice'] + '<span class="b-rouble">q</span></span></span>';
        }
        html += '<p class="b-price-large b-catalog-photo__item--price" data-price="' + data['newprice'] + '">' + data['newprice'] + '<span class="b-rouble">a</span></span></p>';

        if (data['favorite'] == '1') html += '<a class="b-catalog-photo__item--add-favorites b-catalog-photo__item--add-favorites--active" href="javascript: void(0);" title="В избранном" style="display: none"></a>'; //2 спринт
        else html += '<a class="b-catalog-photo__item--add-favorites" href="javascript: void(0);" title="В избранное" style="display: none"></a>'; //2 спринт

        html += '<a class="b-catalog-photo__item--add-compare" href="javascript: void(0);" title="Сравнить" data-tooltip="right" style="display: none"></a>\
        </div>';

        return html;
    }

    function catalog_imagelist_template_all(html) {
        var html_all = '<div class="b-catalog-photo">\
            <div class="b-catalog-photo__list">' + html + '</div>\
        </div>';

        return html_all;
    }

    function catalog_list_template(data) {
        var html = '<div class="b-catalog-photo__item b-catalog-photo__item--no-photo">\
            <div class="b-catalog-photo__item--photo b-catalog-photo__item--photo-hidden">\
                <a href="' + data['url'] + '" title="' + data['name'] + '" class="">\
                    <img class="" src="' + data['image'] + '" alt="' + data['name'] + '" title="' + data['name'] + '">\
                </a>\
            </div>\
            <div class="b-catalog-photo__item--text b-catalog-photo__item--text-no-photo">\
                <a href="' + data['url'] + '" class="">' + data['name'] + '</a>';
        if (data['articul'] && data['articul'] !== 'undefined') html += '<span class="b-catalog-photo__item--bar-code b-catalog-photo__item--bar-code-no-photo" data-articul="' + data['articul'] + '">Артикул ' + data['articul'] + '</span>';
        html += '</div>';

        if (data['new'] == 1 || data['best_price'] == 1 || data['best'] == 1 || data['sale'] == 1) {
            html += '<div class="b-product__item--badge">';

            if (data['new'] == 1) html += '<a class="b-product__item--badge--item b-product__item--badge--new" title="Новинка" data-tooltip="right"></a>';

            if (data['best_price'] == 1) html += '<a class="b-product__item--badge--item b-product__item--badge--best-price" title="Лучшая цена" data-tooltip="right"></a>';

            if (data['best'] == 1) html += '<a class="b-product__item--badge--item b-product__item--badge--best-choice" title="Лучший выбор" data-tooltip="right"></a>';

            if (data['sale'] == 1) html += '<a class="b-product__item--badge--item b-product__item--badge--discount" title="Скидка" data-tooltip="right"></a>';

            html += '</div>';
        }

        if (data['newprice'] != data['oldprice']) {
            html += '<span class="b-catalog-photo__item--discount" data-discount="' + data['discount'] + '">-' + data['discount'] + '%</span>\
    	        <span class="b-catalog-photo__item--priceold-line-through"><span class="b-catalog-photo__item--priceold" data-price="' + data['oldprice'] + '">' + data['oldprice'] + '<span class="b-rouble">q</span></span></span>';
        }
        html += '<p class="b-price-large b-catalog-photo__item--price" data-price="' + data['newprice'] + '">' + data['newprice'] + '<span class="b-rouble">a</span></p>';

        if (data['favorite'] == '1') html += '<a class="b-catalog-photo__item--add-favorites b-catalog-photo__item--add-favorites--active" href="javascript: void(0);" title="В избранном" style="display: none"></a>'; //2 спринт
        else html += '<a class="b-catalog-photo__item--add-favorites" href="javascript: void(0);" title="В избранное" style="display: none"></a>'; //2спринт

        html += '<a class="b-catalog-photo__item--add-compare" href="javascript: void(0);" title="Сравнить" data-tooltip="right" style="display: none"></a>\
        </div>';

        return html;
    }

    function catalog_list_template_all(html) {
        var html_all = '<div class="b-catalog-photo b-catalog-no-photo">\
            <div class="b-catalog-photo__list">' + html + '</div>\
        </div>';

        return html_all;
    }

    function change_catalog_type(current) {
        $('.b-catalog-type__link--active').removeClass('b-catalog-type__link--active');
        current.addClass('b-catalog-type__link--active');
        var catalogType = getCatalogType();
        document.cookie = 'CATALOG_TYPE=' + catalogType + '; path=/';
    }

    function change_nav_links(type_old, type_new) {
        if ($('.b-catalog-navigation__list').length) {
            $('.b-catalog-navigation__list li').each(function () {
                var cur_url = $(this).find('.b-catalog-navigation__link').attr('href');
                $(this).find('.b-catalog-navigation__link').attr('href', cur_url.replace(type_old, type_new));
            });
        }
    }

    function getCatalogType() {
        if ($('.b-catalog-type__link--active').hasClass('b-catalog-type__link--tile')) var catalog_type = 'tile';else if ($('.b-catalog-type__link--active').hasClass('b-catalog-type__link--imagelist')) var catalog_type = 'imagelist';else if ($('.b-catalog-type__link--active').hasClass('b-catalog-type__link--list')) var catalog_type = 'list';

        return catalog_type;
    }

    $('.b-catalog-type__link').on('click', function () {
        var current_type = $(this);
        var html = '';

        if ($(this).hasClass('b-catalog-type__link--active') == false) {
            if ($('.b-catalog-type__link--active').hasClass('b-catalog-type__link--tile')) {
                change_catalog_type(current_type);

                $('.b-product__item').each(function () {
                    var item_data = [];
                    item_data['name'] = $(this).find('.b-product__item--name').text();
                    item_data['url'] = $(this).find('.b-product__item--name').attr('href');
                    item_data['image'] = $(this).find('.b-product__item--image').attr('src');
                    item_data['favorite'] = $(this).find('.b-product__item--add-favorites').hasClass('b-product__item--add-favorites--active');
                    item_data['articul'] = $(this).find('input[name="artikcul"]').val();
                    item_data['newprice'] = $(this).find('.b-price-large').attr('data-price');

                    if ($(this).find('.b-product__item--badge--new').length) item_data['new'] = 1;else item_data['new'] = 0;

                    if ($(this).find('.b-product__item--badge--best-price').length) item_data['best_price'] = 1;else item_data['best_price'] = 0;

                    if ($(this).find('.b-product__item--badge--best-choice').length) item_data['best'] = 1;else item_data['best'] = 0;

                    if ($(this).find('.b-product__item--badge--discount').length) item_data['sale'] = 1;else item_data['sale'] = 0;

                    if ($(this).find('.b-product__item--priceold').length) item_data['oldprice'] = $(this).find('.b-product__item--priceold').attr('data-price');else item_data['oldprice'] = item_data['newprice'];

                    if ($(this).find('.b-product__item--discount').length) item_data['discount'] = $(this).find('.b-product__item--discount').attr('data-discount');else item_data['discount'] = 0;

                    if (current_type.hasClass('b-catalog-type__link--imagelist')) html += catalog_imagelist_template(item_data);else if (current_type.hasClass('b-catalog-type__link--list')) html += catalog_list_template(item_data);
                });

                if (current_type.hasClass('b-catalog-type__link--imagelist')) {
                    var html_all = catalog_imagelist_template_all(html);
                    change_nav_links('tile', 'imagelist');
                } else if (current_type.hasClass('b-catalog-type__link--list')) {
                    var html_all = catalog_list_template_all(html);
                    change_nav_links('tile', 'list');
                }

                $('.b-product').replaceWith(html_all);
            } else if ($('.b-catalog-type__link--active').hasClass('b-catalog-type__link--imagelist')) {
                change_catalog_type(current_type);

                $('.b-catalog-photo__item').each(function () {
                    var item_data = [];
                    item_data['name'] = $(this).find('.b-catalog-photo__item--text a').text();
                    item_data['url'] = $(this).find('.b-catalog-photo__item--text a').attr('href');
                    item_data['image'] = $(this).find('.b-catalog-photo__item--photo img').attr('src');
                    item_data['favorite'] = $(this).find('.b-product__item--add-favorites').hasClass('b-product__item--add-favorites--active');
                    item_data['articul'] = $(this).find('.b-catalog-photo__item--bar-code').attr('data-articul');
                    item_data['newprice'] = $(this).find('.b-price-large').attr('data-price');

                    if ($(this).find('.b-product__item--badge--new').length) item_data['new'] = 1;else item_data['new'] = 0;

                    if ($(this).find('.b-product__item--badge--best-price').length) item_data['best_price'] = 1;else item_data['best_price'] = 0;

                    if ($(this).find('.b-product__item--badge--best-choice').length) item_data['best'] = 1;else item_data['best'] = 0;

                    if ($(this).find('.b-product__item--badge--discount').length) item_data['sale'] = 1;else item_data['sale'] = 0;

                    if ($(this).find('.b-catalog-photo__item--priceold').length) item_data['oldprice'] = $(this).find('.b-catalog-photo__item--priceold').attr('data-price');else item_data['oldprice'] = item_data['newprice'];

                    if ($(this).find('.b-catalog-photo__item--discount').length) item_data['discount'] = $(this).find('.b-catalog-photo__item--discount').attr('data-discount');else item_data['discount'] = 0;

                    if (current_type.hasClass('b-catalog-type__link--tile')) {
                        html += catalog_tile_template(item_data);
                        change_nav_links('imagelist', 'tile');
                    } else if (current_type.hasClass('b-catalog-type__link--list')) {
                        html += catalog_list_template(item_data);
                        change_nav_links('imagelist', 'list');
                    }
                });

                if (current_type.hasClass('b-catalog-type__link--tile')) var html_all = catalog_tile_template_all(html);else if (current_type.hasClass('b-catalog-type__link--list')) var html_all = catalog_list_template_all(html);

                $('.b-catalog-photo').replaceWith(html_all);
            } else if ($('.b-catalog-type__link--active').hasClass('b-catalog-type__link--list')) {
                change_catalog_type(current_type);

                $('.b-catalog-photo__item').each(function () {
                    var item_data = [];
                    item_data['name'] = $(this).find('.b-catalog-photo__item--text a').text();
                    item_data['url'] = $(this).find('.b-catalog-photo__item--text a').attr('href');
                    item_data['image'] = $(this).find('.b-catalog-photo__item--photo img').attr('src');
                    item_data['favorite'] = $(this).find('.b-catalog-photo__item--add-favorites').hasClass('b-catalog-photo__item--add-favorites--active');
                    item_data['articul'] = $(this).find('.b-catalog-photo__item--bar-code').attr('data-articul');
                    item_data['newprice'] = $(this).find('.b-price-large').attr('data-price');

                    if ($(this).find('.b-product__item--badge--new').length) item_data['new'] = 1;else item_data['new'] = 0;

                    if ($(this).find('.b-product__item--badge--best-price').length) item_data['best_price'] = 1;else item_data['best_price'] = 0;

                    if ($(this).find('.b-product__item--badge--best-choice').length) item_data['best'] = 1;else item_data['best'] = 0;

                    if ($(this).find('.b-product__item--badge--discount').length) item_data['sale'] = 1;else item_data['sale'] = 0;

                    if ($(this).find('.b-catalog-photo__item--priceold').length) item_data['oldprice'] = $(this).find('.b-catalog-photo__item--priceold').attr('data-price');else item_data['oldprice'] = item_data['newprice'];

                    if ($(this).find('.b-catalog-photo__item--discount').length) item_data['discount'] = $(this).find('.b-catalog-photo__item--discount').attr('data-discount');else item_data['discount'] = 0;

                    if (current_type.hasClass('b-catalog-type__link--tile')) html += catalog_tile_template(item_data);else if (current_type.hasClass('b-catalog-type__link--imagelist')) html += catalog_imagelist_template(item_data);
                });

                if (current_type.hasClass('b-catalog-type__link--tile')) {
                    var html_all = catalog_tile_template_all(html);
                    change_nav_links('list', 'tile');
                } else if (current_type.hasClass('b-catalog-type__link--imagelist')) {
                    var html_all = catalog_imagelist_template_all(html);
                    change_nav_links('list', 'imagelist');
                }

                $('.b-catalog-no-photo').replaceWith(html_all);
            }
        }
    });
    $(document).ready(function () {
        $('.js-collapse').collapse();
    });
    $('.js-color-item').each(function () {
        $(this).css('background', $(this).attr('data-color'));
    });
    $(document).ready(function () {
        $('.compare-product-slider').bxSlider({
            nextText: '<div class="b-btn__arrow b-btn__arrow--left b-btn-arrow-left"></div>',
            prevText: '<div class="b-btn__arrow b-btn__arrow--right b-btn-arrow-right"></div>',
            pager: false,
            minSlides: 1,
            moveSlides: 1,
            maxSlides: 5,
            slideWidth: 190,
            slideMargin: 20
        });
    });
    /*
     * DropKick
     *
     * Highly customizable <select> lists
     * https://github.com/robdel12/DropKick
     *
    */
    (function (factory) {
        var jQuery;

        if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
            // Node. Does not work with strict CommonJS, but
            // only CommonJS-like environments that support module.exports,
            // like Node.
            try {
                jQuery = require("jquery");
            } catch (e) {}

            module.exports = factory(window, document, jQuery);
        } else {
            // Browser globals (root is window)
            window.Dropkick = factory(window, document, window.jQuery);
        }
    })(function (window, document, jQuery, undefined) {

        var

        // Browser testing stuff
        isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
            isIframe = window.parent !== window.self && location.host === parent.location.host,
            isIE = navigator.appVersion.indexOf("MSIE") !== -1,


        /**
        * # Getting started
        * After you've cloned the repo you will need to add the library to your page. In the `build/js` folder use
        * one of the two DropKick files given. One has a version number in the file name and the other is a version
        * number-less version. You will also need to grab the css from `build/css` and load it on the page.
        *
        * Once those files are imported into the page you can call DropKick on any HTMLSelectElement:
        * `new Dropkick( HTMLSelectElement, Options );` or `new Dropkick( "ID", Options );`. This returns the dropkick
        * object to you. It may be useful for you to store this in a var to reference later.
        *
        * If you're using jQuery you can do this instead:
        * `$('#select').dropkick( Options );`
        *
        *
        * @class Dropkick
        * @return { object } DropKick Object for that select. You can call your methods on this if stored in a var
        * @param {elem} sel HTMLSelect Element being passed.
        * @param {opts} options See list of [properties you can pass in here](#list_of_properties)
        * @constructor
        * @example
        *  ```js
        *    // Pure JS
        *    var select = new Dropkick("#select");
        *  ```
        * @example
        *  ```js
        *    // jQuery
        *    $("#select").dropkick();
        *  ```
        */
        Dropkick = function Dropkick(sel, opts) {
            var i, dk;

            // Safety if `Dropkick` is called without `new`
            if (this === window) {
                return new Dropkick(sel, opts);
            }

            if (typeof sel === "string" && sel[0] === "#") {
                sel = document.getElementById(sel.substr(1));
            }

            // Check if select has already been DK'd and return the DK Object
            for (i = 0; i < Dropkick.uid; i++) {
                dk = Dropkick.cache[i];

                if (dk instanceof Dropkick && dk.data.select === sel) {
                    _.extend(dk.data.settings, opts);
                    return dk;
                }
            }

            if (!sel) {
                console.error("You must pass a select to DropKick");
                return false;
            }

            if (sel.nodeName === "SELECT") {
                return this.init(sel, opts);
            }
        },
            noop = function noop() {},
            _docListener,


        // DK default options
        defaults = {

            /**
             * Called once after the DK element is inserted into the DOM.
             * The value of `this` is the Dropkick object itself.
             *
             * @config initialize
             * @type Function
             *
             */
            initialize: noop,

            /**
             * Called whenever the value of the Dropkick select changes (by user action or through the API).
             * The value of `this` is the Dropkick object itself.
             *
             * @config change
             * @type Function
             *
             */
            change: noop,

            /**
             * Called whenever the Dropkick select is opened. The value of `this` is the Dropkick object itself.
             *
             * @config open
             * @type Function
             *
             */
            open: noop,

            /**
             * Called whenever the Dropkick select is closed. The value of `this` is the Dropkick object itself.
             *
             * @config close
             * @type Function
             *
             */
            close: noop,

            // Search method; "strict", "partial", or "fuzzy"
            /**
             * `"strict"` - The search string matches exactly from the beginning of the option's text value (case insensitive).
             *
             * `"partial"` - The search string matches part of the option's text value (case insensitive).
             *
             * `"fuzzy"` - The search string matches the characters in the given order (not exclusively).
             * The strongest match is selected first. (case insensitive).
             *
             * @default "strict"
             * @config search
             * @type string
             *
             */
            search: "strict",

            /**
             * Bubble up the custom change event attached to Dropkick to the original element (select).
             */
            bubble: true
        },


        // Common Utilities
        _ = {

            hasClass: function hasClass(elem, classname) {
                var reg = new RegExp("(^|\\s+)" + classname + "(\\s+|$)");
                return elem && reg.test(elem.className);
            },

            addClass: function addClass(elem, classname) {
                if (elem && !_.hasClass(elem, classname)) {
                    elem.className += " " + classname;
                }
            },

            removeClass: function removeClass(elem, classname) {
                var reg = new RegExp("(^|\\s+)" + classname + "(\\s+|$)");
                elem && (elem.className = elem.className.replace(reg, " "));
            },

            toggleClass: function toggleClass(elem, classname) {
                var fn = _.hasClass(elem, classname) ? "remove" : "add";
                _[fn + "Class"](elem, classname);
            },

            // Shallow object extend
            extend: function extend(obj) {
                Array.prototype.slice.call(arguments, 1).forEach(function (source) {
                    if (source) {
                        for (var prop in source) {
                            obj[prop] = source[prop];
                        }
                    }
                });

                return obj;
            },

            // Returns the top and left offset of an element
            offset: function offset(elem) {
                var box = elem.getBoundingClientRect() || { top: 0, left: 0 },
                    docElem = document.documentElement,
                    offsetTop = isIE ? docElem.scrollTop : window.pageYOffset,
                    offsetLeft = isIE ? docElem.scrollLeft : window.pageXOffset;

                return {
                    top: box.top + offsetTop - docElem.clientTop,
                    left: box.left + offsetLeft - docElem.clientLeft
                };
            },

            // Returns the top and left position of an element relative to an ancestor
            position: function position(elem, relative) {
                var pos = { top: 0, left: 0 };

                while (elem && elem !== relative) {
                    pos.top += elem.offsetTop;
                    pos.left += elem.offsetLeft;
                    elem = elem.parentNode;
                }

                return pos;
            },

            // Returns the closest ancestor element of the child or false if not found
            closest: function closest(child, ancestor) {
                while (child) {
                    if (child === ancestor) {
                        return child;
                    }
                    child = child.parentNode;
                }
                return false;
            },

            // Creates a DOM node with the specified attributes
            create: function create(name, attrs) {
                var a,
                    node = document.createElement(name);

                if (!attrs) {
                    attrs = {};
                }

                for (a in attrs) {
                    if (attrs.hasOwnProperty(a)) {
                        if (a === "innerHTML") {
                            node.innerHTML = attrs[a];
                        } else {
                            node.setAttribute(a, attrs[a]);
                        }
                    }
                }

                return node;
            },

            deferred: function deferred(fn) {
                return function () {
                    var args = arguments,
                        ctx = this;

                    window.setTimeout(function () {
                        fn.apply(ctx, args);
                    }, 1);
                };
            }

        };

        // Cache of DK Objects
        Dropkick.cache = {};
        Dropkick.uid = 0;

        // Extends the DK objects's Prototype
        Dropkick.prototype = {

            // Emulate some of HTMLSelectElement's methods

            /**
             * Adds an element to the select. This option will not only add it to the original
             * select, but create a Dropkick option and add it to the Dropkick select.
             *
             * @method add
             * @param {string} elem   HTMLOptionElement
             * @param {Node/Integer} before HTMLOptionElement/Index of Element
             * @example
             *  ```js
             *    var select = new Dropkick("#select");
             *
             *    select.add("New option", 5);
             *  ```
             */
            add: function add(elem, before) {
                var text, option, i;

                if (typeof elem === "string") {
                    text = elem;
                    elem = document.createElement("option");
                    elem.text = text;
                }

                if (elem.nodeName === "OPTION") {
                    option = _.create("li", {
                        "class": "dk-option",
                        "data-value": elem.value,
                        "innerHTML": elem.text,
                        "role": "option",
                        "aria-selected": "false",
                        "id": "dk" + this.data.cacheID + "-" + (elem.id || elem.value.replace(" ", "-"))
                    });

                    _.addClass(option, elem.className);
                    this.length += 1;

                    if (elem.disabled) {
                        _.addClass(option, "dk-option-disabled");
                        option.setAttribute("aria-disabled", "true");
                    }

                    this.data.select.add(elem, before);

                    if (typeof before === "number") {
                        before = this.item(before);
                    }

                    if (this.options.indexOf(before) > -1) {
                        before.parentNode.insertBefore(option, before);
                    } else {
                        this.data.elem.lastChild.appendChild(option);
                    }

                    option.addEventListener("mouseover", this);

                    i = this.options.indexOf(before);
                    this.options.splice(i, 0, option);

                    if (elem.selected) {
                        this.select(i);
                    }
                }
            },

            /**
             * Selects an option in the list at the desired index (negative numbers select from the end).
             *
             * @method item
             * @param  {Integer} index Index of element (positive or negative)
             * @return {Node}          The DK option from the list, or null if not found
             * @example
             *  ```js
             *    var select = new Dropkick("#select");
             *
             *    select.item(4); //returns DOM node of index
             *  ```
             */
            item: function item(index) {
                index = index < 0 ? this.options.length + index : index;
                return this.options[index] || null;
            },

            /**
             * Removes the option (from both the select and Dropkick) at the given index.
             *
             * @method  remove
             * @param  {Integer} index Index of element (positive or negative)
             * @example
             *  ```js
             *    var select = new Dropkick("#select");
             *
             *    select.remove(4);
             *  ```
             */
            remove: function remove(index) {
                var dkOption = this.item(index);
                dkOption.parentNode.removeChild(dkOption);
                this.options.splice(index, 1);
                this.data.select.remove(index);
                this.select(this.data.select.selectedIndex);
                this.length -= 1;
            },

            /**
             * Initializes the DK Object
             *
             * @method init
             * @private
             * @param  {Node}   sel  [description]
             * @param  {Object} opts Options to override defaults
             * @return {Object}      The DK Object
             */
            init: function init(sel, opts) {
                var i,
                    dk = Dropkick.build(sel, "dk" + Dropkick.uid);

                // Set some data on the DK Object
                this.data = {};
                this.data.select = sel;
                this.data.elem = dk.elem;
                this.data.settings = _.extend({}, defaults, opts);

                // Emulate some of HTMLSelectElement's properties

                /**
                 * Whether the form is currently disabled or not
                 *
                 * @property {boolean} disabled
                 * @example
                 *  ```js
                 *    var select = new Dropkick("#select");
                 *
                 *    select.disabled;
                 *  ```
                 */
                this.disabled = sel.disabled;

                /**
                 * The form associated with the select
                 *
                 * @property {node} form
                 * @example
                 *  ```js
                 *    var select = new Dropkick("#select");
                 *
                 *    select.form;
                 *  ```
                 */
                this.form = sel.form;

                /**
                 * The number of options in the select
                 *
                 * @property {integer} length
                 * @example
                 *  ```js
                 *    var select = new Dropkick("#select");
                 *
                 *    select.length;
                 *  ```
                 */
                this.length = sel.length;

                /**
                 * If this select is a multi-select
                 *
                 * @property {boolean} multiple
                 * @example
                 *  ```js
                 *    var select = new Dropkick("#select");
                 *
                 *    select.multiple;
                 *  ```
                 */
                this.multiple = sel.multiple;

                /**
                 * An array of Dropkick options
                 *
                 * @property {array} options
                 * @example
                 *  ```js
                 *    var select = new Dropkick("#select");
                 *
                 *    select.options;
                 *  ```
                 */
                this.options = dk.options.slice(0);

                /**
                 * An index of the first selected option
                 *
                 * @property {integer} selectedIndex
                 * @example
                 *  ```js
                 *    var select = new Dropkick("#select");
                 *
                 *    select.selectedIndex;
                 *  ```
                 */
                this.selectedIndex = sel.selectedIndex;

                /**
                 * An array of selected Dropkick options
                 *
                 * @property {array} selectedOptions
                 * @example
                 *  ```js
                 *    var select = new Dropkick("#select");
                 *
                 *    select.selectedOptions;
                 *  ```
                 */
                this.selectedOptions = dk.selected.slice(0);

                /**
                 * The current value of the select
                 *
                 * @property {string} value
                 * @example
                 *  ```js
                 *    var select = new Dropkick("#select");
                 *
                 *    select.value;
                 *  ```
                 */
                this.value = sel.value;

                // Add the DK Object to the cache
                this.data.cacheID = Dropkick.uid;
                Dropkick.cache[this.data.cacheID] = this;

                // Call the optional initialize function
                this.data.settings.initialize.call(this);

                // Increment the index
                Dropkick.uid += 1;

                // Add the change listener to the select
                if (!this._changeListener) {
                    sel.addEventListener("change", this);
                    this._changeListener = true;
                }

                // Don't continue if we're not rendering on mobile
                if (!(isMobile && !this.data.settings.mobile)) {

                    // Insert the DK element before the original select
                    sel.parentNode.insertBefore(this.data.elem, sel);
                    sel.setAttribute("data-dkCacheId", this.data.cacheID);

                    // Bind events
                    this.data.elem.addEventListener("click", this);
                    this.data.elem.addEventListener("keydown", this);
                    this.data.elem.addEventListener("keypress", this);

                    if (this.form) {
                        this.form.addEventListener("reset", this);
                    }

                    if (!this.multiple) {
                        for (i = 0; i < this.options.length; i++) {
                            this.options[i].addEventListener("mouseover", this);
                        }
                    }

                    if (!_docListener) {
                        document.addEventListener("click", Dropkick.onDocClick);

                        if (isIframe) {
                            parent.document.addEventListener("click", Dropkick.onDocClick);
                        }

                        _docListener = true;
                    }
                }

                return this;
            },

            /**
             * Closes the DK dropdown
             *
             * @method close
             * @example
             *  ```js
             *    var select = new Dropkick("#select");
             *
             *    select.close(); //closes dk dropdown
             *  ```
             */
            close: function close() {
                var i,
                    dk = this.data.elem;

                if (!this.isOpen || this.multiple) {
                    return false;
                }

                for (i = 0; i < this.options.length; i++) {
                    _.removeClass(this.options[i], "dk-option-highlight");
                }

                dk.lastChild.setAttribute("aria-expanded", "false");
                _.removeClass(dk.lastChild, "dk-select-options-highlight");
                _.removeClass(dk, "dk-select-open-(up|down)");
                this.isOpen = false;

                this.data.settings.close.call(this);
            },

            /**
             * Opens the DK dropdown
             *
             * @method open
             * @example
             *  ```js
             *    var select = new Dropkick("#select");
             *
             *    select.open(); //Opens the dk dropdown
             *  ```
             */
            open: _.deferred(function () {
                var dropHeight,
                    above,
                    below,
                    direction,
                    dkTop,
                    dkBottom,
                    dk = this.data.elem,
                    dkOptsList = dk.lastChild;

                if (isIE) {
                    dkTop = _.offset(dk).top - document.documentElement.scrollTop;
                } else {
                    dkTop = _.offset(dk).top - window.scrollY;
                }

                dkBottom = window.innerHeight - (dkTop + dk.offsetHeight);

                if (this.isOpen || this.multiple) {
                    return false;
                }

                dkOptsList.style.display = "block";
                dropHeight = dkOptsList.offsetHeight;
                dkOptsList.style.display = "";

                above = dkTop > dropHeight;
                below = dkBottom > dropHeight;
                direction = above && !below ? "-up" : "-down";

                this.isOpen = true;
                _.addClass(dk, "dk-select-open" + direction);
                dkOptsList.setAttribute("aria-expanded", "true");
                this._scrollTo(this.options.length - 1);
                this._scrollTo(this.selectedIndex);

                this.data.settings.open.call(this);
            }),

            /**
             * Disables or enables an option; if only a boolean is passed (or nothing),
             * then the entire Dropkick will be disabled or enabled.
             *
             * @method disable
             * @param  {Integer} elem     The element or index to disable
             * @param  {Boolean}      disabled Value of disabled
             * @example
             *  ```js
             *    var select = new Dropkick("#select");
             *
             *    // To disable the entire select
             *    select.disable();
             *
             *    // To disable just an option with an index
             *    select.disable(4, true);
             *
             *    // To re-enable the entire select
             *    select.disable(false);
             *
             *    // To re-enable just an option with an index
             *    select.disable(4, false);
             *  ```
             */
            disable: function disable(elem, disabled) {
                var disabledClass = "dk-option-disabled";

                if (arguments.length === 0 || typeof elem === "boolean") {
                    disabled = elem === undefined ? true : false;
                    elem = this.data.elem;
                    disabledClass = "dk-select-disabled";
                    this.disabled = disabled;
                }

                if (disabled === undefined) {
                    disabled = true;
                }

                if (typeof elem === "number") {
                    elem = this.item(elem);
                }

                _[disabled ? "addClass" : "removeClass"](elem, disabledClass);
            },

            /**
             * Selects an option from the list
             *
             * @method select
             * @param  {String} elem     The element, index, or value to select
             * @param  {Boolean}             disabled Selects disabled options
             * @return {Node}                         The selected element
             * @example
             *  ```js
             *    var elm = new Dropkick("#select");
             *
             *    // Select by index
             *    elm.select(4); //selects & returns 5th item in the list
             *
             *    // Select by value
             *    elm.select("AL"); // selects & returns option with the value "AL"
             *  ```
             */
            select: function select(elem, disabled) {
                var i,
                    index,
                    option,
                    combobox,
                    select = this.data.select;

                if (typeof elem === "number") {
                    elem = this.item(elem);
                }

                if (typeof elem === "string") {
                    for (i = 0; i < this.length; i++) {
                        if (this.options[i].getAttribute("data-value") === elem) {
                            elem = this.options[i];
                        }
                    }
                }

                // No element or enabled option
                if (!elem || typeof elem === "string" || !disabled && _.hasClass(elem, "dk-option-disabled")) {
                    return false;
                }

                if (_.hasClass(elem, "dk-option")) {
                    index = this.options.indexOf(elem);
                    option = select.options[index];

                    if (this.multiple) {
                        _.toggleClass(elem, "dk-option-selected");
                        option.selected = !option.selected;

                        if (_.hasClass(elem, "dk-option-selected")) {
                            elem.setAttribute("aria-selected", "true");
                            this.selectedOptions.push(elem);
                        } else {
                            elem.setAttribute("aria-selected", "false");
                            index = this.selectedOptions.indexOf(elem);
                            this.selectedOptions.splice(index, 1);
                        }
                    } else {
                        combobox = this.data.elem.firstChild;

                        if (this.selectedOptions.length) {
                            _.removeClass(this.selectedOptions[0], "dk-option-selected");
                            this.selectedOptions[0].setAttribute("aria-selected", "false");
                        }

                        _.addClass(elem, "dk-option-selected");
                        elem.setAttribute("aria-selected", "true");

                        combobox.setAttribute("aria-activedescendant", elem.id);
                        combobox.className = "dk-selected " + option.className;
                        combobox.innerHTML = option.text;

                        this.selectedOptions[0] = elem;
                        option.selected = true;
                    }

                    this.selectedIndex = select.selectedIndex;
                    this.value = select.value;

                    if (!disabled) {
                        this.data.select.dispatchEvent(new CustomEvent("change", { bubbles: this.data.settings.bubble }));
                    }

                    return elem;
                }
            },

            /**
             * Selects a single option from the list and scrolls to it (if the select is open or on multi-selects).
             * Useful for selecting an option after a search by the user. Important to note: this doesn't close the
             * dropdown when selecting. It keeps the dropdown open and scrolls to proper position.
             *
             * @method selectOne
             * @param  {Integer} elem     The element or index to select
             * @param  {Boolean}      disabled Selects disabled options
             * @return {Node}                  The selected element
             * @example
             *  ```js
             *    var select = new Dropkick("#select");
             *
             *    select.selectOne(4);
             *  ```
             */
            selectOne: function selectOne(elem, disabled) {
                this.reset(true);
                this._scrollTo(elem);
                return this.select(elem, disabled);
            },

            /**
             * Finds all options who's text matches a pattern (strict, partial, or fuzzy)
             *
             * `"strict"` - The search string matches exactly from the beginning of the
             * option's text value (case insensitive).
             *
             * `"partial"` - The search string matches part of the option's text value
             * (case insensitive).
             *
             * `"fuzzy"` - The search string matches the characters in the given order (not
             * exclusively). The strongest match is selected first. (case insensitive).
             *
             * @method search
             * @param  {String} string  The string to search for
             * @param  {Integer} mode   How to search; "strict", "partial", or "fuzzy"
             * @return {Boolean}  An Array of matched elements
             */
            search: function search(pattern, mode) {
                var i,
                    tokens,
                    str,
                    tIndex,
                    sIndex,
                    cScore,
                    tScore,
                    reg,
                    options = this.data.select.options,
                    matches = [];

                if (!pattern) {
                    return this.options;
                }

                // Fix Mode
                mode = mode ? mode.toLowerCase() : "strict";
                mode = mode === "fuzzy" ? 2 : mode === "partial" ? 1 : 0;

                reg = new RegExp((mode ? "" : "^") + pattern, "i");

                for (i = 0; i < options.length; i++) {
                    str = options[i].text.toLowerCase();

                    // Fuzzy
                    if (mode == 2) {
                        tokens = pattern.toLowerCase().split("");
                        tIndex = sIndex = cScore = tScore = 0;

                        while (sIndex < str.length) {
                            if (str[sIndex] === tokens[tIndex]) {
                                cScore += 1 + cScore;
                                tIndex++;
                            } else {
                                cScore = 0;
                            }

                            tScore += cScore;
                            sIndex++;
                        }

                        if (tIndex === tokens.length) {
                            matches.push({ e: this.options[i], s: tScore, i: i });
                        }

                        // Partial or Strict (Default)
                    } else {
                        reg.test(str) && matches.push(this.options[i]);
                    }
                }

                // Sort fuzzy results
                if (mode === 2) {
                    matches = matches.sort(function (a, b) {
                        return b.s - a.s || a.i - b.i;
                    }).reduce(function (p, o) {
                        p[p.length] = o.e;
                        return p;
                    }, []);
                }

                return matches;
            },

            /**
             * Brings focus to the proper DK element
             *
             * @method focus
             * @example
             *  ```js
             *    var select = new Dropkick("#select");
             *
             *    $("#some_elm").on("click", function() {
             *      select.focus();
             *    });
             *  ```
             */
            focus: function focus() {
                if (!this.disabled) {
                    (this.multiple ? this.data.elem : this.data.elem.children[0]).focus();
                }
            },

            /**
             * Resets the Dropkick and select to it's original selected options; if `clear` is `true`,
             * It will select the first option by default (or no options for multi-selects).
             *
             * @method reset
             * @param  {Boolean} clear Defaults to first option if True
             * @example
             *  ```js
             *    var select = new Dropkick("#select");
             *
             *    // Reset to originally `selected` option
             *    select.reset();
             *
             *    // Reset to first option in select
             *    select.reset(true);
             *  ```
             */
            reset: function reset(clear) {
                var i,
                    select = this.data.select;

                this.selectedOptions.length = 0;

                for (i = 0; i < select.options.length; i++) {
                    select.options[i].selected = false;
                    _.removeClass(this.options[i], "dk-option-selected");
                    this.options[i].setAttribute("aria-selected", "false");
                    if (!clear && select.options[i].defaultSelected) {
                        this.select(i, true);
                    }
                }

                if (!this.selectedOptions.length && !this.multiple) {
                    this.select(0, true);
                }
            },

            /**
             * Rebuilds the DK Object
             * (use if HTMLSelectElement has changed)
             *
             * @method refresh
             * @example
             *  ```js
             *    var select = new Dropkick("#select");
             *
             *    //... [change original select] ...
             *
             *    select.refresh();
             *  ```
             */
            refresh: function refresh() {
                this.dispose().init(this.data.select, this.data.settings);
            },

            /**
             * Removes the DK Object from the cache and the element from the DOM
             *
             * @method dispose
             * @example
             *  ```js
             *    var select = new Dropkick("#select");
             *
             *    select.dispose();
             *  ```
             */
            dispose: function dispose() {
                delete Dropkick.cache[this.data.cacheID];
                if (!(isMobile && !this.data.settings.mobile)) {
                    this.data.elem.parentNode.removeChild(this.data.elem);
                    this.data.select.removeAttribute("data-dkCacheId");
                }
                return this;
            },

            // Private Methods

            /**
             * @method handleEvent
             * @private
             */
            handleEvent: function handleEvent(event) {
                if (this.disabled) {
                    return;
                }

                switch (event.type) {
                    case "click":
                        this._delegate(event);
                        break;
                    case "keydown":
                        this._keyHandler(event);
                        break;
                    case "keypress":
                        this._searchOptions(event);
                        break;
                    case "mouseover":
                        this._highlight(event);
                        break;
                    case "reset":
                        this.reset();
                        break;
                    case "change":
                        this.data.settings.change.call(this);
                        break;
                }
            },

            /**
             * @method delegate
             * @private
             */
            _delegate: function _delegate(event) {
                var selection,
                    index,
                    firstIndex,
                    lastIndex,
                    target = event.target;

                if (_.hasClass(target, "dk-option-disabled")) {
                    return false;
                }

                if (!this.multiple) {
                    this[this.isOpen ? "close" : "open"]();
                    if (_.hasClass(target, "dk-option")) {
                        this.select(target);
                    }
                } else {
                    if (_.hasClass(target, "dk-option")) {
                        selection = window.getSelection();
                        if (selection.type === "Range") selection.collapseToStart();

                        if (event.shiftKey) {
                            firstIndex = this.options.indexOf(this.selectedOptions[0]);
                            lastIndex = this.options.indexOf(this.selectedOptions[this.selectedOptions.length - 1]);
                            index = this.options.indexOf(target);

                            if (index > firstIndex && index < lastIndex) index = firstIndex;
                            if (index > lastIndex && lastIndex > firstIndex) lastIndex = firstIndex;

                            this.reset(true);

                            if (lastIndex > index) {
                                while (index < lastIndex + 1) {
                                    this.select(index++);
                                }
                            } else {
                                while (index > lastIndex - 1) {
                                    this.select(index--);
                                }
                            }
                        } else if (event.ctrlKey || event.metaKey) {
                            this.select(target);
                        } else {
                            this.reset(true);
                            this.select(target);
                        }
                    }
                }
            },

            /**
             * @method highlight
             * @private
             */
            _highlight: function _highlight(event) {
                var i,
                    option = event.target;

                if (!this.multiple) {
                    for (i = 0; i < this.options.length; i++) {
                        _.removeClass(this.options[i], "dk-option-highlight");
                    }

                    _.addClass(this.data.elem.lastChild, "dk-select-options-highlight");
                    _.addClass(option, "dk-option-highlight");
                }
            },

            /**
             * @method keyHandler
             * @private
             */
            _keyHandler: function _keyHandler(event) {
                var lastSelected,
                    j,
                    selected = this.selectedOptions,
                    options = this.options,
                    i = 1,
                    keys = {
                    tab: 9,
                    enter: 13,
                    esc: 27,
                    space: 32,
                    up: 38,
                    down: 40
                };

                switch (event.keyCode) {
                    case keys.up:
                        i = -1;
                    // deliberate fallthrough
                    case keys.down:
                        event.preventDefault();
                        lastSelected = selected[selected.length - 1];

                        if (_.hasClass(this.data.elem.lastChild, "dk-select-options-highlight")) {
                            _.removeClass(this.data.elem.lastChild, "dk-select-options-highlight");
                            for (j = 0; j < options.length; j++) {
                                if (_.hasClass(options[j], "dk-option-highlight")) {
                                    _.removeClass(options[j], "dk-option-highlight");
                                    lastSelected = options[j];
                                }
                            }
                        }

                        i = options.indexOf(lastSelected) + i;

                        if (i > options.length - 1) {
                            i = options.length - 1;
                        } else if (i < 0) {
                            i = 0;
                        }

                        if (!this.data.select.options[i].disabled) {
                            this.reset(true);
                            this.select(i);
                            this._scrollTo(i);
                        }
                        break;
                    case keys.space:
                        if (!this.isOpen) {
                            event.preventDefault();
                            this.open();
                            break;
                        }
                    // deliberate fallthrough
                    case keys.tab:
                    case keys.enter:
                        for (i = 0; i < options.length; i++) {
                            if (_.hasClass(options[i], "dk-option-highlight")) {
                                this.select(i);
                            }
                        }
                    // deliberate fallthrough
                    case keys.esc:
                        if (this.isOpen) {
                            event.preventDefault();
                            this.close();
                        }
                        break;
                }
            },

            /**
             * @method searchOptions
             * @private
             */
            _searchOptions: function _searchOptions(event) {
                var results,
                    self = this,
                    keyChar = String.fromCharCode(event.keyCode || event.which),
                    waitToReset = function waitToReset() {
                    if (self.data.searchTimeout) {
                        clearTimeout(self.data.searchTimeout);
                    }

                    self.data.searchTimeout = setTimeout(function () {
                        self.data.searchString = "";
                    }, 1000);
                };

                if (this.data.searchString === undefined) {
                    this.data.searchString = "";
                }

                waitToReset();

                this.data.searchString += keyChar;
                results = this.search(this.data.searchString, this.data.settings.search);

                if (results.length) {
                    if (!_.hasClass(results[0], "dk-option-disabled")) {
                        this.selectOne(results[0]);
                    }
                }
            },

            /**
             * @method scrollTo
             * @private
             */
            _scrollTo: function _scrollTo(option) {
                var optPos,
                    optTop,
                    optBottom,
                    dkOpts = this.data.elem.lastChild;

                if (option === -1 || typeof option !== "number" && !option || !this.isOpen && !this.multiple) {
                    return false;
                }

                if (typeof option === "number") {
                    option = this.item(option);
                }

                optPos = _.position(option, dkOpts).top;
                optTop = optPos - dkOpts.scrollTop;
                optBottom = optTop + option.offsetHeight;

                if (optBottom > dkOpts.offsetHeight) {
                    optPos += option.offsetHeight;
                    dkOpts.scrollTop = optPos - dkOpts.offsetHeight;
                } else if (optTop < 0) {
                    dkOpts.scrollTop = optPos;
                }
            }
        };

        // Static Methods

        /**
         * Builds the Dropkick element from a select element
         *
         * @method  build
         * @private
         * @param  {Node} sel The HTMLSelectElement
         * @return {Object}   An object containing the new DK element and it's options
         */
        Dropkick.build = function (sel, idpre) {
            var selOpt,
                optList,
                i,
                options = [],
                ret = {
                elem: null,
                options: [],
                selected: []
            },
                addOption = function addOption(node) {
                var option,
                    optgroup,
                    optgroupList,
                    i,
                    children = [];

                switch (node.nodeName) {
                    case "OPTION":
                        option = _.create("li", {
                            "class": "dk-option ",
                            "data-value": node.value,
                            "innerHTML": node.text,
                            "role": "option",
                            "aria-selected": "false",
                            "id": idpre + "-" + (node.id || node.value.replace(" ", "-"))
                        });

                        _.addClass(option, node.className);

                        if (node.disabled) {
                            _.addClass(option, "dk-option-disabled");
                            option.setAttribute("aria-disabled", "true");
                        }

                        if (node.selected) {
                            _.addClass(option, "dk-option-selected");
                            option.setAttribute("aria-selected", "true");
                            ret.selected.push(option);
                        }

                        ret.options.push(this.appendChild(option));
                        break;
                    case "OPTGROUP":
                        optgroup = _.create("li", { "class": "dk-optgroup" });

                        if (node.label) {
                            optgroup.appendChild(_.create("div", {
                                "class": "dk-optgroup-label",
                                "innerHTML": node.label
                            }));
                        }

                        optgroupList = _.create("ul", {
                            "class": "dk-optgroup-options"
                        });

                        for (i = node.children.length; i--; children.unshift(node.children[i])) {}
                        children.forEach(addOption, optgroupList);

                        this.appendChild(optgroup).appendChild(optgroupList);
                        break;
                }
            };

            ret.elem = _.create("div", {
                "class": "dk-select" + (sel.multiple ? "-multi" : "")
            });

            optList = _.create("ul", {
                "class": "dk-select-options",
                "id": idpre + "-listbox",
                "role": "listbox"
            });

            sel.disabled && _.addClass(ret.elem, "dk-select-disabled");
            ret.elem.id = idpre + (sel.id ? "-" + sel.id : "");
            _.addClass(ret.elem, sel.className);

            if (!sel.multiple) {
                selOpt = sel.options[sel.selectedIndex];
                ret.elem.appendChild(_.create("div", {
                    "class": "dk-selected " + selOpt.className,
                    "tabindex": sel.tabindex || 0,
                    "innerHTML": selOpt ? selOpt.text : '&nbsp;',
                    "id": idpre + "-combobox",
                    "aria-live": "assertive",
                    "aria-owns": optList.id,
                    "role": "combobox"
                }));
                optList.setAttribute("aria-expanded", "false");
            } else {
                ret.elem.setAttribute("tabindex", sel.getAttribute("tabindex") || "0");
                optList.setAttribute("aria-multiselectable", "true");
            }

            for (i = sel.children.length; i--; options.unshift(sel.children[i])) {}
            options.forEach(addOption, ret.elem.appendChild(optList));

            return ret;
        };

        /**
         * Focus DK Element when corresponding label is clicked; close all other DK's
         *
         * @method  onDocClick
         * @private
         * @param {Object} event  Event from document click
         */
        Dropkick.onDocClick = function (event) {
            var tId, i;

            if (event.target.nodeType !== 1) {
                return false;
            }

            if ((tId = event.target.getAttribute("data-dkcacheid")) !== null) {
                Dropkick.cache[tId].focus();
            }

            for (i in Dropkick.cache) {
                if (!_.closest(event.target, Dropkick.cache[i].data.elem) && i !== tId) {
                    Dropkick.cache[i].disabled || Dropkick.cache[i].close();
                }
            }
        };

        // Add jQuery method
        if (jQuery !== undefined) {
            jQuery.fn.dropkick = function () {
                var args = Array.prototype.slice.call(arguments);
                return jQuery(this).each(function () {
                    if (!args[0] || _typeof(args[0]) === 'object') {
                        new Dropkick(this, args[0] || {});
                    } else if (typeof args[0] === 'string') {
                        Dropkick.prototype[args[0]].apply(new Dropkick(this), args.slice(1));
                    }
                });
            };
        }

        return Dropkick;
    });

    $(document).ready(function () {
        $("a2").fancybox();
    });
    $('.b-filterbuttons__categories').on('click', function () {

        if ($('.b-category').parents('.b-filterbuttons__container-categories').length == 0) {
            $('.b-filterbuttons__container-categories').append($('.b-category').detach());
        }

        if ($(this).hasClass('b-filterbuttons__categories--active')) {
            $('.b-category').css('display', 'none');
            $(this).removeClass('b-filterbuttons__categories--active');
        } else {
            $(this).addClass('b-filterbuttons__categories--active');
            $('.b-category').css('display', 'block');
        }
    });

    $('.b-filterbuttons__productfilter').on('click', function () {

        if ($('.b-filter').parents('.b-filterbuttons__container-productfilter').length == 0) {
            $('.b-filterbuttons__container-productfilter').append($('.b-filter').detach());
        }

        if ($(this).hasClass('b-filterbuttons__productfilter--active')) {
            $('.b-filter').css('display', 'none');
            $(this).removeClass('b-filterbuttons__productfilter--active');
        } else {
            $(this).addClass('b-filterbuttons__productfilter--active');
            $('.b-filter').css('display', 'block');
        }
    });
    (function ($) {
        // custom select
        $.fn.styleSelectField = function (options) {

            var boxClassName = 'field-bl_type_select';
            var textClassName = 'field-bl_type_select__tx';
            var customClassName = this.prop('class');

            var wrapper = '<div class="field-bl ' + boxClassName + ' ' + customClassName + '" />';
            var text = '<span class="' + textClassName + '" />';

            this.each(function () {

                $(this).wrap(wrapper).before(text);

                // после загрузки выбираем первый option
                setFirstOption($(this));

                $(this).on('focus', function () {
                    onSelectFocus($(this));
                });

                $(this).on('blur', function () {
                    onSelectBlur($(this));
                });

                $(this).on('change', function () {
                    onSelectChange($(this));
                });

                if ($(this).is(':disabled')) {
                    $(this).closest('.' + boxClassName).addClass('disabled');
                }

                $(this).closest('form').on('submit', function () {
                    onFormSubmit($(this));
                });
            });

            function onSelectFocus(elem) {
                elem.closest('.' + boxClassName).addClass('focus');
            }

            function onSelectBlur(elem) {
                elem.closest('.' + boxClassName).removeClass('focus');
            }

            function onSelectChange(elem) {
                // для валидации плагином http://jqueryvalidation.org/

                // дергаем валидацию поля
                // $('form').validate().element(elem);

                // обнуляем классы валидации
                // elem.closest('.' + boxClassName).removeClass('error-field valid');

                // получаем и ставим новые классы валидации
                // customClassName = elem.prop('class');
                // elem.closest('.' + boxClassName).addClass(customClassName);

                var selected = elem.find('option:selected').text();
                elem.siblings('.' + textClassName).text(selected);
            }

            function setFirstOption(elem) {
                var selected = elem.find('option:selected').text();

                if (selected) {
                    elem.siblings('.' + textClassName).text(selected);
                } else {
                    var first = elem.find('option:first-child').text();
                    elem.siblings('.' + textClassName).text(first);
                }
            }

            function onFormSubmit(form) {
                var elems = $(form).find('select');
                elems.each(function () {
                    customClassName = $(this).prop('class');
                    $(this).closest('.' + boxClassName).addClass(customClassName);
                });
            }
        };

        // custom file field
        $.fn.styleFileField = function (options) {

            var boxClassName = 'field-bl_type_file';
            var textClassName = 'field-bl_type_file__tx';
            var customClassName = this.prop('class');

            var wrapper = '<div class="field-bl ' + boxClassName + ' ' + customClassName + '" />';
            var textField = '<input class="' + textClassName + '" type="text" value="" name="" readonly>';
            var button = '<a class="btn" title="выберите файл">Обзор...</a>';

            this.each(function () {

                $(this).wrap(wrapper).after(textField).wrap(button);

                $(this).on('change', function () {
                    onFileFieldChange($(this));
                });

                $(this).on('focus', function () {
                    onFileFieldFocus($(this));
                });

                $(this).on('blur', function () {
                    onFileFieldBlur($(this));
                });

                if ($(this).is(':disabled')) {
                    $(this).closest('.' + boxClassName).addClass('disabled').end().closest('.' + boxClassName).find('button, .' + textClassName).prop('disabled', true);
                }
            });

            function onFileFieldChange(elem) {
                var elemTextField = elem.closest('.' + boxClassName).find('.' + textClassName);
                var selected = elem.val();
                elemTextField.attr('value', selected);
            }

            function onFileFieldFocus(elem) {
                elem.closest('.' + boxClassName).addClass('focus');
            }

            function onFileFieldBlur(elem) {
                elem.closest('.' + boxClassName).removeClass('focus');
            }
        };

        // custom radio and checkbox
        $.fn.styledCheck = function (options) {

            var self = this;

            this.each(function () {
                $(this).attr('checked', $(this).attr('checked'));
                if ($(this).prop('checked')) {
                    $(this).parent('label').addClass('active');
                }
                if ($(this).prop('disabled')) {
                    $(this).parent('label').addClass('disabled');
                }
            });

            this.on('click', onCheckClick);

            function onCheckClick() {
                self.switchState($(this));
            }

            this.switchState = function (elem) {

                if (elem.prop('type') == 'checkbox') {
                    elem.parent().toggleClass('active');
                } else {
                    var elemName = elem.attr('name');
                    $('[name="' + elemName + '"]').parent('label').removeClass('active');
                    elem.parent('label').addClass('active');
                }
            };
        };
    })(jQuery);
    (function (factory) {
        if (typeof define === 'function' && define.amd) {
            define(['jquery'], factory);
        } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
            module.exports = factory(require('jquery'));
        } else {
            factory(jQuery);
        }
    })(function ($) {
        var pluses = /\+/g;
        function encode(s) {
            return config.raw ? s : encodeURIComponent(s);
        }
        function decode(s) {
            return config.raw ? s : decodeURIComponent(s);
        }
        function stringifyCookieValue(value) {
            return encode(config.json ? JSON.stringify(value) : String(value));
        }
        function parseCookieValue(s) {
            if (s.indexOf('"') === 0) {
                s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
            }
            try {
                s = decodeURIComponent(s.replace(pluses, ' '));
                return config.json ? JSON.parse(s) : s;
            } catch (e) {}
        }
        function read(s, converter) {
            var value = config.raw ? s : parseCookieValue(s);
            return $.isFunction(converter) ? converter(value) : value;
        }
        var config = $.cookie = function (key, value, options) {
            if (value != undefined) {
                $.post('/ajax/geo.php');
            }
            if (arguments.length > 1 && !$.isFunction(value)) {
                options = $.extend({}, config.defaults, options);
                if (typeof options.expires === 'number') {
                    var days = options.expires,
                        t = options.expires = new Date();
                    t.setMilliseconds(t.getMilliseconds() + days * 864e+5);
                }
                return document.cookie = [encode(key), '=', stringifyCookieValue(value), options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
                options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('');
            }
            var result = key ? undefined : {},
                cookies = document.cookie ? document.cookie.split('; ') : [],
                i = 0,
                l = cookies.length;
            for (; i < l; i++) {
                var parts = cookies[i].split('='),
                    name = decode(parts.shift()),
                    cookie = parts.join('=');
                if (key === name) {
                    result = read(cookie, value);
                    break;
                }
                if (!key && (cookie = read(cookie)) !== undefined) {
                    result[name] = cookie;
                }
            }
            return result;
        };
        config.defaults = {};
        $.removeCookie = function (key, options) {
            $.cookie(key, '', $.extend({}, options, { expires: -1 }));
            return !$.cookie(key);
        };
    });
    if (!$.cookie('KEY_CITY')) {
        $.getScript("https://api-maps.yandex.ru/2.0-stable/?load=package.standard&lang=ru-RU", function (data, textStatus, jqxhr) {
            var reserveCords = {
                latitude: 0,
                longitude: 0
            };
            var Cords = {
                latitude: 0,
                longitude: 0
            };

            if (window['ymaps']) {
                ymaps.ready(function () {
                    reserveCords.latitude = ymaps.geolocation.latitude;
                    reserveCords.longitude = ymaps.geolocation.longitude;
                });
            }

            var searchCity = function searchCity(c) {
                var dis = 999999999;
                var key = null;

                $('#bitrix_search_location').find('[value]').each(function () {
                    var split = $(this).attr('value').split(';');
                    var o = {
                        key: split[0],
                        latitude: split[1],
                        longitude: split[2]
                    };
                    var distance = Math.sqrt(Math.pow(o.latitude - c.latitude, 2) + Math.pow(o.longitude - c.longitude, 2));
                    if (dis > distance) {
                        dis = distance;
                        key = o.key;
                    }
                });
                $.cookie('KEY_CITY', key, { expires: 365, path: '/' });
                //Изначально поставить город
                $.post('/ajax/geo.php', function () {
                    window.location.reload();
                });
            };

            if ("geolocation" in navigator) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    Cords.latitude = position.coords.latitude;
                    Cords.longitude = position.coords.longitude;
                    searchCity(Cords);
                }, function () {
                    searchCity(reserveCords);
                });
            } else {
                searchCity(reserveCords);
            }
        });
    }

    /*! jQuery UI - v1.11.4 - 2015-03-11
    * http://jqueryui.com
    * Includes: core.js, widget.js, mouse.js, position.js, accordion.js, autocomplete.js, button.js, datepicker.js, dialog.js, draggable.js, droppable.js, effect.js, effect-blind.js, effect-bounce.js, effect-clip.js, effect-drop.js, effect-explode.js, effect-fade.js, effect-fold.js, effect-highlight.js, effect-puff.js, effect-pulsate.js, effect-scale.js, effect-shake.js, effect-size.js, effect-slide.js, effect-transfer.js, menu.js, progressbar.js, resizable.js, selectable.js, selectmenu.js, slider.js, sortable.js, spinner.js, tabs.js, tooltip.js
    * Copyright 2015 jQuery Foundation and other contributors; Licensed MIT */

    (function (factory) {
        if (typeof define === "function" && define.amd) {

            // AMD. Register as an anonymous module.
            define(["jquery"], factory);
        } else {

            // Browser globals
            factory(jQuery);
        }
    })(function ($) {
        /*!
         * jQuery UI Core 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/category/ui-core/
         */

        // $.ui might exist from components with no dependencies, e.g., $.ui.position
        $.ui = $.ui || {};

        $.extend($.ui, {
            version: "1.11.4",

            keyCode: {
                BACKSPACE: 8,
                COMMA: 188,
                DELETE: 46,
                DOWN: 40,
                END: 35,
                ENTER: 13,
                ESCAPE: 27,
                HOME: 36,
                LEFT: 37,
                PAGE_DOWN: 34,
                PAGE_UP: 33,
                PERIOD: 190,
                RIGHT: 39,
                SPACE: 32,
                TAB: 9,
                UP: 38
            }
        });

        // plugins
        $.fn.extend({
            scrollParent: function scrollParent(includeHidden) {
                var position = this.css("position"),
                    excludeStaticParent = position === "absolute",
                    overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
                    scrollParent = this.parents().filter(function () {
                    var parent = $(this);
                    if (excludeStaticParent && parent.css("position") === "static") {
                        return false;
                    }
                    return overflowRegex.test(parent.css("overflow") + parent.css("overflow-y") + parent.css("overflow-x"));
                }).eq(0);

                return position === "fixed" || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent;
            },

            uniqueId: function () {
                var uuid = 0;

                return function () {
                    return this.each(function () {
                        if (!this.id) {
                            this.id = "ui-id-" + ++uuid;
                        }
                    });
                };
            }(),

            removeUniqueId: function removeUniqueId() {
                return this.each(function () {
                    if (/^ui-id-\d+$/.test(this.id)) {
                        $(this).removeAttr("id");
                    }
                });
            }
        });

        // selectors
        function _focusable(element, isTabIndexNotNaN) {
            var map,
                mapName,
                img,
                nodeName = element.nodeName.toLowerCase();
            if ("area" === nodeName) {
                map = element.parentNode;
                mapName = map.name;
                if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                    return false;
                }
                img = $("img[usemap='#" + mapName + "']")[0];
                return !!img && visible(img);
            }
            return (/^(input|select|textarea|button|object)$/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) &&
            // the element and all of its ancestors must be visible
            visible(element);
        }

        function visible(element) {
            return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function () {
                return $.css(this, "visibility") === "hidden";
            }).length;
        }

        $.extend($.expr[":"], {
            data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {
                return function (elem) {
                    return !!$.data(elem, dataName);
                };
            }) :
            // support: jQuery <1.8
            function (elem, i, match) {
                return !!$.data(elem, match[3]);
            },

            focusable: function focusable(element) {
                return _focusable(element, !isNaN($.attr(element, "tabindex")));
            },

            tabbable: function tabbable(element) {
                var tabIndex = $.attr(element, "tabindex"),
                    isTabIndexNaN = isNaN(tabIndex);
                return (isTabIndexNaN || tabIndex >= 0) && _focusable(element, !isTabIndexNaN);
            }
        });

        // support: jQuery <1.8
        if (!$("<a>").outerWidth(1).jquery) {
            $.each(["Width", "Height"], function (i, name) {
                var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"],
                    type = name.toLowerCase(),
                    orig = {
                    innerWidth: $.fn.innerWidth,
                    innerHeight: $.fn.innerHeight,
                    outerWidth: $.fn.outerWidth,
                    outerHeight: $.fn.outerHeight
                };

                function reduce(elem, size, border, margin) {
                    $.each(side, function () {
                        size -= parseFloat($.css(elem, "padding" + this)) || 0;
                        if (border) {
                            size -= parseFloat($.css(elem, "border" + this + "Width")) || 0;
                        }
                        if (margin) {
                            size -= parseFloat($.css(elem, "margin" + this)) || 0;
                        }
                    });
                    return size;
                }

                $.fn["inner" + name] = function (size) {
                    if (size === undefined) {
                        return orig["inner" + name].call(this);
                    }

                    return this.each(function () {
                        $(this).css(type, reduce(this, size) + "px");
                    });
                };

                $.fn["outer" + name] = function (size, margin) {
                    if (typeof size !== "number") {
                        return orig["outer" + name].call(this, size);
                    }

                    return this.each(function () {
                        $(this).css(type, reduce(this, size, true, margin) + "px");
                    });
                };
            });
        }

        // support: jQuery <1.8
        if (!$.fn.addBack) {
            $.fn.addBack = function (selector) {
                return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
            };
        }

        // support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
        if ($("<a>").data("a-b", "a").removeData("a-b").data("a-b")) {
            $.fn.removeData = function (removeData) {
                return function (key) {
                    if (arguments.length) {
                        return removeData.call(this, $.camelCase(key));
                    } else {
                        return removeData.call(this);
                    }
                };
            }($.fn.removeData);
        }

        // deprecated
        $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());

        $.fn.extend({
            focus: function (orig) {
                return function (delay, fn) {
                    return typeof delay === "number" ? this.each(function () {
                        var elem = this;
                        setTimeout(function () {
                            $(elem).focus();
                            if (fn) {
                                fn.call(elem);
                            }
                        }, delay);
                    }) : orig.apply(this, arguments);
                };
            }($.fn.focus),

            disableSelection: function () {
                var eventType = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";

                return function () {
                    return this.bind(eventType + ".ui-disableSelection", function (event) {
                        event.preventDefault();
                    });
                };
            }(),

            enableSelection: function enableSelection() {
                return this.unbind(".ui-disableSelection");
            },

            zIndex: function zIndex(_zIndex) {
                if (_zIndex !== undefined) {
                    return this.css("zIndex", _zIndex);
                }

                if (this.length) {
                    var elem = $(this[0]),
                        position,
                        value;
                    while (elem.length && elem[0] !== document) {
                        // Ignore z-index if position is set to a value where z-index is ignored by the browser
                        // This makes behavior of this function consistent across browsers
                        // WebKit always returns auto if the element is positioned
                        position = elem.css("position");
                        if (position === "absolute" || position === "relative" || position === "fixed") {
                            // IE returns 0 when zIndex is not specified
                            // other browsers return a string
                            // we ignore the case of nested elements with an explicit value of 0
                            // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
                            value = parseInt(elem.css("zIndex"), 10);
                            if (!isNaN(value) && value !== 0) {
                                return value;
                            }
                        }
                        elem = elem.parent();
                    }
                }

                return 0;
            }
        });

        // $.ui.plugin is deprecated. Use $.widget() extensions instead.
        $.ui.plugin = {
            add: function add(module, option, set) {
                var i,
                    proto = $.ui[module].prototype;
                for (i in set) {
                    proto.plugins[i] = proto.plugins[i] || [];
                    proto.plugins[i].push([option, set[i]]);
                }
            },
            call: function call(instance, name, args, allowDisconnected) {
                var i,
                    set = instance.plugins[name];

                if (!set) {
                    return;
                }

                if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) {
                    return;
                }

                for (i = 0; i < set.length; i++) {
                    if (instance.options[set[i][0]]) {
                        set[i][1].apply(instance.element, args);
                    }
                }
            }
        };

        /*!
         * jQuery UI Widget 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/jQuery.widget/
         */

        var widget_uuid = 0,
            widget_slice = Array.prototype.slice;

        $.cleanData = function (orig) {
            return function (elems) {
                var events, elem, i;
                for (i = 0; (elem = elems[i]) != null; i++) {
                    try {

                        // Only trigger remove when necessary to save time
                        events = $._data(elem, "events");
                        if (events && events.remove) {
                            $(elem).triggerHandler("remove");
                        }

                        // http://bugs.jquery.com/ticket/8235
                    } catch (e) {}
                }
                orig(elems);
            };
        }($.cleanData);

        $.widget = function (name, base, prototype) {
            var fullName,
                existingConstructor,
                constructor,
                basePrototype,

            // proxiedPrototype allows the provided prototype to remain unmodified
            // so that it can be used as a mixin for multiple widgets (#8876)
            proxiedPrototype = {},
                namespace = name.split(".")[0];

            name = name.split(".")[1];
            fullName = namespace + "-" + name;

            if (!prototype) {
                prototype = base;
                base = $.Widget;
            }

            // create selector for plugin
            $.expr[":"][fullName.toLowerCase()] = function (elem) {
                return !!$.data(elem, fullName);
            };

            $[namespace] = $[namespace] || {};
            existingConstructor = $[namespace][name];
            constructor = $[namespace][name] = function (options, element) {
                // allow instantiation without "new" keyword
                if (!this._createWidget) {
                    return new constructor(options, element);
                }

                // allow instantiation without initializing for simple inheritance
                // must use "new" keyword (the code above always passes args)
                if (arguments.length) {
                    this._createWidget(options, element);
                }
            };
            // extend with the existing constructor to carry over any static properties
            $.extend(constructor, existingConstructor, {
                version: prototype.version,
                // copy the object used to create the prototype in case we need to
                // redefine the widget later
                _proto: $.extend({}, prototype),
                // track widgets that inherit from this widget in case this widget is
                // redefined after a widget inherits from it
                _childConstructors: []
            });

            basePrototype = new base();
            // we need to make the options hash a property directly on the new instance
            // otherwise we'll modify the options hash on the prototype that we're
            // inheriting from
            basePrototype.options = $.widget.extend({}, basePrototype.options);
            $.each(prototype, function (prop, value) {
                if (!$.isFunction(value)) {
                    proxiedPrototype[prop] = value;
                    return;
                }
                proxiedPrototype[prop] = function () {
                    var _super = function _super() {
                        return base.prototype[prop].apply(this, arguments);
                    },
                        _superApply = function _superApply(args) {
                        return base.prototype[prop].apply(this, args);
                    };
                    return function () {
                        var __super = this._super,
                            __superApply = this._superApply,
                            returnValue;

                        this._super = _super;
                        this._superApply = _superApply;

                        returnValue = value.apply(this, arguments);

                        this._super = __super;
                        this._superApply = __superApply;

                        return returnValue;
                    };
                }();
            });
            constructor.prototype = $.widget.extend(basePrototype, {
                // TODO: remove support for widgetEventPrefix
                // always use the name + a colon as the prefix, e.g., draggable:start
                // don't prefix for widgets that aren't DOM-based
                widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name
            }, proxiedPrototype, {
                constructor: constructor,
                namespace: namespace,
                widgetName: name,
                widgetFullName: fullName
            });

            // If this widget is being redefined then we need to find all widgets that
            // are inheriting from it and redefine all of them so that they inherit from
            // the new version of this widget. We're essentially trying to replace one
            // level in the prototype chain.
            if (existingConstructor) {
                $.each(existingConstructor._childConstructors, function (i, child) {
                    var childPrototype = child.prototype;

                    // redefine the child widget using the same prototype that was
                    // originally used, but inherit from the new version of the base
                    $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
                });
                // remove the list of existing child constructors from the old constructor
                // so the old child constructors can be garbage collected
                delete existingConstructor._childConstructors;
            } else {
                base._childConstructors.push(constructor);
            }

            $.widget.bridge(name, constructor);

            return constructor;
        };

        $.widget.extend = function (target) {
            var input = widget_slice.call(arguments, 1),
                inputIndex = 0,
                inputLength = input.length,
                key,
                value;
            for (; inputIndex < inputLength; inputIndex++) {
                for (key in input[inputIndex]) {
                    value = input[inputIndex][key];
                    if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {
                        // Clone objects
                        if ($.isPlainObject(value)) {
                            target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) :
                            // Don't extend strings, arrays, etc. with objects
                            $.widget.extend({}, value);
                            // Copy everything else by reference
                        } else {
                            target[key] = value;
                        }
                    }
                }
            }
            return target;
        };

        $.widget.bridge = function (name, object) {
            var fullName = object.prototype.widgetFullName || name;
            $.fn[name] = function (options) {
                var isMethodCall = typeof options === "string",
                    args = widget_slice.call(arguments, 1),
                    returnValue = this;

                if (isMethodCall) {
                    this.each(function () {
                        var methodValue,
                            instance = $.data(this, fullName);
                        if (options === "instance") {
                            returnValue = instance;
                            return false;
                        }
                        if (!instance) {
                            return $.error("cannot call methods on " + name + " prior to initialization; " + "attempted to call method '" + options + "'");
                        }
                        if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
                            return $.error("no such method '" + options + "' for " + name + " widget instance");
                        }
                        methodValue = instance[options].apply(instance, args);
                        if (methodValue !== instance && methodValue !== undefined) {
                            returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                            return false;
                        }
                    });
                } else {

                    // Allow multiple hashes to be passed on init
                    if (args.length) {
                        options = $.widget.extend.apply(null, [options].concat(args));
                    }

                    this.each(function () {
                        var instance = $.data(this, fullName);
                        if (instance) {
                            instance.option(options || {});
                            if (instance._init) {
                                instance._init();
                            }
                        } else {
                            $.data(this, fullName, new object(options, this));
                        }
                    });
                }

                return returnValue;
            };
        };

        $.Widget = function () /* options, element */{};
        $.Widget._childConstructors = [];

        $.Widget.prototype = {
            widgetName: "widget",
            widgetEventPrefix: "",
            defaultElement: "<div>",
            options: {
                disabled: false,

                // callbacks
                create: null
            },
            _createWidget: function _createWidget(options, element) {
                element = $(element || this.defaultElement || this)[0];
                this.element = $(element);
                this.uuid = widget_uuid++;
                this.eventNamespace = "." + this.widgetName + this.uuid;

                this.bindings = $();
                this.hoverable = $();
                this.focusable = $();

                if (element !== this) {
                    $.data(element, this.widgetFullName, this);
                    this._on(true, this.element, {
                        remove: function remove(event) {
                            if (event.target === element) {
                                this.destroy();
                            }
                        }
                    });
                    this.document = $(element.style ?
                    // element within the document
                    element.ownerDocument :
                    // element is window or document
                    element.document || element);
                    this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
                }

                this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);

                this._create();
                this._trigger("create", null, this._getCreateEventData());
                this._init();
            },
            _getCreateOptions: $.noop,
            _getCreateEventData: $.noop,
            _create: $.noop,
            _init: $.noop,

            destroy: function destroy() {
                this._destroy();
                // we can probably remove the unbind calls in 2.0
                // all event bindings should go through this._on()
                this.element.unbind(this.eventNamespace).removeData(this.widgetFullName)
                // support: jquery <1.6.3
                // http://bugs.jquery.com/ticket/9413
                .removeData($.camelCase(this.widgetFullName));
                this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled " + "ui-state-disabled");

                // clean up events and states
                this.bindings.unbind(this.eventNamespace);
                this.hoverable.removeClass("ui-state-hover");
                this.focusable.removeClass("ui-state-focus");
            },
            _destroy: $.noop,

            widget: function widget() {
                return this.element;
            },

            option: function option(key, value) {
                var options = key,
                    parts,
                    curOption,
                    i;

                if (arguments.length === 0) {
                    // don't return a reference to the internal hash
                    return $.widget.extend({}, this.options);
                }

                if (typeof key === "string") {
                    // handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
                    options = {};
                    parts = key.split(".");
                    key = parts.shift();
                    if (parts.length) {
                        curOption = options[key] = $.widget.extend({}, this.options[key]);
                        for (i = 0; i < parts.length - 1; i++) {
                            curOption[parts[i]] = curOption[parts[i]] || {};
                            curOption = curOption[parts[i]];
                        }
                        key = parts.pop();
                        if (arguments.length === 1) {
                            return curOption[key] === undefined ? null : curOption[key];
                        }
                        curOption[key] = value;
                    } else {
                        if (arguments.length === 1) {
                            return this.options[key] === undefined ? null : this.options[key];
                        }
                        options[key] = value;
                    }
                }

                this._setOptions(options);

                return this;
            },
            _setOptions: function _setOptions(options) {
                var key;

                for (key in options) {
                    this._setOption(key, options[key]);
                }

                return this;
            },
            _setOption: function _setOption(key, value) {
                this.options[key] = value;

                if (key === "disabled") {
                    this.widget().toggleClass(this.widgetFullName + "-disabled", !!value);

                    // If the widget is becoming disabled, then nothing is interactive
                    if (value) {
                        this.hoverable.removeClass("ui-state-hover");
                        this.focusable.removeClass("ui-state-focus");
                    }
                }

                return this;
            },

            enable: function enable() {
                return this._setOptions({ disabled: false });
            },
            disable: function disable() {
                return this._setOptions({ disabled: true });
            },

            _on: function _on(suppressDisabledCheck, element, handlers) {
                var delegateElement,
                    instance = this;

                // no suppressDisabledCheck flag, shuffle arguments
                if (typeof suppressDisabledCheck !== "boolean") {
                    handlers = element;
                    element = suppressDisabledCheck;
                    suppressDisabledCheck = false;
                }

                // no element argument, shuffle and use this.element
                if (!handlers) {
                    handlers = element;
                    element = this.element;
                    delegateElement = this.widget();
                } else {
                    element = delegateElement = $(element);
                    this.bindings = this.bindings.add(element);
                }

                $.each(handlers, function (event, handler) {
                    function handlerProxy() {
                        // allow widgets to customize the disabled handling
                        // - disabled as an array instead of boolean
                        // - disabled class as method for disabling individual parts
                        if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass("ui-state-disabled"))) {
                            return;
                        }
                        return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
                    }

                    // copy the guid so direct unbinding works
                    if (typeof handler !== "string") {
                        handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;
                    }

                    var match = event.match(/^([\w:-]*)\s*(.*)$/),
                        eventName = match[1] + instance.eventNamespace,
                        selector = match[2];
                    if (selector) {
                        delegateElement.delegate(selector, eventName, handlerProxy);
                    } else {
                        element.bind(eventName, handlerProxy);
                    }
                });
            },

            _off: function _off(element, eventName) {
                eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
                element.unbind(eventName).undelegate(eventName);

                // Clear the stack to avoid memory leaks (#10056)
                this.bindings = $(this.bindings.not(element).get());
                this.focusable = $(this.focusable.not(element).get());
                this.hoverable = $(this.hoverable.not(element).get());
            },

            _delay: function _delay(handler, delay) {
                function handlerProxy() {
                    return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
                }
                var instance = this;
                return setTimeout(handlerProxy, delay || 0);
            },

            _hoverable: function _hoverable(element) {
                this.hoverable = this.hoverable.add(element);
                this._on(element, {
                    mouseenter: function mouseenter(event) {
                        $(event.currentTarget).addClass("ui-state-hover");
                    },
                    mouseleave: function mouseleave(event) {
                        $(event.currentTarget).removeClass("ui-state-hover");
                    }
                });
            },

            _focusable: function _focusable(element) {
                this.focusable = this.focusable.add(element);
                this._on(element, {
                    focusin: function focusin(event) {
                        $(event.currentTarget).addClass("ui-state-focus");
                    },
                    focusout: function focusout(event) {
                        $(event.currentTarget).removeClass("ui-state-focus");
                    }
                });
            },

            _trigger: function _trigger(type, event, data) {
                var prop,
                    orig,
                    callback = this.options[type];

                data = data || {};
                event = $.Event(event);
                event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
                // the original event may come from any element
                // so we need to reset the target on the new event
                event.target = this.element[0];

                // copy original event properties over to the new event
                orig = event.originalEvent;
                if (orig) {
                    for (prop in orig) {
                        if (!(prop in event)) {
                            event[prop] = orig[prop];
                        }
                    }
                }

                this.element.trigger(event, data);
                return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());
            }
        };

        $.each({ show: "fadeIn", hide: "fadeOut" }, function (method, defaultEffect) {
            $.Widget.prototype["_" + method] = function (element, options, callback) {
                if (typeof options === "string") {
                    options = { effect: options };
                }
                var hasOptions,
                    effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect;
                options = options || {};
                if (typeof options === "number") {
                    options = { duration: options };
                }
                hasOptions = !$.isEmptyObject(options);
                options.complete = callback;
                if (options.delay) {
                    element.delay(options.delay);
                }
                if (hasOptions && $.effects && $.effects.effect[effectName]) {
                    element[method](options);
                } else if (effectName !== method && element[effectName]) {
                    element[effectName](options.duration, options.easing, callback);
                } else {
                    element.queue(function (next) {
                        $(this)[method]();
                        if (callback) {
                            callback.call(element[0]);
                        }
                        next();
                    });
                }
            };
        });

        var widget = $.widget;

        /*!
         * jQuery UI Mouse 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/mouse/
         */

        var mouseHandled = false;
        $(document).mouseup(function () {
            mouseHandled = false;
        });

        var mouse = $.widget("ui.mouse", {
            version: "1.11.4",
            options: {
                cancel: "input,textarea,button,select,option",
                distance: 1,
                delay: 0
            },
            _mouseInit: function _mouseInit() {
                var that = this;

                this.element.bind("mousedown." + this.widgetName, function (event) {
                    return that._mouseDown(event);
                }).bind("click." + this.widgetName, function (event) {
                    if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
                        $.removeData(event.target, that.widgetName + ".preventClickEvent");
                        event.stopImmediatePropagation();
                        return false;
                    }
                });

                this.started = false;
            },

            // TODO: make sure destroying one instance of mouse doesn't mess with
            // other instances of mouse
            _mouseDestroy: function _mouseDestroy() {
                this.element.unbind("." + this.widgetName);
                if (this._mouseMoveDelegate) {
                    this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
                }
            },

            _mouseDown: function _mouseDown(event) {
                // don't let more than one widget handle mouseStart
                if (mouseHandled) {
                    return;
                }

                this._mouseMoved = false;

                // we may have missed mouseup (out of window)
                this._mouseStarted && this._mouseUp(event);

                this._mouseDownEvent = event;

                var that = this,
                    btnIsLeft = event.which === 1,

                // event.target.nodeName works around a bug in IE 8 with
                // disabled inputs (#7620)
                elIsCancel = typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;
                if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                    return true;
                }

                this.mouseDelayMet = !this.options.delay;
                if (!this.mouseDelayMet) {
                    this._mouseDelayTimer = setTimeout(function () {
                        that.mouseDelayMet = true;
                    }, this.options.delay);
                }

                if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                    this._mouseStarted = this._mouseStart(event) !== false;
                    if (!this._mouseStarted) {
                        event.preventDefault();
                        return true;
                    }
                }

                // Click event may never have fired (Gecko & Opera)
                if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
                    $.removeData(event.target, this.widgetName + ".preventClickEvent");
                }

                // these delegates are required to keep context
                this._mouseMoveDelegate = function (event) {
                    return that._mouseMove(event);
                };
                this._mouseUpDelegate = function (event) {
                    return that._mouseUp(event);
                };

                this.document.bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);

                event.preventDefault();

                mouseHandled = true;
                return true;
            },

            _mouseMove: function _mouseMove(event) {
                // Only check for mouseups outside the document if you've moved inside the document
                // at least once. This prevents the firing of mouseup in the case of IE<9, which will
                // fire a mousemove event if content is placed under the cursor. See #7778
                // Support: IE <9
                if (this._mouseMoved) {
                    // IE mouseup check - mouseup happened when mouse was out of window
                    if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {
                        return this._mouseUp(event);

                        // Iframe mouseup check - mouseup occurred in another document
                    } else if (!event.which) {
                        return this._mouseUp(event);
                    }
                }

                if (event.which || event.button) {
                    this._mouseMoved = true;
                }

                if (this._mouseStarted) {
                    this._mouseDrag(event);
                    return event.preventDefault();
                }

                if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                    this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;
                    this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);
                }

                return !this._mouseStarted;
            },

            _mouseUp: function _mouseUp(event) {
                this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);

                if (this._mouseStarted) {
                    this._mouseStarted = false;

                    if (event.target === this._mouseDownEvent.target) {
                        $.data(event.target, this.widgetName + ".preventClickEvent", true);
                    }

                    this._mouseStop(event);
                }

                mouseHandled = false;
                return false;
            },

            _mouseDistanceMet: function _mouseDistanceMet(event) {
                return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
            },

            _mouseDelayMet: function _mouseDelayMet() /* event */{
                return this.mouseDelayMet;
            },

            // These are placeholder methods, to be overriden by extending plugin
            _mouseStart: function _mouseStart() /* event */{},
            _mouseDrag: function _mouseDrag() /* event */{},
            _mouseStop: function _mouseStop() /* event */{},
            _mouseCapture: function _mouseCapture() /* event */{
                return true;
            }
        });

        /*!
         * jQuery UI Position 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/position/
         */

        (function () {

            $.ui = $.ui || {};

            var cachedScrollbarWidth,
                supportsOffsetFractions,
                max = Math.max,
                abs = Math.abs,
                round = Math.round,
                rhorizontal = /left|center|right/,
                rvertical = /top|center|bottom/,
                roffset = /[\+\-]\d+(\.[\d]+)?%?/,
                rposition = /^\w+/,
                rpercent = /%$/,
                _position = $.fn.position;

            function getOffsets(offsets, width, height) {
                return [parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)];
            }

            function parseCss(element, property) {
                return parseInt($.css(element, property), 10) || 0;
            }

            function getDimensions(elem) {
                var raw = elem[0];
                if (raw.nodeType === 9) {
                    return {
                        width: elem.width(),
                        height: elem.height(),
                        offset: { top: 0, left: 0 }
                    };
                }
                if ($.isWindow(raw)) {
                    return {
                        width: elem.width(),
                        height: elem.height(),
                        offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
                    };
                }
                if (raw.preventDefault) {
                    return {
                        width: 0,
                        height: 0,
                        offset: { top: raw.pageY, left: raw.pageX }
                    };
                }
                return {
                    width: elem.outerWidth(),
                    height: elem.outerHeight(),
                    offset: elem.offset()
                };
            }

            $.position = {
                scrollbarWidth: function scrollbarWidth() {
                    if (cachedScrollbarWidth !== undefined) {
                        return cachedScrollbarWidth;
                    }
                    var w1,
                        w2,
                        div = $("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),
                        innerDiv = div.children()[0];

                    $("body").append(div);
                    w1 = innerDiv.offsetWidth;
                    div.css("overflow", "scroll");

                    w2 = innerDiv.offsetWidth;

                    if (w1 === w2) {
                        w2 = div[0].clientWidth;
                    }

                    div.remove();

                    return cachedScrollbarWidth = w1 - w2;
                },
                getScrollInfo: function getScrollInfo(within) {
                    var overflowX = within.isWindow || within.isDocument ? "" : within.element.css("overflow-x"),
                        overflowY = within.isWindow || within.isDocument ? "" : within.element.css("overflow-y"),
                        hasOverflowX = overflowX === "scroll" || overflowX === "auto" && within.width < within.element[0].scrollWidth,
                        hasOverflowY = overflowY === "scroll" || overflowY === "auto" && within.height < within.element[0].scrollHeight;
                    return {
                        width: hasOverflowY ? $.position.scrollbarWidth() : 0,
                        height: hasOverflowX ? $.position.scrollbarWidth() : 0
                    };
                },
                getWithinInfo: function getWithinInfo(element) {
                    var withinElement = $(element || window),
                        isWindow = $.isWindow(withinElement[0]),
                        isDocument = !!withinElement[0] && withinElement[0].nodeType === 9;
                    return {
                        element: withinElement,
                        isWindow: isWindow,
                        isDocument: isDocument,
                        offset: withinElement.offset() || { left: 0, top: 0 },
                        scrollLeft: withinElement.scrollLeft(),
                        scrollTop: withinElement.scrollTop(),

                        // support: jQuery 1.6.x
                        // jQuery 1.6 doesn't support .outerWidth/Height() on documents or windows
                        width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
                        height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
                    };
                }
            };

            $.fn.position = function (options) {
                if (!options || !options.of) {
                    return _position.apply(this, arguments);
                }

                // make a copy, we don't want to modify arguments
                options = $.extend({}, options);

                var atOffset,
                    targetWidth,
                    targetHeight,
                    targetOffset,
                    basePosition,
                    dimensions,
                    target = $(options.of),
                    within = $.position.getWithinInfo(options.within),
                    scrollInfo = $.position.getScrollInfo(within),
                    collision = (options.collision || "flip").split(" "),
                    offsets = {};

                dimensions = getDimensions(target);
                if (target[0].preventDefault) {
                    // force left top to allow flipping
                    options.at = "left top";
                }
                targetWidth = dimensions.width;
                targetHeight = dimensions.height;
                targetOffset = dimensions.offset;
                // clone to reuse original targetOffset later
                basePosition = $.extend({}, targetOffset);

                // force my and at to have valid horizontal and vertical positions
                // if a value is missing or invalid, it will be converted to center
                $.each(["my", "at"], function () {
                    var pos = (options[this] || "").split(" "),
                        horizontalOffset,
                        verticalOffset;

                    if (pos.length === 1) {
                        pos = rhorizontal.test(pos[0]) ? pos.concat(["center"]) : rvertical.test(pos[0]) ? ["center"].concat(pos) : ["center", "center"];
                    }
                    pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
                    pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";

                    // calculate offsets
                    horizontalOffset = roffset.exec(pos[0]);
                    verticalOffset = roffset.exec(pos[1]);
                    offsets[this] = [horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0];

                    // reduce to just the positions without the offsets
                    options[this] = [rposition.exec(pos[0])[0], rposition.exec(pos[1])[0]];
                });

                // normalize collision option
                if (collision.length === 1) {
                    collision[1] = collision[0];
                }

                if (options.at[0] === "right") {
                    basePosition.left += targetWidth;
                } else if (options.at[0] === "center") {
                    basePosition.left += targetWidth / 2;
                }

                if (options.at[1] === "bottom") {
                    basePosition.top += targetHeight;
                } else if (options.at[1] === "center") {
                    basePosition.top += targetHeight / 2;
                }

                atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
                basePosition.left += atOffset[0];
                basePosition.top += atOffset[1];

                return this.each(function () {
                    var collisionPosition,
                        using,
                        elem = $(this),
                        elemWidth = elem.outerWidth(),
                        elemHeight = elem.outerHeight(),
                        marginLeft = parseCss(this, "marginLeft"),
                        marginTop = parseCss(this, "marginTop"),
                        collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width,
                        collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height,
                        position = $.extend({}, basePosition),
                        myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());

                    if (options.my[0] === "right") {
                        position.left -= elemWidth;
                    } else if (options.my[0] === "center") {
                        position.left -= elemWidth / 2;
                    }

                    if (options.my[1] === "bottom") {
                        position.top -= elemHeight;
                    } else if (options.my[1] === "center") {
                        position.top -= elemHeight / 2;
                    }

                    position.left += myOffset[0];
                    position.top += myOffset[1];

                    // if the browser doesn't support fractions, then round for consistent results
                    if (!supportsOffsetFractions) {
                        position.left = round(position.left);
                        position.top = round(position.top);
                    }

                    collisionPosition = {
                        marginLeft: marginLeft,
                        marginTop: marginTop
                    };

                    $.each(["left", "top"], function (i, dir) {
                        if ($.ui.position[collision[i]]) {
                            $.ui.position[collision[i]][dir](position, {
                                targetWidth: targetWidth,
                                targetHeight: targetHeight,
                                elemWidth: elemWidth,
                                elemHeight: elemHeight,
                                collisionPosition: collisionPosition,
                                collisionWidth: collisionWidth,
                                collisionHeight: collisionHeight,
                                offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],
                                my: options.my,
                                at: options.at,
                                within: within,
                                elem: elem
                            });
                        }
                    });

                    if (options.using) {
                        // adds feedback as second argument to using callback, if present
                        using = function using(props) {
                            var left = targetOffset.left - position.left,
                                right = left + targetWidth - elemWidth,
                                top = targetOffset.top - position.top,
                                bottom = top + targetHeight - elemHeight,
                                feedback = {
                                target: {
                                    element: target,
                                    left: targetOffset.left,
                                    top: targetOffset.top,
                                    width: targetWidth,
                                    height: targetHeight
                                },
                                element: {
                                    element: elem,
                                    left: position.left,
                                    top: position.top,
                                    width: elemWidth,
                                    height: elemHeight
                                },
                                horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                                vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                            };
                            if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
                                feedback.horizontal = "center";
                            }
                            if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
                                feedback.vertical = "middle";
                            }
                            if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
                                feedback.important = "horizontal";
                            } else {
                                feedback.important = "vertical";
                            }
                            options.using.call(this, props, feedback);
                        };
                    }

                    elem.offset($.extend(position, { using: using }));
                });
            };

            $.ui.position = {
                fit: {
                    left: function left(position, data) {
                        var within = data.within,
                            withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
                            outerWidth = within.width,
                            collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                            overLeft = withinOffset - collisionPosLeft,
                            overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
                            newOverRight;

                        // element is wider than within
                        if (data.collisionWidth > outerWidth) {
                            // element is initially over the left side of within
                            if (overLeft > 0 && overRight <= 0) {
                                newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                                position.left += overLeft - newOverRight;
                                // element is initially over right side of within
                            } else if (overRight > 0 && overLeft <= 0) {
                                position.left = withinOffset;
                                // element is initially over both left and right sides of within
                            } else {
                                if (overLeft > overRight) {
                                    position.left = withinOffset + outerWidth - data.collisionWidth;
                                } else {
                                    position.left = withinOffset;
                                }
                            }
                            // too far left -> align with left edge
                        } else if (overLeft > 0) {
                            position.left += overLeft;
                            // too far right -> align with right edge
                        } else if (overRight > 0) {
                            position.left -= overRight;
                            // adjust based on position and margin
                        } else {
                            position.left = max(position.left - collisionPosLeft, position.left);
                        }
                    },
                    top: function top(position, data) {
                        var within = data.within,
                            withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
                            outerHeight = data.within.height,
                            collisionPosTop = position.top - data.collisionPosition.marginTop,
                            overTop = withinOffset - collisionPosTop,
                            overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
                            newOverBottom;

                        // element is taller than within
                        if (data.collisionHeight > outerHeight) {
                            // element is initially over the top of within
                            if (overTop > 0 && overBottom <= 0) {
                                newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                                position.top += overTop - newOverBottom;
                                // element is initially over bottom of within
                            } else if (overBottom > 0 && overTop <= 0) {
                                position.top = withinOffset;
                                // element is initially over both top and bottom of within
                            } else {
                                if (overTop > overBottom) {
                                    position.top = withinOffset + outerHeight - data.collisionHeight;
                                } else {
                                    position.top = withinOffset;
                                }
                            }
                            // too far up -> align with top
                        } else if (overTop > 0) {
                            position.top += overTop;
                            // too far down -> align with bottom edge
                        } else if (overBottom > 0) {
                            position.top -= overBottom;
                            // adjust based on position and margin
                        } else {
                            position.top = max(position.top - collisionPosTop, position.top);
                        }
                    }
                },
                flip: {
                    left: function left(position, data) {
                        var within = data.within,
                            withinOffset = within.offset.left + within.scrollLeft,
                            outerWidth = within.width,
                            offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
                            collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                            overLeft = collisionPosLeft - offsetLeft,
                            overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
                            myOffset = data.my[0] === "left" ? -data.elemWidth : data.my[0] === "right" ? data.elemWidth : 0,
                            atOffset = data.at[0] === "left" ? data.targetWidth : data.at[0] === "right" ? -data.targetWidth : 0,
                            offset = -2 * data.offset[0],
                            newOverRight,
                            newOverLeft;

                        if (overLeft < 0) {
                            newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                            if (newOverRight < 0 || newOverRight < abs(overLeft)) {
                                position.left += myOffset + atOffset + offset;
                            }
                        } else if (overRight > 0) {
                            newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                            if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
                                position.left += myOffset + atOffset + offset;
                            }
                        }
                    },
                    top: function top(position, data) {
                        var within = data.within,
                            withinOffset = within.offset.top + within.scrollTop,
                            outerHeight = within.height,
                            offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
                            collisionPosTop = position.top - data.collisionPosition.marginTop,
                            overTop = collisionPosTop - offsetTop,
                            overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
                            top = data.my[1] === "top",
                            myOffset = top ? -data.elemHeight : data.my[1] === "bottom" ? data.elemHeight : 0,
                            atOffset = data.at[1] === "top" ? data.targetHeight : data.at[1] === "bottom" ? -data.targetHeight : 0,
                            offset = -2 * data.offset[1],
                            newOverTop,
                            newOverBottom;
                        if (overTop < 0) {
                            newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                            if (newOverBottom < 0 || newOverBottom < abs(overTop)) {
                                position.top += myOffset + atOffset + offset;
                            }
                        } else if (overBottom > 0) {
                            newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                            if (newOverTop > 0 || abs(newOverTop) < overBottom) {
                                position.top += myOffset + atOffset + offset;
                            }
                        }
                    }
                },
                flipfit: {
                    left: function left() {
                        $.ui.position.flip.left.apply(this, arguments);
                        $.ui.position.fit.left.apply(this, arguments);
                    },
                    top: function top() {
                        $.ui.position.flip.top.apply(this, arguments);
                        $.ui.position.fit.top.apply(this, arguments);
                    }
                }
            };

            // fraction support test
            (function () {
                var testElement,
                    testElementParent,
                    testElementStyle,
                    offsetLeft,
                    i,
                    body = document.getElementsByTagName("body")[0],
                    div = document.createElement("div");

                //Create a "fake body" for testing based on method used in jQuery.support
                testElement = document.createElement(body ? "div" : "body");
                testElementStyle = {
                    visibility: "hidden",
                    width: 0,
                    height: 0,
                    border: 0,
                    margin: 0,
                    background: "none"
                };
                if (body) {
                    $.extend(testElementStyle, {
                        position: "absolute",
                        left: "-1000px",
                        top: "-1000px"
                    });
                }
                for (i in testElementStyle) {
                    testElement.style[i] = testElementStyle[i];
                }
                testElement.appendChild(div);
                testElementParent = body || document.documentElement;
                testElementParent.insertBefore(testElement, testElementParent.firstChild);

                div.style.cssText = "position: absolute; left: 10.7432222px;";

                offsetLeft = $(div).offset().left;
                supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;

                testElement.innerHTML = "";
                testElementParent.removeChild(testElement);
            })();
        })();

        var position = $.ui.position;

        /*!
         * jQuery UI Accordion 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/accordion/
         */

        var accordion = $.widget("ui.accordion", {
            version: "1.11.4",
            options: {
                active: 0,
                animate: {},
                collapsible: false,
                event: "click",
                header: "> li > :first-child,> :not(li):even",
                heightStyle: "auto",
                icons: {
                    activeHeader: "ui-icon-triangle-1-s",
                    header: "ui-icon-triangle-1-e"
                },

                // callbacks
                activate: null,
                beforeActivate: null
            },

            hideProps: {
                borderTopWidth: "hide",
                borderBottomWidth: "hide",
                paddingTop: "hide",
                paddingBottom: "hide",
                height: "hide"
            },

            showProps: {
                borderTopWidth: "show",
                borderBottomWidth: "show",
                paddingTop: "show",
                paddingBottom: "show",
                height: "show"
            },

            _create: function _create() {
                var options = this.options;
                this.prevShow = this.prevHide = $();
                this.element.addClass("ui-accordion ui-widget ui-helper-reset")
                // ARIA
                .attr("role", "tablist");

                // don't allow collapsible: false and active: false / null
                if (!options.collapsible && (options.active === false || options.active == null)) {
                    options.active = 0;
                }

                this._processPanels();
                // handle negative values
                if (options.active < 0) {
                    options.active += this.headers.length;
                }
                this._refresh();
            },

            _getCreateEventData: function _getCreateEventData() {
                return {
                    header: this.active,
                    panel: !this.active.length ? $() : this.active.next()
                };
            },

            _createIcons: function _createIcons() {
                var icons = this.options.icons;
                if (icons) {
                    $("<span>").addClass("ui-accordion-header-icon ui-icon " + icons.header).prependTo(this.headers);
                    this.active.children(".ui-accordion-header-icon").removeClass(icons.header).addClass(icons.activeHeader);
                    this.headers.addClass("ui-accordion-icons");
                }
            },

            _destroyIcons: function _destroyIcons() {
                this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove();
            },

            _destroy: function _destroy() {
                var contents;

                // clean up main element
                this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role");

                // clean up headers
                this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-state-default " + "ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").removeUniqueId();

                this._destroyIcons();

                // clean up content panels
                contents = this.headers.next().removeClass("ui-helper-reset ui-widget-content ui-corner-bottom " + "ui-accordion-content ui-accordion-content-active ui-state-disabled").css("display", "").removeAttr("role").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeUniqueId();

                if (this.options.heightStyle !== "content") {
                    contents.css("height", "");
                }
            },

            _setOption: function _setOption(key, value) {
                if (key === "active") {
                    // _activate() will handle invalid values and update this.options
                    this._activate(value);
                    return;
                }

                if (key === "event") {
                    if (this.options.event) {
                        this._off(this.headers, this.options.event);
                    }
                    this._setupEvents(value);
                }

                this._super(key, value);

                // setting collapsible: false while collapsed; open first panel
                if (key === "collapsible" && !value && this.options.active === false) {
                    this._activate(0);
                }

                if (key === "icons") {
                    this._destroyIcons();
                    if (value) {
                        this._createIcons();
                    }
                }

                // #5332 - opacity doesn't cascade to positioned elements in IE
                // so we need to add the disabled class to the headers and panels
                if (key === "disabled") {
                    this.element.toggleClass("ui-state-disabled", !!value).attr("aria-disabled", value);
                    this.headers.add(this.headers.next()).toggleClass("ui-state-disabled", !!value);
                }
            },

            _keydown: function _keydown(event) {
                if (event.altKey || event.ctrlKey) {
                    return;
                }

                var keyCode = $.ui.keyCode,
                    length = this.headers.length,
                    currentIndex = this.headers.index(event.target),
                    toFocus = false;

                switch (event.keyCode) {
                    case keyCode.RIGHT:
                    case keyCode.DOWN:
                        toFocus = this.headers[(currentIndex + 1) % length];
                        break;
                    case keyCode.LEFT:
                    case keyCode.UP:
                        toFocus = this.headers[(currentIndex - 1 + length) % length];
                        break;
                    case keyCode.SPACE:
                    case keyCode.ENTER:
                        this._eventHandler(event);
                        break;
                    case keyCode.HOME:
                        toFocus = this.headers[0];
                        break;
                    case keyCode.END:
                        toFocus = this.headers[length - 1];
                        break;
                }

                if (toFocus) {
                    $(event.target).attr("tabIndex", -1);
                    $(toFocus).attr("tabIndex", 0);
                    toFocus.focus();
                    event.preventDefault();
                }
            },

            _panelKeyDown: function _panelKeyDown(event) {
                if (event.keyCode === $.ui.keyCode.UP && event.ctrlKey) {
                    $(event.currentTarget).prev().focus();
                }
            },

            refresh: function refresh() {
                var options = this.options;
                this._processPanels();

                // was collapsed or no panel
                if (options.active === false && options.collapsible === true || !this.headers.length) {
                    options.active = false;
                    this.active = $();
                    // active false only when collapsible is true
                } else if (options.active === false) {
                    this._activate(0);
                    // was active, but active panel is gone
                } else if (this.active.length && !$.contains(this.element[0], this.active[0])) {
                    // all remaining panel are disabled
                    if (this.headers.length === this.headers.find(".ui-state-disabled").length) {
                        options.active = false;
                        this.active = $();
                        // activate previous panel
                    } else {
                        this._activate(Math.max(0, options.active - 1));
                    }
                    // was active, active panel still exists
                } else {
                    // make sure active index is correct
                    options.active = this.headers.index(this.active);
                }

                this._destroyIcons();

                this._refresh();
            },

            _processPanels: function _processPanels() {
                var prevHeaders = this.headers,
                    prevPanels = this.panels;

                this.headers = this.element.find(this.options.header).addClass("ui-accordion-header ui-state-default ui-corner-all");

                this.panels = this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").filter(":not(.ui-accordion-content-active)").hide();

                // Avoid memory leaks (#10056)
                if (prevPanels) {
                    this._off(prevHeaders.not(this.headers));
                    this._off(prevPanels.not(this.panels));
                }
            },

            _refresh: function _refresh() {
                var maxHeight,
                    options = this.options,
                    heightStyle = options.heightStyle,
                    parent = this.element.parent();

                this.active = this._findActive(options.active).addClass("ui-accordion-header-active ui-state-active ui-corner-top").removeClass("ui-corner-all");
                this.active.next().addClass("ui-accordion-content-active").show();

                this.headers.attr("role", "tab").each(function () {
                    var header = $(this),
                        headerId = header.uniqueId().attr("id"),
                        panel = header.next(),
                        panelId = panel.uniqueId().attr("id");
                    header.attr("aria-controls", panelId);
                    panel.attr("aria-labelledby", headerId);
                }).next().attr("role", "tabpanel");

                this.headers.not(this.active).attr({
                    "aria-selected": "false",
                    "aria-expanded": "false",
                    tabIndex: -1
                }).next().attr({
                    "aria-hidden": "true"
                }).hide();

                // make sure at least one header is in the tab order
                if (!this.active.length) {
                    this.headers.eq(0).attr("tabIndex", 0);
                } else {
                    this.active.attr({
                        "aria-selected": "true",
                        "aria-expanded": "true",
                        tabIndex: 0
                    }).next().attr({
                        "aria-hidden": "false"
                    });
                }

                this._createIcons();

                this._setupEvents(options.event);

                if (heightStyle === "fill") {
                    maxHeight = parent.height();
                    this.element.siblings(":visible").each(function () {
                        var elem = $(this),
                            position = elem.css("position");

                        if (position === "absolute" || position === "fixed") {
                            return;
                        }
                        maxHeight -= elem.outerHeight(true);
                    });

                    this.headers.each(function () {
                        maxHeight -= $(this).outerHeight(true);
                    });

                    this.headers.next().each(function () {
                        $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
                    }).css("overflow", "auto");
                } else if (heightStyle === "auto") {
                    maxHeight = 0;
                    this.headers.next().each(function () {
                        maxHeight = Math.max(maxHeight, $(this).css("height", "").height());
                    }).height(maxHeight);
                }
            },

            _activate: function _activate(index) {
                var active = this._findActive(index)[0];

                // trying to activate the already active panel
                if (active === this.active[0]) {
                    return;
                }

                // trying to collapse, simulate a click on the currently active header
                active = active || this.active[0];

                this._eventHandler({
                    target: active,
                    currentTarget: active,
                    preventDefault: $.noop
                });
            },

            _findActive: function _findActive(selector) {
                return typeof selector === "number" ? this.headers.eq(selector) : $();
            },

            _setupEvents: function _setupEvents(event) {
                var events = {
                    keydown: "_keydown"
                };
                if (event) {
                    $.each(event.split(" "), function (index, eventName) {
                        events[eventName] = "_eventHandler";
                    });
                }

                this._off(this.headers.add(this.headers.next()));
                this._on(this.headers, events);
                this._on(this.headers.next(), { keydown: "_panelKeyDown" });
                this._hoverable(this.headers);
                this._focusable(this.headers);
            },

            _eventHandler: function _eventHandler(event) {
                var options = this.options,
                    active = this.active,
                    clicked = $(event.currentTarget),
                    clickedIsActive = clicked[0] === active[0],
                    collapsing = clickedIsActive && options.collapsible,
                    toShow = collapsing ? $() : clicked.next(),
                    toHide = active.next(),
                    eventData = {
                    oldHeader: active,
                    oldPanel: toHide,
                    newHeader: collapsing ? $() : clicked,
                    newPanel: toShow
                };

                event.preventDefault();

                if (
                // click on active header, but not collapsible
                clickedIsActive && !options.collapsible ||
                // allow canceling activation
                this._trigger("beforeActivate", event, eventData) === false) {
                    return;
                }

                options.active = collapsing ? false : this.headers.index(clicked);

                // when the call to ._toggle() comes after the class changes
                // it causes a very odd bug in IE 8 (see #6720)
                this.active = clickedIsActive ? $() : clicked;
                this._toggle(eventData);

                // switch classes
                // corner classes on the previously active header stay after the animation
                active.removeClass("ui-accordion-header-active ui-state-active");
                if (options.icons) {
                    active.children(".ui-accordion-header-icon").removeClass(options.icons.activeHeader).addClass(options.icons.header);
                }

                if (!clickedIsActive) {
                    clicked.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top");
                    if (options.icons) {
                        clicked.children(".ui-accordion-header-icon").removeClass(options.icons.header).addClass(options.icons.activeHeader);
                    }

                    clicked.next().addClass("ui-accordion-content-active");
                }
            },

            _toggle: function _toggle(data) {
                var toShow = data.newPanel,
                    toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

                // handle activating a panel during the animation for another activation
                this.prevShow.add(this.prevHide).stop(true, true);
                this.prevShow = toShow;
                this.prevHide = toHide;

                if (this.options.animate) {
                    this._animate(toShow, toHide, data);
                } else {
                    toHide.hide();
                    toShow.show();
                    this._toggleComplete(data);
                }

                toHide.attr({
                    "aria-hidden": "true"
                });
                toHide.prev().attr({
                    "aria-selected": "false",
                    "aria-expanded": "false"
                });
                // if we're switching panels, remove the old header from the tab order
                // if we're opening from collapsed state, remove the previous header from the tab order
                // if we're collapsing, then keep the collapsing header in the tab order
                if (toShow.length && toHide.length) {
                    toHide.prev().attr({
                        "tabIndex": -1,
                        "aria-expanded": "false"
                    });
                } else if (toShow.length) {
                    this.headers.filter(function () {
                        return parseInt($(this).attr("tabIndex"), 10) === 0;
                    }).attr("tabIndex", -1);
                }

                toShow.attr("aria-hidden", "false").prev().attr({
                    "aria-selected": "true",
                    "aria-expanded": "true",
                    tabIndex: 0
                });
            },

            _animate: function _animate(toShow, toHide, data) {
                var total,
                    easing,
                    duration,
                    that = this,
                    adjust = 0,
                    boxSizing = toShow.css("box-sizing"),
                    down = toShow.length && (!toHide.length || toShow.index() < toHide.index()),
                    animate = this.options.animate || {},
                    options = down && animate.down || animate,
                    complete = function complete() {
                    that._toggleComplete(data);
                };

                if (typeof options === "number") {
                    duration = options;
                }
                if (typeof options === "string") {
                    easing = options;
                }
                // fall back from options to animation in case of partial down settings
                easing = easing || options.easing || animate.easing;
                duration = duration || options.duration || animate.duration;

                if (!toHide.length) {
                    return toShow.animate(this.showProps, duration, easing, complete);
                }
                if (!toShow.length) {
                    return toHide.animate(this.hideProps, duration, easing, complete);
                }

                total = toShow.show().outerHeight();
                toHide.animate(this.hideProps, {
                    duration: duration,
                    easing: easing,
                    step: function step(now, fx) {
                        fx.now = Math.round(now);
                    }
                });
                toShow.hide().animate(this.showProps, {
                    duration: duration,
                    easing: easing,
                    complete: complete,
                    step: function step(now, fx) {
                        fx.now = Math.round(now);
                        if (fx.prop !== "height") {
                            if (boxSizing === "content-box") {
                                adjust += fx.now;
                            }
                        } else if (that.options.heightStyle !== "content") {
                            fx.now = Math.round(total - toHide.outerHeight() - adjust);
                            adjust = 0;
                        }
                    }
                });
            },

            _toggleComplete: function _toggleComplete(data) {
                var toHide = data.oldPanel;

                toHide.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all");

                // Work around for rendering bug in IE (#5421)
                if (toHide.length) {
                    toHide.parent()[0].className = toHide.parent()[0].className;
                }
                this._trigger("activate", null, data);
            }
        });

        /*!
         * jQuery UI Menu 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/menu/
         */

        var menu = $.widget("ui.menu", {
            version: "1.11.4",
            defaultElement: "<ul>",
            delay: 300,
            options: {
                icons: {
                    submenu: "ui-icon-carat-1-e"
                },
                items: "> *",
                menus: "ul",
                position: {
                    my: "left-1 top",
                    at: "right top"
                },
                role: "menu",

                // callbacks
                blur: null,
                focus: null,
                select: null
            },

            _create: function _create() {
                this.activeMenu = this.element;

                // Flag used to prevent firing of the click handler
                // as the event bubbles up through nested menus
                this.mouseHandled = false;
                this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content").toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length).attr({
                    role: this.options.role,
                    tabIndex: 0
                });

                if (this.options.disabled) {
                    this.element.addClass("ui-state-disabled").attr("aria-disabled", "true");
                }

                this._on({
                    // Prevent focus from sticking to links inside menu after clicking
                    // them (focus should always stay on UL during navigation).
                    "mousedown .ui-menu-item": function mousedownUiMenuItem(event) {
                        event.preventDefault();
                    },
                    "click .ui-menu-item": function clickUiMenuItem(event) {
                        var target = $(event.target);
                        if (!this.mouseHandled && target.not(".ui-state-disabled").length) {
                            this.select(event);

                            // Only set the mouseHandled flag if the event will bubble, see #9469.
                            if (!event.isPropagationStopped()) {
                                this.mouseHandled = true;
                            }

                            // Open submenu on click
                            if (target.has(".ui-menu").length) {
                                this.expand(event);
                            } else if (!this.element.is(":focus") && $(this.document[0].activeElement).closest(".ui-menu").length) {

                                // Redirect focus to the menu
                                this.element.trigger("focus", [true]);

                                // If the active item is on the top level, let it stay active.
                                // Otherwise, blur the active item since it is no longer visible.
                                if (this.active && this.active.parents(".ui-menu").length === 1) {
                                    clearTimeout(this.timer);
                                }
                            }
                        }
                    },
                    "mouseenter .ui-menu-item": function mouseenterUiMenuItem(event) {
                        // Ignore mouse events while typeahead is active, see #10458.
                        // Prevents focusing the wrong item when typeahead causes a scroll while the mouse
                        // is over an item in the menu
                        if (this.previousFilter) {
                            return;
                        }
                        var target = $(event.currentTarget);
                        // Remove ui-state-active class from siblings of the newly focused menu item
                        // to avoid a jump caused by adjacent elements both having a class with a border
                        target.siblings(".ui-state-active").removeClass("ui-state-active");
                        this.focus(event, target);
                    },
                    mouseleave: "collapseAll",
                    "mouseleave .ui-menu": "collapseAll",
                    focus: function focus(event, keepActiveItem) {
                        // If there's already an active item, keep it active
                        // If not, activate the first item
                        var item = this.active || this.element.find(this.options.items).eq(0);

                        if (!keepActiveItem) {
                            this.focus(event, item);
                        }
                    },
                    blur: function blur(event) {
                        this._delay(function () {
                            if (!$.contains(this.element[0], this.document[0].activeElement)) {
                                this.collapseAll(event);
                            }
                        });
                    },
                    keydown: "_keydown"
                });

                this.refresh();

                // Clicks outside of a menu collapse any open menus
                this._on(this.document, {
                    click: function click(event) {
                        if (this._closeOnDocumentClick(event)) {
                            this.collapseAll(event);
                        }

                        // Reset the mouseHandled flag
                        this.mouseHandled = false;
                    }
                });
            },

            _destroy: function _destroy() {
                // Destroy (sub)menus
                this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeClass("ui-menu ui-widget ui-widget-content ui-menu-icons ui-front").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show();

                // Destroy menu items
                this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").removeUniqueId().removeClass("ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function () {
                    var elem = $(this);
                    if (elem.data("ui-menu-submenu-carat")) {
                        elem.remove();
                    }
                });

                // Destroy menu dividers
                this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content");
            },

            _keydown: function _keydown(event) {
                var match,
                    prev,
                    character,
                    skip,
                    preventDefault = true;

                switch (event.keyCode) {
                    case $.ui.keyCode.PAGE_UP:
                        this.previousPage(event);
                        break;
                    case $.ui.keyCode.PAGE_DOWN:
                        this.nextPage(event);
                        break;
                    case $.ui.keyCode.HOME:
                        this._move("first", "first", event);
                        break;
                    case $.ui.keyCode.END:
                        this._move("last", "last", event);
                        break;
                    case $.ui.keyCode.UP:
                        this.previous(event);
                        break;
                    case $.ui.keyCode.DOWN:
                        this.next(event);
                        break;
                    case $.ui.keyCode.LEFT:
                        this.collapse(event);
                        break;
                    case $.ui.keyCode.RIGHT:
                        if (this.active && !this.active.is(".ui-state-disabled")) {
                            this.expand(event);
                        }
                        break;
                    case $.ui.keyCode.ENTER:
                    case $.ui.keyCode.SPACE:
                        this._activate(event);
                        break;
                    case $.ui.keyCode.ESCAPE:
                        this.collapse(event);
                        break;
                    default:
                        preventDefault = false;
                        prev = this.previousFilter || "";
                        character = String.fromCharCode(event.keyCode);
                        skip = false;

                        clearTimeout(this.filterTimer);

                        if (character === prev) {
                            skip = true;
                        } else {
                            character = prev + character;
                        }

                        match = this._filterMenuItems(character);
                        match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(".ui-menu-item") : match;

                        // If no matches on the current filter, reset to the last character pressed
                        // to move down the menu to the first item that starts with that character
                        if (!match.length) {
                            character = String.fromCharCode(event.keyCode);
                            match = this._filterMenuItems(character);
                        }

                        if (match.length) {
                            this.focus(event, match);
                            this.previousFilter = character;
                            this.filterTimer = this._delay(function () {
                                delete this.previousFilter;
                            }, 1000);
                        } else {
                            delete this.previousFilter;
                        }
                }

                if (preventDefault) {
                    event.preventDefault();
                }
            },

            _activate: function _activate(event) {
                if (!this.active.is(".ui-state-disabled")) {
                    if (this.active.is("[aria-haspopup='true']")) {
                        this.expand(event);
                    } else {
                        this.select(event);
                    }
                }
            },

            refresh: function refresh() {
                var menus,
                    items,
                    that = this,
                    icon = this.options.icons.submenu,
                    submenus = this.element.find(this.options.menus);

                this.element.toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length);

                // Initialize nested menus
                submenus.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-front").hide().attr({
                    role: this.options.role,
                    "aria-hidden": "true",
                    "aria-expanded": "false"
                }).each(function () {
                    var menu = $(this),
                        item = menu.parent(),
                        submenuCarat = $("<span>").addClass("ui-menu-icon ui-icon " + icon).data("ui-menu-submenu-carat", true);

                    item.attr("aria-haspopup", "true").prepend(submenuCarat);
                    menu.attr("aria-labelledby", item.attr("id"));
                });

                menus = submenus.add(this.element);
                items = menus.find(this.options.items);

                // Initialize menu-items containing spaces and/or dashes only as dividers
                items.not(".ui-menu-item").each(function () {
                    var item = $(this);
                    if (that._isDivider(item)) {
                        item.addClass("ui-widget-content ui-menu-divider");
                    }
                });

                // Don't refresh list items that are already adapted
                items.not(".ui-menu-item, .ui-menu-divider").addClass("ui-menu-item").uniqueId().attr({
                    tabIndex: -1,
                    role: this._itemRole()
                });

                // Add aria-disabled attribute to any disabled menu item
                items.filter(".ui-state-disabled").attr("aria-disabled", "true");

                // If the active item has been removed, blur the menu
                if (this.active && !$.contains(this.element[0], this.active[0])) {
                    this.blur();
                }
            },

            _itemRole: function _itemRole() {
                return {
                    menu: "menuitem",
                    listbox: "option"
                }[this.options.role];
            },

            _setOption: function _setOption(key, value) {
                if (key === "icons") {
                    this.element.find(".ui-menu-icon").removeClass(this.options.icons.submenu).addClass(value.submenu);
                }
                if (key === "disabled") {
                    this.element.toggleClass("ui-state-disabled", !!value).attr("aria-disabled", value);
                }
                this._super(key, value);
            },

            focus: function focus(event, item) {
                var nested, focused;
                this.blur(event, event && event.type === "focus");

                this._scrollIntoView(item);

                this.active = item.first();
                focused = this.active.addClass("ui-state-focus").removeClass("ui-state-active");
                // Only update aria-activedescendant if there's a role
                // otherwise we assume focus is managed elsewhere
                if (this.options.role) {
                    this.element.attr("aria-activedescendant", focused.attr("id"));
                }

                // Highlight active parent menu item, if any
                this.active.parent().closest(".ui-menu-item").addClass("ui-state-active");

                if (event && event.type === "keydown") {
                    this._close();
                } else {
                    this.timer = this._delay(function () {
                        this._close();
                    }, this.delay);
                }

                nested = item.children(".ui-menu");
                if (nested.length && event && /^mouse/.test(event.type)) {
                    this._startOpening(nested);
                }
                this.activeMenu = item.parent();

                this._trigger("focus", event, { item: item });
            },

            _scrollIntoView: function _scrollIntoView(item) {
                var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
                if (this._hasScroll()) {
                    borderTop = parseFloat($.css(this.activeMenu[0], "borderTopWidth")) || 0;
                    paddingTop = parseFloat($.css(this.activeMenu[0], "paddingTop")) || 0;
                    offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
                    scroll = this.activeMenu.scrollTop();
                    elementHeight = this.activeMenu.height();
                    itemHeight = item.outerHeight();

                    if (offset < 0) {
                        this.activeMenu.scrollTop(scroll + offset);
                    } else if (offset + itemHeight > elementHeight) {
                        this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);
                    }
                }
            },

            blur: function blur(event, fromFocus) {
                if (!fromFocus) {
                    clearTimeout(this.timer);
                }

                if (!this.active) {
                    return;
                }

                this.active.removeClass("ui-state-focus");
                this.active = null;

                this._trigger("blur", event, { item: this.active });
            },

            _startOpening: function _startOpening(submenu) {
                clearTimeout(this.timer);

                // Don't open if already open fixes a Firefox bug that caused a .5 pixel
                // shift in the submenu position when mousing over the carat icon
                if (submenu.attr("aria-hidden") !== "true") {
                    return;
                }

                this.timer = this._delay(function () {
                    this._close();
                    this._open(submenu);
                }, this.delay);
            },

            _open: function _open(submenu) {
                var position = $.extend({
                    of: this.active
                }, this.options.position);

                clearTimeout(this.timer);
                this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden", "true");

                submenu.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(position);
            },

            collapseAll: function collapseAll(event, all) {
                clearTimeout(this.timer);
                this.timer = this._delay(function () {
                    // If we were passed an event, look for the submenu that contains the event
                    var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(".ui-menu"));

                    // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
                    if (!currentMenu.length) {
                        currentMenu = this.element;
                    }

                    this._close(currentMenu);

                    this.blur(event);
                    this.activeMenu = currentMenu;
                }, this.delay);
            },

            // With no arguments, closes the currently active menu - if nothing is active
            // it closes all menus.  If passed an argument, it will search for menus BELOW
            _close: function _close(startMenu) {
                if (!startMenu) {
                    startMenu = this.active ? this.active.parent() : this.element;
                }

                startMenu.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false").end().find(".ui-state-active").not(".ui-state-focus").removeClass("ui-state-active");
            },

            _closeOnDocumentClick: function _closeOnDocumentClick(event) {
                return !$(event.target).closest(".ui-menu").length;
            },

            _isDivider: function _isDivider(item) {

                // Match hyphen, em dash, en dash
                return !/[^\-\u2014\u2013\s]/.test(item.text());
            },

            collapse: function collapse(event) {
                var newItem = this.active && this.active.parent().closest(".ui-menu-item", this.element);
                if (newItem && newItem.length) {
                    this._close();
                    this.focus(event, newItem);
                }
            },

            expand: function expand(event) {
                var newItem = this.active && this.active.children(".ui-menu ").find(this.options.items).first();

                if (newItem && newItem.length) {
                    this._open(newItem.parent());

                    // Delay so Firefox will not hide activedescendant change in expanding submenu from AT
                    this._delay(function () {
                        this.focus(event, newItem);
                    });
                }
            },

            next: function next(event) {
                this._move("next", "first", event);
            },

            previous: function previous(event) {
                this._move("prev", "last", event);
            },

            isFirstItem: function isFirstItem() {
                return this.active && !this.active.prevAll(".ui-menu-item").length;
            },

            isLastItem: function isLastItem() {
                return this.active && !this.active.nextAll(".ui-menu-item").length;
            },

            _move: function _move(direction, filter, event) {
                var next;
                if (this.active) {
                    if (direction === "first" || direction === "last") {
                        next = this.active[direction === "first" ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1);
                    } else {
                        next = this.active[direction + "All"](".ui-menu-item").eq(0);
                    }
                }
                if (!next || !next.length || !this.active) {
                    next = this.activeMenu.find(this.options.items)[filter]();
                }

                this.focus(event, next);
            },

            nextPage: function nextPage(event) {
                var item, base, height;

                if (!this.active) {
                    this.next(event);
                    return;
                }
                if (this.isLastItem()) {
                    return;
                }
                if (this._hasScroll()) {
                    base = this.active.offset().top;
                    height = this.element.height();
                    this.active.nextAll(".ui-menu-item").each(function () {
                        item = $(this);
                        return item.offset().top - base - height < 0;
                    });

                    this.focus(event, item);
                } else {
                    this.focus(event, this.activeMenu.find(this.options.items)[!this.active ? "first" : "last"]());
                }
            },

            previousPage: function previousPage(event) {
                var item, base, height;
                if (!this.active) {
                    this.next(event);
                    return;
                }
                if (this.isFirstItem()) {
                    return;
                }
                if (this._hasScroll()) {
                    base = this.active.offset().top;
                    height = this.element.height();
                    this.active.prevAll(".ui-menu-item").each(function () {
                        item = $(this);
                        return item.offset().top - base + height > 0;
                    });

                    this.focus(event, item);
                } else {
                    this.focus(event, this.activeMenu.find(this.options.items).first());
                }
            },

            _hasScroll: function _hasScroll() {
                return this.element.outerHeight() < this.element.prop("scrollHeight");
            },

            select: function select(event) {
                // TODO: It should never be possible to not have an active item at this
                // point, but the tests don't trigger mouseenter before click.
                this.active = this.active || $(event.target).closest(".ui-menu-item");
                var ui = { item: this.active };
                if (!this.active.has(".ui-menu").length) {
                    this.collapseAll(event, true);
                }
                this._trigger("select", event, ui);
            },

            _filterMenuItems: function _filterMenuItems(character) {
                var escapedCharacter = character.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"),
                    regex = new RegExp("^" + escapedCharacter, "i");

                return this.activeMenu.find(this.options.items)

                // Only match on items, not dividers or other content (#10571)
                .filter(".ui-menu-item").filter(function () {
                    return regex.test($.trim($(this).text()));
                });
            }
        });

        /*!
         * jQuery UI Autocomplete 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/autocomplete/
         */

        $.widget("ui.autocomplete", {
            version: "1.11.4",
            defaultElement: "<input>",
            options: {
                appendTo: null,
                autoFocus: false,
                delay: 300,
                minLength: 1,
                position: {
                    my: "left top",
                    at: "left bottom",
                    collision: "none"
                },
                source: null,

                // callbacks
                change: null,
                close: null,
                focus: null,
                open: null,
                response: null,
                search: null,
                select: null
            },

            requestIndex: 0,
            pending: 0,

            _create: function _create() {
                // Some browsers only repeat keydown events, not keypress events,
                // so we use the suppressKeyPress flag to determine if we've already
                // handled the keydown event. #7269
                // Unfortunately the code for & in keypress is the same as the up arrow,
                // so we use the suppressKeyPressRepeat flag to avoid handling keypress
                // events when we know the keydown event was used to modify the
                // search term. #7799
                var suppressKeyPress,
                    suppressKeyPressRepeat,
                    suppressInput,
                    nodeName = this.element[0].nodeName.toLowerCase(),
                    isTextarea = nodeName === "textarea",
                    isInput = nodeName === "input";

                this.isMultiLine =
                // Textareas are always multi-line
                isTextarea ? true :
                // Inputs are always single-line, even if inside a contentEditable element
                // IE also treats inputs as contentEditable
                isInput ? false :
                // All other element types are determined by whether or not they're contentEditable
                this.element.prop("isContentEditable");

                this.valueMethod = this.element[isTextarea || isInput ? "val" : "text"];
                this.isNewMenu = true;

                this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off");

                this._on(this.element, {
                    keydown: function keydown(event) {
                        if (this.element.prop("readOnly")) {
                            suppressKeyPress = true;
                            suppressInput = true;
                            suppressKeyPressRepeat = true;
                            return;
                        }

                        suppressKeyPress = false;
                        suppressInput = false;
                        suppressKeyPressRepeat = false;
                        var keyCode = $.ui.keyCode;
                        switch (event.keyCode) {
                            case keyCode.PAGE_UP:
                                suppressKeyPress = true;
                                this._move("previousPage", event);
                                break;
                            case keyCode.PAGE_DOWN:
                                suppressKeyPress = true;
                                this._move("nextPage", event);
                                break;
                            case keyCode.UP:
                                suppressKeyPress = true;
                                this._keyEvent("previous", event);
                                break;
                            case keyCode.DOWN:
                                suppressKeyPress = true;
                                this._keyEvent("next", event);
                                break;
                            case keyCode.ENTER:
                                // when menu is open and has focus
                                if (this.menu.active) {
                                    // #6055 - Opera still allows the keypress to occur
                                    // which causes forms to submit
                                    suppressKeyPress = true;
                                    event.preventDefault();
                                    this.menu.select(event);
                                }
                                break;
                            case keyCode.TAB:
                                if (this.menu.active) {
                                    this.menu.select(event);
                                }
                                break;
                            case keyCode.ESCAPE:
                                if (this.menu.element.is(":visible")) {
                                    if (!this.isMultiLine) {
                                        this._value(this.term);
                                    }
                                    this.close(event);
                                    // Different browsers have different default behavior for escape
                                    // Single press can mean undo or clear
                                    // Double press in IE means clear the whole form
                                    event.preventDefault();
                                }
                                break;
                            default:
                                suppressKeyPressRepeat = true;
                                // search timeout should be triggered before the input value is changed
                                this._searchTimeout(event);
                                break;
                        }
                    },
                    keypress: function keypress(event) {
                        if (suppressKeyPress) {
                            suppressKeyPress = false;
                            if (!this.isMultiLine || this.menu.element.is(":visible")) {
                                event.preventDefault();
                            }
                            return;
                        }
                        if (suppressKeyPressRepeat) {
                            return;
                        }

                        // replicate some key handlers to allow them to repeat in Firefox and Opera
                        var keyCode = $.ui.keyCode;
                        switch (event.keyCode) {
                            case keyCode.PAGE_UP:
                                this._move("previousPage", event);
                                break;
                            case keyCode.PAGE_DOWN:
                                this._move("nextPage", event);
                                break;
                            case keyCode.UP:
                                this._keyEvent("previous", event);
                                break;
                            case keyCode.DOWN:
                                this._keyEvent("next", event);
                                break;
                        }
                    },
                    input: function input(event) {
                        if (suppressInput) {
                            suppressInput = false;
                            event.preventDefault();
                            return;
                        }
                        this._searchTimeout(event);
                    },
                    focus: function focus() {
                        this.selectedItem = null;
                        this.previous = this._value();
                    },
                    blur: function blur(event) {
                        if (this.cancelBlur) {
                            delete this.cancelBlur;
                            return;
                        }

                        clearTimeout(this.searching);
                        this.close(event);
                        this._change(event);
                    }
                });

                this._initSource();
                this.menu = $("<ul>").addClass("ui-autocomplete ui-front").appendTo(this._appendTo()).menu({
                    // disable ARIA support, the live region takes care of that
                    role: null
                }).hide().menu("instance");

                this._on(this.menu.element, {
                    mousedown: function mousedown(event) {
                        // prevent moving focus out of the text field
                        event.preventDefault();

                        // IE doesn't prevent moving focus even with event.preventDefault()
                        // so we set a flag to know when we should ignore the blur event
                        this.cancelBlur = true;
                        this._delay(function () {
                            delete this.cancelBlur;
                        });

                        // clicking on the scrollbar causes focus to shift to the body
                        // but we can't detect a mouseup or a click immediately afterward
                        // so we have to track the next mousedown and close the menu if
                        // the user clicks somewhere outside of the autocomplete
                        var menuElement = this.menu.element[0];
                        if (!$(event.target).closest(".ui-menu-item").length) {
                            this._delay(function () {
                                var that = this;
                                this.document.one("mousedown", function (event) {
                                    if (event.target !== that.element[0] && event.target !== menuElement && !$.contains(menuElement, event.target)) {
                                        that.close();
                                    }
                                });
                            });
                        }
                    },
                    menufocus: function menufocus(event, ui) {
                        var label, item;
                        // support: Firefox
                        // Prevent accidental activation of menu items in Firefox (#7024 #9118)
                        if (this.isNewMenu) {
                            this.isNewMenu = false;
                            if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {
                                this.menu.blur();

                                this.document.one("mousemove", function () {
                                    $(event.target).trigger(event.originalEvent);
                                });

                                return;
                            }
                        }

                        item = ui.item.data("ui-autocomplete-item");
                        if (false !== this._trigger("focus", event, { item: item })) {
                            // use value to match what will end up in the input, if it was a key event
                            if (event.originalEvent && /^key/.test(event.originalEvent.type)) {
                                this._value(item.value);
                            }
                        }

                        // Announce the value in the liveRegion
                        label = ui.item.attr("aria-label") || item.value;
                        if (label && $.trim(label).length) {
                            this.liveRegion.children().hide();
                            $("<div>").text(label).appendTo(this.liveRegion);
                        }
                    },
                    menuselect: function menuselect(event, ui) {
                        var item = ui.item.data("ui-autocomplete-item"),
                            previous = this.previous;

                        // only trigger when focus was lost (click on menu)
                        if (this.element[0] !== this.document[0].activeElement) {
                            this.element.focus();
                            this.previous = previous;
                            // #6109 - IE triggers two focus events and the second
                            // is asynchronous, so we need to reset the previous
                            // term synchronously and asynchronously :-(
                            this._delay(function () {
                                this.previous = previous;
                                this.selectedItem = item;
                            });
                        }

                        if (false !== this._trigger("select", event, { item: item })) {
                            this._value(item.value);
                        }
                        // reset the term after the select event
                        // this allows custom select handling to work properly
                        this.term = this._value();

                        this.close(event);
                        this.selectedItem = item;
                    }
                });

                this.liveRegion = $("<span>", {
                    role: "status",
                    "aria-live": "assertive",
                    "aria-relevant": "additions"
                }).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body);

                // turning off autocomplete prevents the browser from remembering the
                // value when navigating through history, so we re-enable autocomplete
                // if the page is unloaded before the widget is destroyed. #7790
                this._on(this.window, {
                    beforeunload: function beforeunload() {
                        this.element.removeAttr("autocomplete");
                    }
                });
            },

            _destroy: function _destroy() {
                clearTimeout(this.searching);
                this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete");
                this.menu.element.remove();
                this.liveRegion.remove();
            },

            _setOption: function _setOption(key, value) {
                this._super(key, value);
                if (key === "source") {
                    this._initSource();
                }
                if (key === "appendTo") {
                    this.menu.element.appendTo(this._appendTo());
                }
                if (key === "disabled" && value && this.xhr) {
                    this.xhr.abort();
                }
            },

            _appendTo: function _appendTo() {
                var element = this.options.appendTo;

                if (element) {
                    element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);
                }

                if (!element || !element[0]) {
                    element = this.element.closest(".ui-front");
                }

                if (!element.length) {
                    element = this.document[0].body;
                }

                return element;
            },

            _initSource: function _initSource() {
                var array,
                    url,
                    that = this;
                if ($.isArray(this.options.source)) {
                    array = this.options.source;
                    this.source = function (request, response) {
                        response($.ui.autocomplete.filter(array, request.term));
                    };
                } else if (typeof this.options.source === "string") {
                    url = this.options.source;
                    this.source = function (request, response) {
                        if (that.xhr) {
                            that.xhr.abort();
                        }
                        that.xhr = $.ajax({
                            url: url,
                            data: request,
                            dataType: "json",
                            success: function success(data) {
                                response(data);
                            },
                            error: function error() {
                                response([]);
                            }
                        });
                    };
                } else {
                    this.source = this.options.source;
                }
            },

            _searchTimeout: function _searchTimeout(event) {
                clearTimeout(this.searching);
                this.searching = this._delay(function () {

                    // Search if the value has changed, or if the user retypes the same value (see #7434)
                    var equalValues = this.term === this._value(),
                        menuVisible = this.menu.element.is(":visible"),
                        modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

                    if (!equalValues || equalValues && !menuVisible && !modifierKey) {
                        this.selectedItem = null;
                        this.search(null, event);
                    }
                }, this.options.delay);
            },

            search: function search(value, event) {
                value = value != null ? value : this._value();

                // always save the actual value, not the one passed as an argument
                this.term = this._value();

                if (value.length < this.options.minLength) {
                    return this.close(event);
                }

                if (this._trigger("search", event) === false) {
                    return;
                }

                return this._search(value);
            },

            _search: function _search(value) {
                this.pending++;
                this.element.addClass("ui-autocomplete-loading");
                this.cancelSearch = false;

                this.source({ term: value }, this._response());
            },

            _response: function _response() {
                var index = ++this.requestIndex;

                return $.proxy(function (content) {
                    if (index === this.requestIndex) {
                        this.__response(content);
                    }

                    this.pending--;
                    if (!this.pending) {
                        this.element.removeClass("ui-autocomplete-loading");
                    }
                }, this);
            },

            __response: function __response(content) {
                if (content) {
                    content = this._normalize(content);
                }
                this._trigger("response", null, { content: content });
                if (!this.options.disabled && content && content.length && !this.cancelSearch) {
                    this._suggest(content);
                    this._trigger("open");
                } else {
                    // use ._close() instead of .close() so we don't cancel future searches
                    this._close();
                }
            },

            close: function close(event) {
                this.cancelSearch = true;
                this._close(event);
            },

            _close: function _close(event) {
                if (this.menu.element.is(":visible")) {
                    this.menu.element.hide();
                    this.menu.blur();
                    this.isNewMenu = true;
                    this._trigger("close", event);
                }
            },

            _change: function _change(event) {
                if (this.previous !== this._value()) {
                    this._trigger("change", event, { item: this.selectedItem });
                }
            },

            _normalize: function _normalize(items) {
                // assume all items have the right format when the first item is complete
                if (items.length && items[0].label && items[0].value) {
                    return items;
                }
                return $.map(items, function (item) {
                    if (typeof item === "string") {
                        return {
                            label: item,
                            value: item
                        };
                    }
                    return $.extend({}, item, {
                        label: item.label || item.value,
                        value: item.value || item.label
                    });
                });
            },

            _suggest: function _suggest(items) {
                var ul = this.menu.element.empty();
                this._renderMenu(ul, items);
                this.isNewMenu = true;
                this.menu.refresh();

                // size and position menu
                ul.show();
                this._resizeMenu();
                ul.position($.extend({
                    of: this.element
                }, this.options.position));

                if (this.options.autoFocus) {
                    this.menu.next();
                }
            },

            _resizeMenu: function _resizeMenu() {
                var ul = this.menu.element;
                ul.outerWidth(Math.max(
                // Firefox wraps long text (possibly a rounding bug)
                // so we add 1px to avoid the wrapping (#7513)
                ul.width("").outerWidth() + 1, this.element.outerWidth()));
            },

            _renderMenu: function _renderMenu(ul, items) {
                var that = this;
                $.each(items, function (index, item) {
                    that._renderItemData(ul, item);
                });
            },

            _renderItemData: function _renderItemData(ul, item) {
                return this._renderItem(ul, item).data("ui-autocomplete-item", item);
            },

            _renderItem: function _renderItem(ul, item) {
                return $("<li>").text(item.label).appendTo(ul);
            },

            _move: function _move(direction, event) {
                if (!this.menu.element.is(":visible")) {
                    this.search(null, event);
                    return;
                }
                if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {

                    if (!this.isMultiLine) {
                        this._value(this.term);
                    }

                    this.menu.blur();
                    return;
                }
                this.menu[direction](event);
            },

            widget: function widget() {
                return this.menu.element;
            },

            _value: function _value() {
                return this.valueMethod.apply(this.element, arguments);
            },

            _keyEvent: function _keyEvent(keyEvent, event) {
                if (!this.isMultiLine || this.menu.element.is(":visible")) {
                    this._move(keyEvent, event);

                    // prevents moving cursor to beginning/end of the text field in some browsers
                    event.preventDefault();
                }
            }
        });

        $.extend($.ui.autocomplete, {
            escapeRegex: function escapeRegex(value) {
                return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
            },
            filter: function filter(array, term) {
                var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");
                return $.grep(array, function (value) {
                    return matcher.test(value.label || value.value || value);
                });
            }
        });

        // live region extension, adding a `messages` option
        // NOTE: This is an experimental API. We are still investigating
        // a full solution for string manipulation and internationalization.
        $.widget("ui.autocomplete", $.ui.autocomplete, {
            options: {
                messages: {
                    noResults: "No search results.",
                    results: function results(amount) {
                        return amount + (amount > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate.";
                    }
                }
            },

            __response: function __response(content) {
                var message;
                this._superApply(arguments);
                if (this.options.disabled || this.cancelSearch) {
                    return;
                }
                if (content && content.length) {
                    message = this.options.messages.results(content.length);
                } else {
                    message = this.options.messages.noResults;
                }
                this.liveRegion.children().hide();
                $("<div>").text(message).appendTo(this.liveRegion);
            }
        });

        var autocomplete = $.ui.autocomplete;

        /*!
         * jQuery UI Button 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/button/
         */

        var lastActive,
            baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",
            typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
            formResetHandler = function formResetHandler() {
            var form = $(this);
            setTimeout(function () {
                form.find(":ui-button").button("refresh");
            }, 1);
        },
            radioGroup = function radioGroup(radio) {
            var name = radio.name,
                form = radio.form,
                radios = $([]);
            if (name) {
                name = name.replace(/'/g, "\\'");
                if (form) {
                    radios = $(form).find("[name='" + name + "'][type=radio]");
                } else {
                    radios = $("[name='" + name + "'][type=radio]", radio.ownerDocument).filter(function () {
                        return !this.form;
                    });
                }
            }
            return radios;
        };

        $.widget("ui.button", {
            version: "1.11.4",
            defaultElement: "<button>",
            options: {
                disabled: null,
                text: true,
                label: null,
                icons: {
                    primary: null,
                    secondary: null
                }
            },
            _create: function _create() {
                this.element.closest("form").unbind("reset" + this.eventNamespace).bind("reset" + this.eventNamespace, formResetHandler);

                if (typeof this.options.disabled !== "boolean") {
                    this.options.disabled = !!this.element.prop("disabled");
                } else {
                    this.element.prop("disabled", this.options.disabled);
                }

                this._determineButtonType();
                this.hasTitle = !!this.buttonElement.attr("title");

                var that = this,
                    options = this.options,
                    toggleButton = this.type === "checkbox" || this.type === "radio",
                    activeClass = !toggleButton ? "ui-state-active" : "";

                if (options.label === null) {
                    options.label = this.type === "input" ? this.buttonElement.val() : this.buttonElement.html();
                }

                this._hoverable(this.buttonElement);

                this.buttonElement.addClass(baseClasses).attr("role", "button").bind("mouseenter" + this.eventNamespace, function () {
                    if (options.disabled) {
                        return;
                    }
                    if (this === lastActive) {
                        $(this).addClass("ui-state-active");
                    }
                }).bind("mouseleave" + this.eventNamespace, function () {
                    if (options.disabled) {
                        return;
                    }
                    $(this).removeClass(activeClass);
                }).bind("click" + this.eventNamespace, function (event) {
                    if (options.disabled) {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                    }
                });

                // Can't use _focusable() because the element that receives focus
                // and the element that gets the ui-state-focus class are different
                this._on({
                    focus: function focus() {
                        this.buttonElement.addClass("ui-state-focus");
                    },
                    blur: function blur() {
                        this.buttonElement.removeClass("ui-state-focus");
                    }
                });

                if (toggleButton) {
                    this.element.bind("change" + this.eventNamespace, function () {
                        that.refresh();
                    });
                }

                if (this.type === "checkbox") {
                    this.buttonElement.bind("click" + this.eventNamespace, function () {
                        if (options.disabled) {
                            return false;
                        }
                    });
                } else if (this.type === "radio") {
                    this.buttonElement.bind("click" + this.eventNamespace, function () {
                        if (options.disabled) {
                            return false;
                        }
                        $(this).addClass("ui-state-active");
                        that.buttonElement.attr("aria-pressed", "true");

                        var radio = that.element[0];
                        radioGroup(radio).not(radio).map(function () {
                            return $(this).button("widget")[0];
                        }).removeClass("ui-state-active").attr("aria-pressed", "false");
                    });
                } else {
                    this.buttonElement.bind("mousedown" + this.eventNamespace, function () {
                        if (options.disabled) {
                            return false;
                        }
                        $(this).addClass("ui-state-active");
                        lastActive = this;
                        that.document.one("mouseup", function () {
                            lastActive = null;
                        });
                    }).bind("mouseup" + this.eventNamespace, function () {
                        if (options.disabled) {
                            return false;
                        }
                        $(this).removeClass("ui-state-active");
                    }).bind("keydown" + this.eventNamespace, function (event) {
                        if (options.disabled) {
                            return false;
                        }
                        if (event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) {
                            $(this).addClass("ui-state-active");
                        }
                    })
                    // see #8559, we bind to blur here in case the button element loses
                    // focus between keydown and keyup, it would be left in an "active" state
                    .bind("keyup" + this.eventNamespace + " blur" + this.eventNamespace, function () {
                        $(this).removeClass("ui-state-active");
                    });

                    if (this.buttonElement.is("a")) {
                        this.buttonElement.keyup(function (event) {
                            if (event.keyCode === $.ui.keyCode.SPACE) {
                                // TODO pass through original event correctly (just as 2nd argument doesn't work)
                                $(this).click();
                            }
                        });
                    }
                }

                this._setOption("disabled", options.disabled);
                this._resetButton();
            },

            _determineButtonType: function _determineButtonType() {
                var ancestor, labelSelector, checked;

                if (this.element.is("[type=checkbox]")) {
                    this.type = "checkbox";
                } else if (this.element.is("[type=radio]")) {
                    this.type = "radio";
                } else if (this.element.is("input")) {
                    this.type = "input";
                } else {
                    this.type = "button";
                }

                if (this.type === "checkbox" || this.type === "radio") {
                    // we don't search against the document in case the element
                    // is disconnected from the DOM
                    ancestor = this.element.parents().last();
                    labelSelector = "label[for='" + this.element.attr("id") + "']";
                    this.buttonElement = ancestor.find(labelSelector);
                    if (!this.buttonElement.length) {
                        ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
                        this.buttonElement = ancestor.filter(labelSelector);
                        if (!this.buttonElement.length) {
                            this.buttonElement = ancestor.find(labelSelector);
                        }
                    }
                    this.element.addClass("ui-helper-hidden-accessible");

                    checked = this.element.is(":checked");
                    if (checked) {
                        this.buttonElement.addClass("ui-state-active");
                    }
                    this.buttonElement.prop("aria-pressed", checked);
                } else {
                    this.buttonElement = this.element;
                }
            },

            widget: function widget() {
                return this.buttonElement;
            },

            _destroy: function _destroy() {
                this.element.removeClass("ui-helper-hidden-accessible");
                this.buttonElement.removeClass(baseClasses + " ui-state-active " + typeClasses).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());

                if (!this.hasTitle) {
                    this.buttonElement.removeAttr("title");
                }
            },

            _setOption: function _setOption(key, value) {
                this._super(key, value);
                if (key === "disabled") {
                    this.widget().toggleClass("ui-state-disabled", !!value);
                    this.element.prop("disabled", !!value);
                    if (value) {
                        if (this.type === "checkbox" || this.type === "radio") {
                            this.buttonElement.removeClass("ui-state-focus");
                        } else {
                            this.buttonElement.removeClass("ui-state-focus ui-state-active");
                        }
                    }
                    return;
                }
                this._resetButton();
            },

            refresh: function refresh() {
                //See #8237 & #8828
                var isDisabled = this.element.is("input, button") ? this.element.is(":disabled") : this.element.hasClass("ui-button-disabled");

                if (isDisabled !== this.options.disabled) {
                    this._setOption("disabled", isDisabled);
                }
                if (this.type === "radio") {
                    radioGroup(this.element[0]).each(function () {
                        if ($(this).is(":checked")) {
                            $(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true");
                        } else {
                            $(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false");
                        }
                    });
                } else if (this.type === "checkbox") {
                    if (this.element.is(":checked")) {
                        this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true");
                    } else {
                        this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false");
                    }
                }
            },

            _resetButton: function _resetButton() {
                if (this.type === "input") {
                    if (this.options.label) {
                        this.element.val(this.options.label);
                    }
                    return;
                }
                var buttonElement = this.buttonElement.removeClass(typeClasses),
                    buttonText = $("<span></span>", this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(buttonElement.empty()).text(),
                    icons = this.options.icons,
                    multipleIcons = icons.primary && icons.secondary,
                    buttonClasses = [];

                if (icons.primary || icons.secondary) {
                    if (this.options.text) {
                        buttonClasses.push("ui-button-text-icon" + (multipleIcons ? "s" : icons.primary ? "-primary" : "-secondary"));
                    }

                    if (icons.primary) {
                        buttonElement.prepend("<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>");
                    }

                    if (icons.secondary) {
                        buttonElement.append("<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>");
                    }

                    if (!this.options.text) {
                        buttonClasses.push(multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only");

                        if (!this.hasTitle) {
                            buttonElement.attr("title", $.trim(buttonText));
                        }
                    }
                } else {
                    buttonClasses.push("ui-button-text-only");
                }
                buttonElement.addClass(buttonClasses.join(" "));
            }
        });

        $.widget("ui.buttonset", {
            version: "1.11.4",
            options: {
                items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
            },

            _create: function _create() {
                this.element.addClass("ui-buttonset");
            },

            _init: function _init() {
                this.refresh();
            },

            _setOption: function _setOption(key, value) {
                if (key === "disabled") {
                    this.buttons.button("option", key, value);
                }

                this._super(key, value);
            },

            refresh: function refresh() {
                var rtl = this.element.css("direction") === "rtl",
                    allButtons = this.element.find(this.options.items),
                    existingButtons = allButtons.filter(":ui-button");

                // Initialize new buttons
                allButtons.not(":ui-button").button();

                // Refresh existing buttons
                existingButtons.button("refresh");

                this.buttons = allButtons.map(function () {
                    return $(this).button("widget")[0];
                }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(rtl ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(rtl ? "ui-corner-left" : "ui-corner-right").end().end();
            },

            _destroy: function _destroy() {
                this.element.removeClass("ui-buttonset");
                this.buttons.map(function () {
                    return $(this).button("widget")[0];
                }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
            }
        });

        var button = $.ui.button;

        /*!
         * jQuery UI Datepicker 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/datepicker/
         */

        $.extend($.ui, { datepicker: { version: "1.11.4" } });

        var datepicker_instActive;

        function datepicker_getZindex(elem) {
            var position, value;
            while (elem.length && elem[0] !== document) {
                // Ignore z-index if position is set to a value where z-index is ignored by the browser
                // This makes behavior of this function consistent across browsers
                // WebKit always returns auto if the element is positioned
                position = elem.css("position");
                if (position === "absolute" || position === "relative" || position === "fixed") {
                    // IE returns 0 when zIndex is not specified
                    // other browsers return a string
                    // we ignore the case of nested elements with an explicit value of 0
                    // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
                    value = parseInt(elem.css("zIndex"), 10);
                    if (!isNaN(value) && value !== 0) {
                        return value;
                    }
                }
                elem = elem.parent();
            }

            return 0;
        }
        /* Date picker manager.
           Use the singleton instance of this class, $.datepicker, to interact with the date picker.
           Settings for (groups of) date pickers are maintained in an instance object,
           allowing multiple different settings on the same page. */

        function Datepicker() {
            this._curInst = null; // The current instance in use
            this._keyEvent = false; // If the last event was a key event
            this._disabledInputs = []; // List of date picker inputs that have been disabled
            this._datepickerShowing = false; // True if the popup picker is showing , false if not
            this._inDialog = false; // True if showing within a "dialog", false if not
            this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
            this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
            this._appendClass = "ui-datepicker-append"; // The name of the append marker class
            this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
            this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
            this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
            this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
            this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
            this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
            this.regional = []; // Available regional settings, indexed by language code
            this.regional[""] = { // Default regional settings
                closeText: "Done", // Display text for close link
                prevText: "Prev", // Display text for previous month link
                nextText: "Next", // Display text for next month link
                currentText: "Today", // Display text for current month link
                monthNames: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"], // Names of months for drop-down and formatting
                monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
                dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
                dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
                dayNamesMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"], // Column headings for days starting at Sunday
                weekHeader: "Wk", // Column header for week of the year
                dateFormat: "dd-mm-yy", // See format options on parseDate
                firstDay: 1, // The first day of the week, Sun = 0, Mon = 1, ...
                isRTL: false, // True if right-to-left language, false if left-to-right
                showMonthAfterYear: false, // True if the year select precedes month, false for month then year
                yearSuffix: "" // Additional text to append to the year in the month headers
            };
            this._defaults = { // Global defaults for all the date picker instances
                showOn: "focus", // "focus" for popup on focus,
                // "button" for trigger button, or "both" for either
                showAnim: "fadeIn", // Name of jQuery animation for popup
                showOptions: {}, // Options for enhanced animations
                defaultDate: null, // Used when field is blank: actual date,
                // +/-number for offset from today, null for today
                appendText: "", // Display text following the input box, e.g. showing the format
                buttonText: "...", // Text for trigger button
                buttonImage: "", // URL for trigger button image
                buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
                hideIfNoPrevNext: false, // True to hide next/previous month links
                // if not applicable, false to just disable them
                navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
                gotoCurrent: false, // True if today link goes back to current selection instead
                changeMonth: false, // True if month can be selected directly, false if only prev/next
                changeYear: false, // True if year can be selected directly, false if only prev/next
                yearRange: "c-10:c+10", // Range of years to display in drop-down,
                // either relative to today's year (-nn:+nn), relative to currently displayed year
                // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
                showOtherMonths: false, // True to show dates in other months, false to leave blank
                selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
                showWeek: false, // True to show week of the year, false to not show it
                calculateWeek: this.iso8601Week, // How to calculate the week of the year,
                // takes a Date and returns the number of the week for it
                shortYearCutoff: "+10", // Short year values < this are in the current century,
                // > this are in the previous century,
                // string value starting with "+" for current year + value
                minDate: null, // The earliest selectable date, or null for no limit
                maxDate: null, // The latest selectable date, or null for no limit
                duration: "fast", // Duration of display/closure
                beforeShowDay: null, // Function that takes a date and returns an array with
                // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
                // [2] = cell title (optional), e.g. $.datepicker.noWeekends
                beforeShow: null, // Function that takes an input field and
                // returns a set of custom settings for the date picker
                onSelect: null, // Define a callback function when a date is selected
                onChangeMonthYear: null, // Define a callback function when the month or year is changed
                onClose: null, // Define a callback function when the datepicker is closed
                numberOfMonths: 1, // Number of months to show at a time
                showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
                stepMonths: 1, // Number of months to step back/forward
                stepBigMonths: 12, // Number of months to step back/forward for the big links
                altField: "", // Selector for an alternate field to store selected dates into
                altFormat: "", // The date format to use for the alternate field
                constrainInput: true, // The input is constrained by the current date format
                showButtonPanel: false, // True to show button panel, false to not show it
                autoSize: false, // True to size the input for the date format, false to leave as is
                disabled: false // The initial disabled state
            };
            $.extend(this._defaults, this.regional[""]);
            this.regional.en = $.extend(true, {}, this.regional[""]);
            this.regional["en-US"] = $.extend(true, {}, this.regional.en);
            this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
        }

        $.extend(Datepicker.prototype, {
            /* Class name added to elements to indicate already configured with a date picker. */
            markerClassName: "hasDatepicker",

            //Keep track of the maximum number of rows displayed (see #7043)
            maxRows: 4,

            // TODO rename to "widget" when switching to widget factory
            _widgetDatepicker: function _widgetDatepicker() {
                return this.dpDiv;
            },

            /* Override the default settings for all instances of the date picker.
             * @param  settings  object - the new settings to use as defaults (anonymous object)
             * @return the manager object
             */
            setDefaults: function setDefaults(settings) {
                datepicker_extendRemove(this._defaults, settings || {});
                return this;
            },

            /* Attach the date picker to a jQuery selection.
             * @param  target	element - the target input field or division or span
             * @param  settings  object - the new settings to use for this date picker instance (anonymous)
             */
            _attachDatepicker: function _attachDatepicker(target, settings) {
                var nodeName, inline, inst;
                nodeName = target.nodeName.toLowerCase();
                inline = nodeName === "div" || nodeName === "span";
                if (!target.id) {
                    this.uuid += 1;
                    target.id = "dp" + this.uuid;
                }
                inst = this._newInst($(target), inline);
                inst.settings = $.extend({}, settings || {});
                if (nodeName === "input") {
                    this._connectDatepicker(target, inst);
                } else if (inline) {
                    this._inlineDatepicker(target, inst);
                }
            },

            /* Create a new instance object. */
            _newInst: function _newInst(target, inline) {
                var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
                return { id: id, input: target, // associated target
                    selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
                    drawMonth: 0, drawYear: 0, // month being drawn
                    inline: inline, // is datepicker inline or not
                    dpDiv: !inline ? this.dpDiv : // presentation div
                    datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) };
            },

            /* Attach the date picker to an input field. */
            _connectDatepicker: function _connectDatepicker(target, inst) {
                var input = $(target);
                inst.append = $([]);
                inst.trigger = $([]);
                if (input.hasClass(this.markerClassName)) {
                    return;
                }
                this._attachments(input, inst);
                input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp);
                this._autoSize(inst);
                $.data(target, "datepicker", inst);
                //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
                if (inst.settings.disabled) {
                    this._disableDatepicker(target);
                }
            },

            /* Make attachments based on settings. */
            _attachments: function _attachments(input, inst) {
                var showOn,
                    buttonText,
                    buttonImage,
                    appendText = this._get(inst, "appendText"),
                    isRTL = this._get(inst, "isRTL");

                if (inst.append) {
                    inst.append.remove();
                }
                if (appendText) {
                    inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
                    input[isRTL ? "before" : "after"](inst.append);
                }

                input.unbind("focus", this._showDatepicker);

                if (inst.trigger) {
                    inst.trigger.remove();
                }

                showOn = this._get(inst, "showOn");
                if (showOn === "focus" || showOn === "both") {
                    // pop-up date picker when in the marked field
                    input.focus(this._showDatepicker);
                }
                if (showOn === "button" || showOn === "both") {
                    // pop-up date picker when button clicked
                    buttonText = this._get(inst, "buttonText");
                    buttonImage = this._get(inst, "buttonImage");
                    inst.trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({ src: buttonImage, alt: buttonText, title: buttonText }) : $("<button type='button'></button>").addClass(this._triggerClass).html(!buttonImage ? buttonText : $("<img/>").attr({ src: buttonImage, alt: buttonText, title: buttonText })));
                    input[isRTL ? "before" : "after"](inst.trigger);
                    inst.trigger.click(function () {
                        if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
                            $.datepicker._hideDatepicker();
                        } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
                            $.datepicker._hideDatepicker();
                            $.datepicker._showDatepicker(input[0]);
                        } else {
                            $.datepicker._showDatepicker(input[0]);
                        }
                        return false;
                    });
                }
            },

            /* Apply the maximum length for the date format. */
            _autoSize: function _autoSize(inst) {
                if (this._get(inst, "autoSize") && !inst.inline) {
                    var findMax,
                        max,
                        maxI,
                        i,
                        date = new Date(2009, 12 - 1, 20),
                        // Ensure double digits
                    dateFormat = this._get(inst, "dateFormat");

                    if (dateFormat.match(/[DM]/)) {
                        findMax = function findMax(names) {
                            max = 0;
                            maxI = 0;
                            for (i = 0; i < names.length; i++) {
                                if (names[i].length > max) {
                                    max = names[i].length;
                                    maxI = i;
                                }
                            }
                            return maxI;
                        };
                        date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort")));
                        date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - date.getDay());
                    }
                    inst.input.attr("size", this._formatDate(inst, date).length);
                }
            },

            /* Attach an inline date picker to a div. */
            _inlineDatepicker: function _inlineDatepicker(target, inst) {
                var divSpan = $(target);
                if (divSpan.hasClass(this.markerClassName)) {
                    return;
                }
                divSpan.addClass(this.markerClassName).append(inst.dpDiv);
                $.data(target, "datepicker", inst);
                this._setDate(inst, this._getDefaultDate(inst), true);
                this._updateDatepicker(inst);
                this._updateAlternate(inst);
                //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
                if (inst.settings.disabled) {
                    this._disableDatepicker(target);
                }
                // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
                // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
                inst.dpDiv.css("display", "block");
            },

            /* Pop-up the date picker in a "dialog" box.
             * @param  input element - ignored
             * @param  date	string or Date - the initial date to display
             * @param  onSelect  function - the function to call when a date is selected
             * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
             * @param  pos int[2] - coordinates for the dialog's position within the screen or
             *					event - with x/y coordinates or
             *					leave empty for default (screen centre)
             * @return the manager object
             */
            _dialogDatepicker: function _dialogDatepicker(input, date, onSelect, settings, pos) {
                var id,
                    browserWidth,
                    browserHeight,
                    scrollX,
                    scrollY,
                    inst = this._dialogInst; // internal instance

                if (!inst) {
                    this.uuid += 1;
                    id = "dp" + this.uuid;
                    this._dialogInput = $("<input type='text' id='" + id + "' style='position: absolute; top: -100px; width: 0px;'/>");
                    this._dialogInput.keydown(this._doKeyDown);
                    $("body").append(this._dialogInput);
                    inst = this._dialogInst = this._newInst(this._dialogInput, false);
                    inst.settings = {};
                    $.data(this._dialogInput[0], "datepicker", inst);
                }
                datepicker_extendRemove(inst.settings, settings || {});
                date = date && date.constructor === Date ? this._formatDate(inst, date) : date;
                this._dialogInput.val(date);

                this._pos = pos ? pos.length ? pos : [pos.pageX, pos.pageY] : null;
                if (!this._pos) {
                    browserWidth = document.documentElement.clientWidth;
                    browserHeight = document.documentElement.clientHeight;
                    scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                    scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                    this._pos = // should use actual width/height below
                    [browserWidth / 2 - 100 + scrollX, browserHeight / 2 - 150 + scrollY];
                }

                // move input on screen for focus, but hidden behind dialog
                this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px");
                inst.settings.onSelect = onSelect;
                this._inDialog = true;
                this.dpDiv.addClass(this._dialogClass);
                this._showDatepicker(this._dialogInput[0]);
                if ($.blockUI) {
                    $.blockUI(this.dpDiv);
                }
                $.data(this._dialogInput[0], "datepicker", inst);
                return this;
            },

            /* Detach a datepicker from its control.
             * @param  target	element - the target input field or division or span
             */
            _destroyDatepicker: function _destroyDatepicker(target) {
                var nodeName,
                    $target = $(target),
                    inst = $.data(target, "datepicker");

                if (!$target.hasClass(this.markerClassName)) {
                    return;
                }

                nodeName = target.nodeName.toLowerCase();
                $.removeData(target, "datepicker");
                if (nodeName === "input") {
                    inst.append.remove();
                    inst.trigger.remove();
                    $target.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp);
                } else if (nodeName === "div" || nodeName === "span") {
                    $target.removeClass(this.markerClassName).empty();
                }

                if (datepicker_instActive === inst) {
                    datepicker_instActive = null;
                }
            },

            /* Enable the date picker to a jQuery selection.
             * @param  target	element - the target input field or division or span
             */
            _enableDatepicker: function _enableDatepicker(target) {
                var nodeName,
                    inline,
                    $target = $(target),
                    inst = $.data(target, "datepicker");

                if (!$target.hasClass(this.markerClassName)) {
                    return;
                }

                nodeName = target.nodeName.toLowerCase();
                if (nodeName === "input") {
                    target.disabled = false;
                    inst.trigger.filter("button").each(function () {
                        this.disabled = false;
                    }).end().filter("img").css({ opacity: "1.0", cursor: "" });
                } else if (nodeName === "div" || nodeName === "span") {
                    inline = $target.children("." + this._inlineClass);
                    inline.children().removeClass("ui-state-disabled");
                    inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", false);
                }
                this._disabledInputs = $.map(this._disabledInputs, function (value) {
                    return value === target ? null : value;
                }); // delete entry
            },

            /* Disable the date picker to a jQuery selection.
             * @param  target	element - the target input field or division or span
             */
            _disableDatepicker: function _disableDatepicker(target) {
                var nodeName,
                    inline,
                    $target = $(target),
                    inst = $.data(target, "datepicker");

                if (!$target.hasClass(this.markerClassName)) {
                    return;
                }

                nodeName = target.nodeName.toLowerCase();
                if (nodeName === "input") {
                    target.disabled = true;
                    inst.trigger.filter("button").each(function () {
                        this.disabled = true;
                    }).end().filter("img").css({ opacity: "0.5", cursor: "default" });
                } else if (nodeName === "div" || nodeName === "span") {
                    inline = $target.children("." + this._inlineClass);
                    inline.children().addClass("ui-state-disabled");
                    inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", true);
                }
                this._disabledInputs = $.map(this._disabledInputs, function (value) {
                    return value === target ? null : value;
                }); // delete entry
                this._disabledInputs[this._disabledInputs.length] = target;
            },

            /* Is the first field in a jQuery collection disabled as a datepicker?
             * @param  target	element - the target input field or division or span
             * @return boolean - true if disabled, false if enabled
             */
            _isDisabledDatepicker: function _isDisabledDatepicker(target) {
                if (!target) {
                    return false;
                }
                for (var i = 0; i < this._disabledInputs.length; i++) {
                    if (this._disabledInputs[i] === target) {
                        return true;
                    }
                }
                return false;
            },

            /* Retrieve the instance data for the target control.
             * @param  target  element - the target input field or division or span
             * @return  object - the associated instance data
             * @throws  error if a jQuery problem getting data
             */
            _getInst: function _getInst(target) {
                try {
                    return $.data(target, "datepicker");
                } catch (err) {
                    throw "Missing instance data for this datepicker";
                }
            },

            /* Update or retrieve the settings for a date picker attached to an input field or division.
             * @param  target  element - the target input field or division or span
             * @param  name	object - the new settings to update or
             *				string - the name of the setting to change or retrieve,
             *				when retrieving also "all" for all instance settings or
             *				"defaults" for all global defaults
             * @param  value   any - the new value for the setting
             *				(omit if above is an object or to retrieve a value)
             */
            _optionDatepicker: function _optionDatepicker(target, name, value) {
                var settings,
                    date,
                    minDate,
                    maxDate,
                    inst = this._getInst(target);

                if (arguments.length === 2 && typeof name === "string") {
                    return name === "defaults" ? $.extend({}, $.datepicker._defaults) : inst ? name === "all" ? $.extend({}, inst.settings) : this._get(inst, name) : null;
                }

                settings = name || {};
                if (typeof name === "string") {
                    settings = {};
                    settings[name] = value;
                }

                if (inst) {
                    if (this._curInst === inst) {
                        this._hideDatepicker();
                    }

                    date = this._getDateDatepicker(target, true);
                    minDate = this._getMinMaxDate(inst, "min");
                    maxDate = this._getMinMaxDate(inst, "max");
                    datepicker_extendRemove(inst.settings, settings);
                    // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
                    if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
                        inst.settings.minDate = this._formatDate(inst, minDate);
                    }
                    if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
                        inst.settings.maxDate = this._formatDate(inst, maxDate);
                    }
                    if ("disabled" in settings) {
                        if (settings.disabled) {
                            this._disableDatepicker(target);
                        } else {
                            this._enableDatepicker(target);
                        }
                    }
                    this._attachments($(target), inst);
                    this._autoSize(inst);
                    this._setDate(inst, date);
                    this._updateAlternate(inst);
                    this._updateDatepicker(inst);
                }
            },

            // change method deprecated
            _changeDatepicker: function _changeDatepicker(target, name, value) {
                this._optionDatepicker(target, name, value);
            },

            /* Redraw the date picker attached to an input field or division.
             * @param  target  element - the target input field or division or span
             */
            _refreshDatepicker: function _refreshDatepicker(target) {
                var inst = this._getInst(target);
                if (inst) {
                    this._updateDatepicker(inst);
                }
            },

            /* Set the dates for a jQuery selection.
             * @param  target element - the target input field or division or span
             * @param  date	Date - the new date
             */
            _setDateDatepicker: function _setDateDatepicker(target, date) {
                var inst = this._getInst(target);
                if (inst) {
                    this._setDate(inst, date);
                    this._updateDatepicker(inst);
                    this._updateAlternate(inst);
                }
            },

            /* Get the date(s) for the first entry in a jQuery selection.
             * @param  target element - the target input field or division or span
             * @param  noDefault boolean - true if no default date is to be used
             * @return Date - the current date
             */
            _getDateDatepicker: function _getDateDatepicker(target, noDefault) {
                var inst = this._getInst(target);
                if (inst && !inst.inline) {
                    this._setDateFromField(inst, noDefault);
                }
                return inst ? this._getDate(inst) : null;
            },

            /* Handle keystrokes. */
            _doKeyDown: function _doKeyDown(event) {
                var onSelect,
                    dateStr,
                    sel,
                    inst = $.datepicker._getInst(event.target),
                    handled = true,
                    isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

                inst._keyEvent = true;
                if ($.datepicker._datepickerShowing) {
                    switch (event.keyCode) {
                        case 9:
                            $.datepicker._hideDatepicker();
                            handled = false;
                            break; // hide on tab out
                        case 13:
                            sel = $("td." + $.datepicker._dayOverClass + ":not(." + $.datepicker._currentClass + ")", inst.dpDiv);
                            if (sel[0]) {
                                $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
                            }

                            onSelect = $.datepicker._get(inst, "onSelect");
                            if (onSelect) {
                                dateStr = $.datepicker._formatDate(inst);

                                // trigger custom callback
                                onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]);
                            } else {
                                $.datepicker._hideDatepicker();
                            }

                            return false; // don't submit the form
                        case 27:
                            $.datepicker._hideDatepicker();
                            break; // hide on escape
                        case 33:
                            $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
                            break; // previous month/year on page up/+ ctrl
                        case 34:
                            $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
                            break; // next month/year on page down/+ ctrl
                        case 35:
                            if (event.ctrlKey || event.metaKey) {
                                $.datepicker._clearDate(event.target);
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break; // clear on ctrl or command +end
                        case 36:
                            if (event.ctrlKey || event.metaKey) {
                                $.datepicker._gotoToday(event.target);
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break; // current on ctrl or command +home
                        case 37:
                            if (event.ctrlKey || event.metaKey) {
                                $.datepicker._adjustDate(event.target, isRTL ? +1 : -1, "D");
                            }
                            handled = event.ctrlKey || event.metaKey;
                            // -1 day on ctrl or command +left
                            if (event.originalEvent.altKey) {
                                $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
                            }
                            // next month/year on alt +left on Mac
                            break;
                        case 38:
                            if (event.ctrlKey || event.metaKey) {
                                $.datepicker._adjustDate(event.target, -7, "D");
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break; // -1 week on ctrl or command +up
                        case 39:
                            if (event.ctrlKey || event.metaKey) {
                                $.datepicker._adjustDate(event.target, isRTL ? -1 : +1, "D");
                            }
                            handled = event.ctrlKey || event.metaKey;
                            // +1 day on ctrl or command +right
                            if (event.originalEvent.altKey) {
                                $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
                            }
                            // next month/year on alt +right
                            break;
                        case 40:
                            if (event.ctrlKey || event.metaKey) {
                                $.datepicker._adjustDate(event.target, +7, "D");
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break; // +1 week on ctrl or command +down
                        default:
                            handled = false;
                    }
                } else if (event.keyCode === 36 && event.ctrlKey) {
                    // display the date picker on ctrl+home
                    $.datepicker._showDatepicker(this);
                } else {
                    handled = false;
                }

                if (handled) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            },

            /* Filter entered characters - based on date format. */
            _doKeyPress: function _doKeyPress(event) {
                var chars,
                    chr,
                    inst = $.datepicker._getInst(event.target);

                if ($.datepicker._get(inst, "constrainInput")) {
                    chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
                    chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
                    return event.ctrlKey || event.metaKey || chr < " " || !chars || chars.indexOf(chr) > -1;
                }
            },

            /* Synchronise manual entry and field/alternate field. */
            _doKeyUp: function _doKeyUp(event) {
                var date,
                    inst = $.datepicker._getInst(event.target);

                if (inst.input.val() !== inst.lastVal) {
                    try {
                        date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst));

                        if (date) {
                            // only if valid
                            $.datepicker._setDateFromField(inst);
                            $.datepicker._updateAlternate(inst);
                            $.datepicker._updateDatepicker(inst);
                        }
                    } catch (err) {}
                }
                return true;
            },

            /* Pop-up the date picker for a given input field.
             * If false returned from beforeShow event handler do not show.
             * @param  input  element - the input field attached to the date picker or
             *					event - if triggered by focus
             */
            _showDatepicker: function _showDatepicker(input) {
                input = input.target || input;
                if (input.nodeName.toLowerCase() !== "input") {
                    // find from button/image trigger
                    input = $("input", input.parentNode)[0];
                }

                if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) {
                    // already here
                    return;
                }

                var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;

                inst = $.datepicker._getInst(input);
                if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
                    $.datepicker._curInst.dpDiv.stop(true, true);
                    if (inst && $.datepicker._datepickerShowing) {
                        $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);
                    }
                }

                beforeShow = $.datepicker._get(inst, "beforeShow");
                beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
                if (beforeShowSettings === false) {
                    return;
                }
                datepicker_extendRemove(inst.settings, beforeShowSettings);

                inst.lastVal = null;
                $.datepicker._lastInput = input;
                $.datepicker._setDateFromField(inst);

                if ($.datepicker._inDialog) {
                    // hide cursor
                    input.value = "";
                }
                if (!$.datepicker._pos) {
                    // position below input
                    $.datepicker._pos = $.datepicker._findPos(input);
                    $.datepicker._pos[1] += input.offsetHeight; // add the height
                }

                isFixed = false;
                $(input).parents().each(function () {
                    isFixed |= $(this).css("position") === "fixed";
                    return !isFixed;
                });

                offset = { left: $.datepicker._pos[0], top: $.datepicker._pos[1] };
                $.datepicker._pos = null;
                //to avoid flashes on Firefox
                inst.dpDiv.empty();
                // determine sizing offscreen
                inst.dpDiv.css({ position: "absolute", display: "block", top: "-1000px" });
                $.datepicker._updateDatepicker(inst);
                // fix width for dynamic number of date pickers
                // and adjust position before showing
                offset = $.datepicker._checkOffset(inst, offset, isFixed);
                inst.dpDiv.css({ position: $.datepicker._inDialog && $.blockUI ? "static" : isFixed ? "fixed" : "absolute", display: "none",
                    left: offset.left + "px", top: offset.top + "px" });

                if (!inst.inline) {
                    showAnim = $.datepicker._get(inst, "showAnim");
                    duration = $.datepicker._get(inst, "duration");
                    inst.dpDiv.css("z-index", datepicker_getZindex($(input)) + 1);
                    $.datepicker._datepickerShowing = true;

                    if ($.effects && $.effects.effect[showAnim]) {
                        inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
                    } else {
                        inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
                    }

                    if ($.datepicker._shouldFocusInput(inst)) {
                        inst.input.focus();
                    }

                    $.datepicker._curInst = inst;
                }
            },

            /* Generate the date picker content. */
            _updateDatepicker: function _updateDatepicker(inst) {
                this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
                datepicker_instActive = inst; // for delegate hover events
                inst.dpDiv.empty().append(this._generateHTML(inst));
                this._attachHandlers(inst);

                var origyearshtml,
                    numMonths = this._getNumberOfMonths(inst),
                    cols = numMonths[1],
                    width = 17,
                    activeCell = inst.dpDiv.find("." + this._dayOverClass + " a");

                if (activeCell.length > 0) {
                    datepicker_handleMouseover.apply(activeCell.get(0));
                }

                inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
                if (cols > 1) {
                    inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", width * cols + "em");
                }
                inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") + "Class"]("ui-datepicker-multi");
                inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");

                if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst)) {
                    inst.input.focus();
                }

                // deffered render of the years select (to avoid flashes on Firefox)
                if (inst.yearshtml) {
                    origyearshtml = inst.yearshtml;
                    setTimeout(function () {
                        //assure that inst.yearshtml didn't change.
                        if (origyearshtml === inst.yearshtml && inst.yearshtml) {
                            inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
                        }
                        origyearshtml = inst.yearshtml = null;
                    }, 0);
                }
            },

            // #6694 - don't focus the input if it's already focused
            // this breaks the change event in IE
            // Support: IE and jQuery <1.9
            _shouldFocusInput: function _shouldFocusInput(inst) {
                return inst.input && inst.input.is(":visible") && !inst.input.is(":disabled") && !inst.input.is(":focus");
            },

            /* Check positioning to remain on screen. */
            _checkOffset: function _checkOffset(inst, offset, isFixed) {
                var dpWidth = inst.dpDiv.outerWidth(),
                    dpHeight = inst.dpDiv.outerHeight(),
                    inputWidth = inst.input ? inst.input.outerWidth() : 0,
                    inputHeight = inst.input ? inst.input.outerHeight() : 0,
                    viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
                    viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

                offset.left -= this._get(inst, "isRTL") ? dpWidth - inputWidth : 0;
                offset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0;
                offset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0;

                // now check if datepicker is showing outside window viewport - move to a better place if so.
                offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
                offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);

                return offset;
            },

            /* Find an object's position on the screen. */
            _findPos: function _findPos(obj) {
                var position,
                    inst = this._getInst(obj),
                    isRTL = this._get(inst, "isRTL");

                while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
                    obj = obj[isRTL ? "previousSibling" : "nextSibling"];
                }

                position = $(obj).offset();
                return [position.left, position.top];
            },

            /* Hide the date picker from view.
             * @param  input  element - the input field attached to the date picker
             */
            _hideDatepicker: function _hideDatepicker(input) {
                var showAnim,
                    duration,
                    postProcess,
                    onClose,
                    inst = this._curInst;

                if (!inst || input && inst !== $.data(input, "datepicker")) {
                    return;
                }

                if (this._datepickerShowing) {
                    showAnim = this._get(inst, "showAnim");
                    duration = this._get(inst, "duration");
                    postProcess = function postProcess() {
                        $.datepicker._tidyDialog(inst);
                    };

                    // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
                    if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {
                        inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
                    } else {
                        inst.dpDiv[showAnim === "slideDown" ? "slideUp" : showAnim === "fadeIn" ? "fadeOut" : "hide"](showAnim ? duration : null, postProcess);
                    }

                    if (!showAnim) {
                        postProcess();
                    }
                    this._datepickerShowing = false;

                    onClose = this._get(inst, "onClose");
                    if (onClose) {
                        onClose.apply(inst.input ? inst.input[0] : null, [inst.input ? inst.input.val() : "", inst]);
                    }

                    this._lastInput = null;
                    if (this._inDialog) {
                        this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
                        if ($.blockUI) {
                            $.unblockUI();
                            $("body").append(this.dpDiv);
                        }
                    }
                    this._inDialog = false;
                }
            },

            /* Tidy up after a dialog display. */
            _tidyDialog: function _tidyDialog(inst) {
                inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
            },

            /* Close date picker if clicked elsewhere. */
            _checkExternalClick: function _checkExternalClick(event) {
                if (!$.datepicker._curInst) {
                    return;
                }

                var $target = $(event.target),
                    inst = $.datepicker._getInst($target[0]);

                if ($target[0].id !== $.datepicker._mainDivId && $target.parents("#" + $.datepicker._mainDivId).length === 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.closest("." + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) || $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst) {
                    $.datepicker._hideDatepicker();
                }
            },

            /* Adjust one of the date sub-fields. */
            _adjustDate: function _adjustDate(id, offset, period) {
                var target = $(id),
                    inst = this._getInst(target[0]);

                if (this._isDisabledDatepicker(target[0])) {
                    return;
                }
                this._adjustInstDate(inst, offset + (period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
                period);
                this._updateDatepicker(inst);
            },

            /* Action for current link. */
            _gotoToday: function _gotoToday(id) {
                var date,
                    target = $(id),
                    inst = this._getInst(target[0]);

                if (this._get(inst, "gotoCurrent") && inst.currentDay) {
                    inst.selectedDay = inst.currentDay;
                    inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                    inst.drawYear = inst.selectedYear = inst.currentYear;
                } else {
                    date = new Date();
                    inst.selectedDay = date.getDate();
                    inst.drawMonth = inst.selectedMonth = date.getMonth();
                    inst.drawYear = inst.selectedYear = date.getFullYear();
                }
                this._notifyChange(inst);
                this._adjustDate(target);
            },

            /* Action for selecting a new month/year. */
            _selectMonthYear: function _selectMonthYear(id, select, period) {
                var target = $(id),
                    inst = this._getInst(target[0]);

                inst["selected" + (period === "M" ? "Month" : "Year")] = inst["draw" + (period === "M" ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);

                this._notifyChange(inst);
                this._adjustDate(target);
            },

            /* Action for selecting a day. */
            _selectDay: function _selectDay(id, month, year, td) {
                var inst,
                    target = $(id);

                if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
                    return;
                }

                inst = this._getInst(target[0]);
                inst.selectedDay = inst.currentDay = $("a", td).html();
                inst.selectedMonth = inst.currentMonth = month;
                inst.selectedYear = inst.currentYear = year;
                this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
            },

            /* Erase the input field and hide the date picker. */
            _clearDate: function _clearDate(id) {
                var target = $(id);
                this._selectDate(target, "");
            },

            /* Update the input field with the selected date. */
            _selectDate: function _selectDate(id, dateStr) {
                var onSelect,
                    target = $(id),
                    inst = this._getInst(target[0]);

                dateStr = dateStr != null ? dateStr : this._formatDate(inst);
                if (inst.input) {
                    inst.input.val(dateStr);
                }
                this._updateAlternate(inst);

                onSelect = this._get(inst, "onSelect");
                if (onSelect) {
                    onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst]); // trigger custom callback
                } else if (inst.input) {
                    inst.input.trigger("change"); // fire the change event
                }

                if (inst.inline) {
                    this._updateDatepicker(inst);
                } else {
                    this._hideDatepicker();
                    this._lastInput = inst.input[0];
                    if (_typeof(inst.input[0]) !== "object") {
                        inst.input.focus(); // restore focus
                    }
                    this._lastInput = null;
                }
            },

            /* Update any alternate field to synchronise with the main field. */
            _updateAlternate: function _updateAlternate(inst) {
                var altFormat,
                    date,
                    dateStr,
                    altField = this._get(inst, "altField");

                if (altField) {
                    // update alternate field too
                    altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
                    date = this._getDate(inst);
                    dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                    $(altField).each(function () {
                        $(this).val(dateStr);
                    });
                }
            },

            /* Set as beforeShowDay function to prevent selection of weekends.
             * @param  date  Date - the date to customise
             * @return [boolean, string] - is this date selectable?, what is its CSS class?
             */
            noWeekends: function noWeekends(date) {
                var day = date.getDay();
                return [day > 0 && day < 6, ""];
            },

            /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
             * @param  date  Date - the date to get the week for
             * @return  number - the number of the week within the year that contains this date
             */
            iso8601Week: function iso8601Week(date) {
                var time,
                    checkDate = new Date(date.getTime());

                // Find Thursday of this week starting on Monday
                checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

                time = checkDate.getTime();
                checkDate.setMonth(0); // Compare with Jan 1
                checkDate.setDate(1);
                return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
            },

            /* Parse a string value into a date object.
             * See formatDate below for the possible formats.
             *
             * @param  format string - the expected format of the date
             * @param  value string - the date in the above format
             * @param  settings Object - attributes include:
             *					shortYearCutoff  number - the cutoff year for determining the century (optional)
             *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
             *					dayNames		string[7] - names of the days from Sunday (optional)
             *					monthNamesShort string[12] - abbreviated names of the months (optional)
             *					monthNames		string[12] - names of the months (optional)
             * @return  Date - the extracted date value or null if value is blank
             */
            parseDate: function parseDate(format, value, settings) {
                if (format == null || value == null) {
                    throw "Invalid arguments";
                }

                value = (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" ? value.toString() : value + "";
                if (value === "") {
                    return null;
                }

                var iFormat,
                    dim,
                    extra,
                    iValue = 0,
                    shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
                    shortYearCutoff = typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10),
                    dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
                    dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
                    monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
                    monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
                    year = -1,
                    month = -1,
                    day = -1,
                    doy = -1,
                    literal = false,
                    date,

                // Check whether a format character is doubled
                lookAhead = function lookAhead(match) {
                    var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                },

                // Extract a number from the string value
                getNumber = function getNumber(match) {
                    var isDoubled = lookAhead(match),
                        size = match === "@" ? 14 : match === "!" ? 20 : match === "y" && isDoubled ? 4 : match === "o" ? 3 : 2,
                        minSize = match === "y" ? size : 1,
                        digits = new RegExp("^\\d{" + minSize + "," + size + "}"),
                        num = value.substring(iValue).match(digits);
                    if (!num) {
                        throw "Missing number at position " + iValue;
                    }
                    iValue += num[0].length;
                    return parseInt(num[0], 10);
                },

                // Extract a name from the string value and convert to an index
                getName = function getName(match, shortNames, longNames) {
                    var index = -1,
                        names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
                        return [[k, v]];
                    }).sort(function (a, b) {
                        return -(a[1].length - b[1].length);
                    });

                    $.each(names, function (i, pair) {
                        var name = pair[1];
                        if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                            index = pair[0];
                            iValue += name.length;
                            return false;
                        }
                    });
                    if (index !== -1) {
                        return index + 1;
                    } else {
                        throw "Unknown name at position " + iValue;
                    }
                },

                // Confirm that a literal character matches the string value
                checkLiteral = function checkLiteral() {
                    if (value.charAt(iValue) !== format.charAt(iFormat)) {
                        throw "Unexpected literal at position " + iValue;
                    }
                    iValue++;
                };

                for (iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal) {
                        if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                            literal = false;
                        } else {
                            checkLiteral();
                        }
                    } else {
                        switch (format.charAt(iFormat)) {
                            case "d":
                                day = getNumber("d");
                                break;
                            case "D":
                                getName("D", dayNamesShort, dayNames);
                                break;
                            case "o":
                                doy = getNumber("o");
                                break;
                            case "m":
                                month = getNumber("m");
                                break;
                            case "M":
                                month = getName("M", monthNamesShort, monthNames);
                                break;
                            case "y":
                                year = getNumber("y");
                                break;
                            case "@":
                                date = new Date(getNumber("@"));
                                year = date.getFullYear();
                                month = date.getMonth() + 1;
                                day = date.getDate();
                                break;
                            case "!":
                                date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
                                year = date.getFullYear();
                                month = date.getMonth() + 1;
                                day = date.getDate();
                                break;
                            case "'":
                                if (lookAhead("'")) {
                                    checkLiteral();
                                } else {
                                    literal = true;
                                }
                                break;
                            default:
                                checkLiteral();
                        }
                    }
                }

                if (iValue < value.length) {
                    extra = value.substr(iValue);
                    if (!/^\s+/.test(extra)) {
                        throw "Extra/unparsed characters found in date: " + extra;
                    }
                }

                if (year === -1) {
                    year = new Date().getFullYear();
                } else if (year < 100) {
                    year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100);
                }

                if (doy > -1) {
                    month = 1;
                    day = doy;
                    do {
                        dim = this._getDaysInMonth(year, month - 1);
                        if (day <= dim) {
                            break;
                        }
                        month++;
                        day -= dim;
                    } while (true);
                }

                date = this._daylightSavingAdjust(new Date(year, month - 1, day));
                if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
                    throw "Invalid date"; // E.g. 31/02/00
                }
                return date;
            },

            /* Standard date formats. */
            ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
            COOKIE: "D, dd M yy",
            ISO_8601: "yy-mm-dd",
            RFC_822: "D, d M y",
            RFC_850: "DD, dd-M-y",
            RFC_1036: "D, d M y",
            RFC_1123: "D, d M yy",
            RFC_2822: "D, d M yy",
            RSS: "D, d M y", // RFC 822
            TICKS: "!",
            TIMESTAMP: "@",
            W3C: "yy-mm-dd", // ISO 8601

            _ticksTo1970: ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000,

            /* Format a date object into a string value.
             * The format can be combinations of the following:
             * d  - day of month (no leading zero)
             * dd - day of month (two digit)
             * o  - day of year (no leading zeros)
             * oo - day of year (three digit)
             * D  - day name short
             * DD - day name long
             * m  - month of year (no leading zero)
             * mm - month of year (two digit)
             * M  - month name short
             * MM - month name long
             * y  - year (two digit)
             * yy - year (four digit)
             * @ - Unix timestamp (ms since 01/01/1970)
             * ! - Windows ticks (100ns since 01/01/0001)
             * "..." - literal text
             * '' - single quote
             *
             * @param  format string - the desired format of the date
             * @param  date Date - the date value to format
             * @param  settings Object - attributes include:
             *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
             *					dayNames		string[7] - names of the days from Sunday (optional)
             *					monthNamesShort string[12] - abbreviated names of the months (optional)
             *					monthNames		string[12] - names of the months (optional)
             * @return  string - the date in the above format
             */
            formatDate: function formatDate(format, date, settings) {
                if (!date) {
                    return "";
                }

                var iFormat,
                    dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
                    dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
                    monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
                    monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,

                // Check whether a format character is doubled
                lookAhead = function lookAhead(match) {
                    var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                },

                // Format a number, with leading zero if necessary
                formatNumber = function formatNumber(match, value, len) {
                    var num = "" + value;
                    if (lookAhead(match)) {
                        while (num.length < len) {
                            num = "0" + num;
                        }
                    }
                    return num;
                },

                // Format a name, short or long as requested
                formatName = function formatName(match, value, shortNames, longNames) {
                    return lookAhead(match) ? longNames[value] : shortNames[value];
                },
                    output = "",
                    literal = false;

                if (date) {
                    for (iFormat = 0; iFormat < format.length; iFormat++) {
                        if (literal) {
                            if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                                literal = false;
                            } else {
                                output += format.charAt(iFormat);
                            }
                        } else {
                            switch (format.charAt(iFormat)) {
                                case "d":
                                    output += formatNumber("d", date.getDate(), 2);
                                    break;
                                case "D":
                                    output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                                    break;
                                case "o":
                                    output += formatNumber("o", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                                    break;
                                case "m":
                                    output += formatNumber("m", date.getMonth() + 1, 2);
                                    break;
                                case "M":
                                    output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                                    break;
                                case "y":
                                    output += lookAhead("y") ? date.getFullYear() : (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100;
                                    break;
                                case "@":
                                    output += date.getTime();
                                    break;
                                case "!":
                                    output += date.getTime() * 10000 + this._ticksTo1970;
                                    break;
                                case "'":
                                    if (lookAhead("'")) {
                                        output += "'";
                                    } else {
                                        literal = true;
                                    }
                                    break;
                                default:
                                    output += format.charAt(iFormat);
                            }
                        }
                    }
                }
                return output;
            },

            /* Extract all possible characters from the date format. */
            _possibleChars: function _possibleChars(format) {
                var iFormat,
                    chars = "",
                    literal = false,

                // Check whether a format character is doubled
                lookAhead = function lookAhead(match) {
                    var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                };

                for (iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal) {
                        if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                            literal = false;
                        } else {
                            chars += format.charAt(iFormat);
                        }
                    } else {
                        switch (format.charAt(iFormat)) {
                            case "d":case "m":case "y":case "@":
                                chars += "0123456789";
                                break;
                            case "D":case "M":
                                return null; // Accept anything
                            case "'":
                                if (lookAhead("'")) {
                                    chars += "'";
                                } else {
                                    literal = true;
                                }
                                break;
                            default:
                                chars += format.charAt(iFormat);
                        }
                    }
                }
                return chars;
            },

            /* Get a setting value, defaulting if necessary. */
            _get: function _get(inst, name) {
                return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];
            },

            /* Parse existing date and initialise date picker. */
            _setDateFromField: function _setDateFromField(inst, noDefault) {
                if (inst.input.val() === inst.lastVal) {
                    return;
                }

                var dateFormat = this._get(inst, "dateFormat"),
                    dates = inst.lastVal = inst.input ? inst.input.val() : null,
                    defaultDate = this._getDefaultDate(inst),
                    date = defaultDate,
                    settings = this._getFormatConfig(inst);

                try {
                    date = this.parseDate(dateFormat, dates, settings) || defaultDate;
                } catch (event) {
                    dates = noDefault ? "" : dates;
                }
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
                inst.currentDay = dates ? date.getDate() : 0;
                inst.currentMonth = dates ? date.getMonth() : 0;
                inst.currentYear = dates ? date.getFullYear() : 0;
                this._adjustInstDate(inst);
            },

            /* Retrieve the default date shown on opening. */
            _getDefaultDate: function _getDefaultDate(inst) {
                return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
            },

            /* A date may be specified as an exact value or a relative one. */
            _determineDate: function _determineDate(inst, date, defaultDate) {
                var offsetNumeric = function offsetNumeric(offset) {
                    var date = new Date();
                    date.setDate(date.getDate() + offset);
                    return date;
                },
                    offsetString = function offsetString(offset) {
                    try {
                        return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), offset, $.datepicker._getFormatConfig(inst));
                    } catch (e) {
                        // Ignore
                    }

                    var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(),
                        year = date.getFullYear(),
                        month = date.getMonth(),
                        day = date.getDate(),
                        pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
                        matches = pattern.exec(offset);

                    while (matches) {
                        switch (matches[2] || "d") {
                            case "d":case "D":
                                day += parseInt(matches[1], 10);break;
                            case "w":case "W":
                                day += parseInt(matches[1], 10) * 7;break;
                            case "m":case "M":
                                month += parseInt(matches[1], 10);
                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                                break;
                            case "y":case "Y":
                                year += parseInt(matches[1], 10);
                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                                break;
                        }
                        matches = pattern.exec(offset);
                    }
                    return new Date(year, month, day);
                },
                    newDate = date == null || date === "" ? defaultDate : typeof date === "string" ? offsetString(date) : typeof date === "number" ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());

                newDate = newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate;
                if (newDate) {
                    newDate.setHours(0);
                    newDate.setMinutes(0);
                    newDate.setSeconds(0);
                    newDate.setMilliseconds(0);
                }
                return this._daylightSavingAdjust(newDate);
            },

            /* Handle switch to/from daylight saving.
             * Hours may be non-zero on daylight saving cut-over:
             * > 12 when midnight changeover, but then cannot generate
             * midnight datetime, so jump to 1AM, otherwise reset.
             * @param  date  (Date) the date to check
             * @return  (Date) the corrected date
             */
            _daylightSavingAdjust: function _daylightSavingAdjust(date) {
                if (!date) {
                    return null;
                }
                date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
                return date;
            },

            /* Set the date(s) directly. */
            _setDate: function _setDate(inst, date, noChange) {
                var clear = !date,
                    origMonth = inst.selectedMonth,
                    origYear = inst.selectedYear,
                    newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

                inst.selectedDay = inst.currentDay = newDate.getDate();
                inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
                inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
                if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
                    this._notifyChange(inst);
                }
                this._adjustInstDate(inst);
                if (inst.input) {
                    inst.input.val(clear ? "" : this._formatDate(inst));
                }
            },

            /* Retrieve the date(s) directly. */
            _getDate: function _getDate(inst) {
                var startDate = !inst.currentYear || inst.input && inst.input.val() === "" ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
                return startDate;
            },

            /* Attach the onxxx handlers.  These are declared statically so
             * they work with static code transformers like Caja.
             */
            _attachHandlers: function _attachHandlers(inst) {
                var stepMonths = this._get(inst, "stepMonths"),
                    id = "#" + inst.id.replace(/\\\\/g, "\\");
                inst.dpDiv.find("[data-handler]").map(function () {
                    var handler = {
                        prev: function prev() {
                            $.datepicker._adjustDate(id, -stepMonths, "M");
                        },
                        next: function next() {
                            $.datepicker._adjustDate(id, +stepMonths, "M");
                        },
                        hide: function hide() {
                            $.datepicker._hideDatepicker();
                        },
                        today: function today() {
                            $.datepicker._gotoToday(id);
                        },
                        selectDay: function selectDay() {
                            $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
                            return false;
                        },
                        selectMonth: function selectMonth() {
                            $.datepicker._selectMonthYear(id, this, "M");
                            return false;
                        },
                        selectYear: function selectYear() {
                            $.datepicker._selectMonthYear(id, this, "Y");
                            return false;
                        }
                    };
                    $(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
                });
            },

            /* Generate the HTML for the current state of the date picker. */
            _generateHTML: function _generateHTML(inst) {
                var maxDraw,
                    prevText,
                    prev,
                    nextText,
                    next,
                    currentText,
                    gotoDate,
                    controls,
                    buttonPanel,
                    firstDay,
                    showWeek,
                    dayNames,
                    dayNamesMin,
                    monthNames,
                    monthNamesShort,
                    beforeShowDay,
                    showOtherMonths,
                    selectOtherMonths,
                    defaultDate,
                    html,
                    dow,
                    row,
                    group,
                    col,
                    selectedDate,
                    cornerClass,
                    calender,
                    thead,
                    day,
                    daysInMonth,
                    leadDays,
                    curRows,
                    numRows,
                    printDate,
                    dRow,
                    tbody,
                    daySettings,
                    otherMonth,
                    unselectable,
                    tempDate = new Date(),
                    today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())),
                    // clear time
                isRTL = this._get(inst, "isRTL"),
                    showButtonPanel = this._get(inst, "showButtonPanel"),
                    hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
                    navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
                    numMonths = this._getNumberOfMonths(inst),
                    showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
                    stepMonths = this._get(inst, "stepMonths"),
                    isMultiMonth = numMonths[0] !== 1 || numMonths[1] !== 1,
                    currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)),
                    minDate = this._getMinMaxDate(inst, "min"),
                    maxDate = this._getMinMaxDate(inst, "max"),
                    drawMonth = inst.drawMonth - showCurrentAtPos,
                    drawYear = inst.drawYear;

                if (drawMonth < 0) {
                    drawMonth += 12;
                    drawYear--;
                }
                if (maxDate) {
                    maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));
                    maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;
                    while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                        drawMonth--;
                        if (drawMonth < 0) {
                            drawMonth = 11;
                            drawYear--;
                        }
                    }
                }
                inst.drawMonth = drawMonth;
                inst.drawYear = drawYear;

                prevText = this._get(inst, "prevText");
                prevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst));

                prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" + " title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>";

                nextText = this._get(inst, "nextText");
                nextText = !navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst));

                next = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" + " title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>";

                currentText = this._get(inst, "currentText");
                gotoDate = this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today;
                currentText = !navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));

                controls = !inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(inst, "closeText") + "</button>" : "";

                buttonPanel = showButtonPanel ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") + (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" + ">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

                firstDay = parseInt(this._get(inst, "firstDay"), 10);
                firstDay = isNaN(firstDay) ? 0 : firstDay;

                showWeek = this._get(inst, "showWeek");
                dayNames = this._get(inst, "dayNames");
                dayNamesMin = this._get(inst, "dayNamesMin");
                monthNames = this._get(inst, "monthNames");
                monthNamesShort = this._get(inst, "monthNamesShort");
                beforeShowDay = this._get(inst, "beforeShowDay");
                showOtherMonths = this._get(inst, "showOtherMonths");
                selectOtherMonths = this._get(inst, "selectOtherMonths");
                defaultDate = this._getDefaultDate(inst);
                html = "";
                dow;
                for (row = 0; row < numMonths[0]; row++) {
                    group = "";
                    this.maxRows = 4;
                    for (col = 0; col < numMonths[1]; col++) {
                        selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                        cornerClass = " ui-corner-all";
                        calender = "";
                        if (isMultiMonth) {
                            calender += "<div class='ui-datepicker-group";
                            if (numMonths[1] > 1) {
                                switch (col) {
                                    case 0:
                                        calender += " ui-datepicker-group-first";
                                        cornerClass = " ui-corner-" + (isRTL ? "right" : "left");break;
                                    case numMonths[1] - 1:
                                        calender += " ui-datepicker-group-last";
                                        cornerClass = " ui-corner-" + (isRTL ? "left" : "right");break;
                                    default:
                                        calender += " ui-datepicker-group-middle";cornerClass = "";break;
                                }
                            }
                            calender += "'>";
                        }
                        calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" + (/all|left/.test(cornerClass) && row === 0 ? isRTL ? next : prev : "") + (/all|right/.test(cornerClass) && row === 0 ? isRTL ? prev : next : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
                        "</div><table class='ui-datepicker-calendar'><thead>" + "<tr>";
                        thead = showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "";
                        for (dow = 0; dow < 7; dow++) {
                            // days of the week
                            day = (dow + firstDay) % 7;
                            thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" + "<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
                        }
                        calender += thead + "</tr></thead><tbody>";
                        daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                        if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
                            inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
                        }
                        leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                        curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
                        numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows; //If multiple months, use the higher number of rows (see #7043)
                        this.maxRows = numRows;
                        printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                        for (dRow = 0; dRow < numRows; dRow++) {
                            // create date picker rows
                            calender += "<tr>";
                            tbody = !showWeek ? "" : "<td class='ui-datepicker-week-col'>" + this._get(inst, "calculateWeek")(printDate) + "</td>";
                            for (dow = 0; dow < 7; dow++) {
                                // create date picker days
                                daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, ""];
                                otherMonth = printDate.getMonth() !== drawMonth;
                                unselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && printDate < minDate || maxDate && printDate > maxDate;
                                tbody += "<td class='" + ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + ( // highlight weekends
                                otherMonth ? " ui-datepicker-other-month" : "") + ( // highlight days from other months
                                printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || // user pressed key
                                defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ?
                                // or defaultDate is current printedDate and defaultDate is selectedDate
                                " " + this._dayOverClass : "") + ( // highlight selected day
                                unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + ( // highlight unselectable days
                                otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + ( // highlight custom dates
                                printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + ( // highlight selected day
                                printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + ( // highlight today (if different)
                                (!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + ( // cell title
                                unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + ( // actions
                                otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
                                unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" + (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + ( // highlight selected day
                                otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
                                "' href='#'>" + printDate.getDate() + "</a>") + "</td>"; // display selectable date
                                printDate.setDate(printDate.getDate() + 1);
                                printDate = this._daylightSavingAdjust(printDate);
                            }
                            calender += tbody + "</tr>";
                        }
                        drawMonth++;
                        if (drawMonth > 11) {
                            drawMonth = 0;
                            drawYear++;
                        }
                        calender += "</tbody></table>" + (isMultiMonth ? "</div>" + (numMonths[0] > 0 && col === numMonths[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
                        group += calender;
                    }
                    html += group;
                }
                html += buttonPanel;
                inst._keyEvent = false;
                return html;
            },

            /* Generate the month and year header. */
            _generateMonthYearHeader: function _generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {

                var inMinYear,
                    inMaxYear,
                    month,
                    years,
                    thisYear,
                    determineYear,
                    year,
                    endYear,
                    changeMonth = this._get(inst, "changeMonth"),
                    changeYear = this._get(inst, "changeYear"),
                    showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
                    html = "<div class='ui-datepicker-title'>",
                    monthHtml = "";

                // month selection
                if (secondary || !changeMonth) {
                    monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
                } else {
                    inMinYear = minDate && minDate.getFullYear() === drawYear;
                    inMaxYear = maxDate && maxDate.getFullYear() === drawYear;
                    monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
                    for (month = 0; month < 12; month++) {
                        if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                            monthHtml += "<option value='" + month + "'" + (month === drawMonth ? " selected='selected'" : "") + ">" + monthNamesShort[month] + "</option>";
                        }
                    }
                    monthHtml += "</select>";
                }

                if (!showMonthAfterYear) {
                    html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
                }

                // year selection
                if (!inst.yearshtml) {
                    inst.yearshtml = "";
                    if (secondary || !changeYear) {
                        html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
                    } else {
                        // determine range of years to display
                        years = this._get(inst, "yearRange").split(":");
                        thisYear = new Date().getFullYear();
                        determineYear = function determineYear(value) {
                            var year = value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);
                            return isNaN(year) ? thisYear : year;
                        };
                        year = determineYear(years[0]);
                        endYear = Math.max(year, determineYear(years[1] || ""));
                        year = minDate ? Math.max(year, minDate.getFullYear()) : year;
                        endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;
                        inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
                        for (; year <= endYear; year++) {
                            inst.yearshtml += "<option value='" + year + "'" + (year === drawYear ? " selected='selected'" : "") + ">" + year + "</option>";
                        }
                        inst.yearshtml += "</select>";

                        html += inst.yearshtml;
                        inst.yearshtml = null;
                    }
                }

                html += this._get(inst, "yearSuffix");
                if (showMonthAfterYear) {
                    html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
                }
                html += "</div>"; // Close datepicker_header
                return html;
            },

            /* Adjust one of the date sub-fields. */
            _adjustInstDate: function _adjustInstDate(inst, offset, period) {
                var year = inst.drawYear + (period === "Y" ? offset : 0),
                    month = inst.drawMonth + (period === "M" ? offset : 0),
                    day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
                    date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
                if (period === "M" || period === "Y") {
                    this._notifyChange(inst);
                }
            },

            /* Ensure a date is within any min/max bounds. */
            _restrictMinMax: function _restrictMinMax(inst, date) {
                var minDate = this._getMinMaxDate(inst, "min"),
                    maxDate = this._getMinMaxDate(inst, "max"),
                    newDate = minDate && date < minDate ? minDate : date;
                return maxDate && newDate > maxDate ? maxDate : newDate;
            },

            /* Notify change of month/year. */
            _notifyChange: function _notifyChange(inst) {
                var onChange = this._get(inst, "onChangeMonthYear");
                if (onChange) {
                    onChange.apply(inst.input ? inst.input[0] : null, [inst.selectedYear, inst.selectedMonth + 1, inst]);
                }
            },

            /* Determine the number of months to show. */
            _getNumberOfMonths: function _getNumberOfMonths(inst) {
                var numMonths = this._get(inst, "numberOfMonths");
                return numMonths == null ? [1, 1] : typeof numMonths === "number" ? [1, numMonths] : numMonths;
            },

            /* Determine the current maximum date - ensure no time components are set. */
            _getMinMaxDate: function _getMinMaxDate(inst, minMax) {
                return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
            },

            /* Find the number of days in a given month. */
            _getDaysInMonth: function _getDaysInMonth(year, month) {
                return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
            },

            /* Find the day of the week of the first of a month. */
            _getFirstDayOfMonth: function _getFirstDayOfMonth(year, month) {
                return new Date(year, month, 1).getDay();
            },

            /* Determines if we should allow a "next/prev" month display change. */
            _canAdjustMonth: function _canAdjustMonth(inst, offset, curYear, curMonth) {
                var numMonths = this._getNumberOfMonths(inst),
                    date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

                if (offset < 0) {
                    date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
                }
                return this._isInRange(inst, date);
            },

            /* Is the given date in the accepted range? */
            _isInRange: function _isInRange(inst, date) {
                var yearSplit,
                    currentYear,
                    minDate = this._getMinMaxDate(inst, "min"),
                    maxDate = this._getMinMaxDate(inst, "max"),
                    minYear = null,
                    maxYear = null,
                    years = this._get(inst, "yearRange");
                if (years) {
                    yearSplit = years.split(":");
                    currentYear = new Date().getFullYear();
                    minYear = parseInt(yearSplit[0], 10);
                    maxYear = parseInt(yearSplit[1], 10);
                    if (yearSplit[0].match(/[+\-].*/)) {
                        minYear += currentYear;
                    }
                    if (yearSplit[1].match(/[+\-].*/)) {
                        maxYear += currentYear;
                    }
                }

                return (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear);
            },

            /* Provide the configuration settings for formatting/parsing. */
            _getFormatConfig: function _getFormatConfig(inst) {
                var shortYearCutoff = this._get(inst, "shortYearCutoff");
                shortYearCutoff = typeof shortYearCutoff !== "string" ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10);
                return { shortYearCutoff: shortYearCutoff,
                    dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
                    monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames") };
            },

            /* Format the given date for display. */
            _formatDate: function _formatDate(inst, day, month, year) {
                if (!day) {
                    inst.currentDay = inst.selectedDay;
                    inst.currentMonth = inst.selectedMonth;
                    inst.currentYear = inst.selectedYear;
                }
                var date = day ? (typeof day === "undefined" ? "undefined" : _typeof(day)) === "object" ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
                return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
            }
        });

        /*
         * Bind hover events for datepicker elements.
         * Done via delegate so the binding only occurs once in the lifetime of the parent div.
         * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
         */
        function datepicker_bindHover(dpDiv) {
            var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
            return dpDiv.delegate(selector, "mouseout", function () {
                $(this).removeClass("ui-state-hover");
                if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                    $(this).removeClass("ui-datepicker-prev-hover");
                }
                if (this.className.indexOf("ui-datepicker-next") !== -1) {
                    $(this).removeClass("ui-datepicker-next-hover");
                }
            }).delegate(selector, "mouseover", datepicker_handleMouseover);
        }

        function datepicker_handleMouseover() {
            if (!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
                $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
                $(this).addClass("ui-state-hover");
                if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                    $(this).addClass("ui-datepicker-prev-hover");
                }
                if (this.className.indexOf("ui-datepicker-next") !== -1) {
                    $(this).addClass("ui-datepicker-next-hover");
                }
            }
        }

        /* jQuery extend now ignores nulls! */
        function datepicker_extendRemove(target, props) {
            $.extend(target, props);
            for (var name in props) {
                if (props[name] == null) {
                    target[name] = props[name];
                }
            }
            return target;
        }

        /* Invoke the datepicker functionality.
           @param  options  string - a command, optionally followed by additional parameters or
        					Object - settings for attaching new datepicker functionality
           @return  jQuery object */
        $.fn.datepicker = function (options) {

            /* Verify an empty collection wasn't passed - Fixes #6976 */
            if (!this.length) {
                return this;
            }

            /* Initialise the date picker. */
            if (!$.datepicker.initialized) {
                $(document).mousedown($.datepicker._checkExternalClick);
                $.datepicker.initialized = true;
            }

            /* Append datepicker main container to body if not exist. */
            if ($("#" + $.datepicker._mainDivId).length === 0) {
                $("body").append($.datepicker.dpDiv);
            }

            var otherArgs = Array.prototype.slice.call(arguments, 1);
            if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
                return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs));
            }
            if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
                return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs));
            }
            return this.each(function () {
                typeof options === "string" ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);
            });
        };

        $.datepicker = new Datepicker(); // singleton instance
        $.datepicker.initialized = false;
        $.datepicker.uuid = new Date().getTime();
        $.datepicker.version = "1.11.4";

        var datepicker = $.datepicker;

        /*!
         * jQuery UI Draggable 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/draggable/
         */

        $.widget("ui.draggable", $.ui.mouse, {
            version: "1.11.4",
            widgetEventPrefix: "drag",
            options: {
                addClasses: true,
                appendTo: "parent",
                axis: false,
                connectToSortable: false,
                containment: false,
                cursor: "auto",
                cursorAt: false,
                grid: false,
                handle: false,
                helper: "original",
                iframeFix: false,
                opacity: false,
                refreshPositions: false,
                revert: false,
                revertDuration: 500,
                scope: "default",
                scroll: true,
                scrollSensitivity: 20,
                scrollSpeed: 20,
                snap: false,
                snapMode: "both",
                snapTolerance: 20,
                stack: false,
                zIndex: false,

                // callbacks
                drag: null,
                start: null,
                stop: null
            },
            _create: function _create() {

                if (this.options.helper === "original") {
                    this._setPositionRelative();
                }
                if (this.options.addClasses) {
                    this.element.addClass("ui-draggable");
                }
                if (this.options.disabled) {
                    this.element.addClass("ui-draggable-disabled");
                }
                this._setHandleClassName();

                this._mouseInit();
            },

            _setOption: function _setOption(key, value) {
                this._super(key, value);
                if (key === "handle") {
                    this._removeHandleClassName();
                    this._setHandleClassName();
                }
            },

            _destroy: function _destroy() {
                if ((this.helper || this.element).is(".ui-draggable-dragging")) {
                    this.destroyOnClear = true;
                    return;
                }
                this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
                this._removeHandleClassName();
                this._mouseDestroy();
            },

            _mouseCapture: function _mouseCapture(event) {
                var o = this.options;

                this._blurActiveElement(event);

                // among others, prevent a drag on a resizable-handle
                if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
                    return false;
                }

                //Quit if we're not on a valid handle
                this.handle = this._getHandle(event);
                if (!this.handle) {
                    return false;
                }

                this._blockFrames(o.iframeFix === true ? "iframe" : o.iframeFix);

                return true;
            },

            _blockFrames: function _blockFrames(selector) {
                this.iframeBlocks = this.document.find(selector).map(function () {
                    var iframe = $(this);

                    return $("<div>").css("position", "absolute").appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0];
                });
            },

            _unblockFrames: function _unblockFrames() {
                if (this.iframeBlocks) {
                    this.iframeBlocks.remove();
                    delete this.iframeBlocks;
                }
            },

            _blurActiveElement: function _blurActiveElement(event) {
                var document = this.document[0];

                // Only need to blur if the event occurred on the draggable itself, see #10527
                if (!this.handleElement.is(event.target)) {
                    return;
                }

                // support: IE9
                // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
                try {

                    // Support: IE9, IE10
                    // If the <body> is blurred, IE will switch windows, see #9520
                    if (document.activeElement && document.activeElement.nodeName.toLowerCase() !== "body") {

                        // Blur any element that currently has focus, see #4261
                        $(document.activeElement).blur();
                    }
                } catch (error) {}
            },

            _mouseStart: function _mouseStart(event) {

                var o = this.options;

                //Create and append the visible helper
                this.helper = this._createHelper(event);

                this.helper.addClass("ui-draggable-dragging");

                //Cache the helper size
                this._cacheHelperProportions();

                //If ddmanager is used for droppables, set the global draggable
                if ($.ui.ddmanager) {
                    $.ui.ddmanager.current = this;
                }

                /*
                 * - Position generation -
                 * This block generates everything position related - it's the core of draggables.
                 */

                //Cache the margins of the original element
                this._cacheMargins();

                //Store the helper's css position
                this.cssPosition = this.helper.css("position");
                this.scrollParent = this.helper.scrollParent(true);
                this.offsetParent = this.helper.offsetParent();
                this.hasFixedAncestor = this.helper.parents().filter(function () {
                    return $(this).css("position") === "fixed";
                }).length > 0;

                //The element's absolute position on the page minus margins
                this.positionAbs = this.element.offset();
                this._refreshOffsets(event);

                //Generate the original position
                this.originalPosition = this.position = this._generatePosition(event, false);
                this.originalPageX = event.pageX;
                this.originalPageY = event.pageY;

                //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
                o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);

                //Set a containment if given in the options
                this._setContainment();

                //Trigger event + callbacks
                if (this._trigger("start", event) === false) {
                    this._clear();
                    return false;
                }

                //Recache the helper size
                this._cacheHelperProportions();

                //Prepare the droppable offsets
                if ($.ui.ddmanager && !o.dropBehaviour) {
                    $.ui.ddmanager.prepareOffsets(this, event);
                }

                // Reset helper's right/bottom css if they're set and set explicit width/height instead
                // as this prevents resizing of elements with right/bottom set (see #7772)
                this._normalizeRightBottom();

                this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

                //If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
                if ($.ui.ddmanager) {
                    $.ui.ddmanager.dragStart(this, event);
                }

                return true;
            },

            _refreshOffsets: function _refreshOffsets(event) {
                this.offset = {
                    top: this.positionAbs.top - this.margins.top,
                    left: this.positionAbs.left - this.margins.left,
                    scroll: false,
                    parent: this._getParentOffset(),
                    relative: this._getRelativeOffset()
                };

                this.offset.click = {
                    left: event.pageX - this.offset.left,
                    top: event.pageY - this.offset.top
                };
            },

            _mouseDrag: function _mouseDrag(event, noPropagation) {
                // reset any necessary cached properties (see #5009)
                if (this.hasFixedAncestor) {
                    this.offset.parent = this._getParentOffset();
                }

                //Compute the helpers position
                this.position = this._generatePosition(event, true);
                this.positionAbs = this._convertPositionTo("absolute");

                //Call plugins and callbacks and use the resulting position if something is returned
                if (!noPropagation) {
                    var ui = this._uiHash();
                    if (this._trigger("drag", event, ui) === false) {
                        this._mouseUp({});
                        return false;
                    }
                    this.position = ui.position;
                }

                this.helper[0].style.left = this.position.left + "px";
                this.helper[0].style.top = this.position.top + "px";

                if ($.ui.ddmanager) {
                    $.ui.ddmanager.drag(this, event);
                }

                return false;
            },

            _mouseStop: function _mouseStop(event) {

                //If we are using droppables, inform the manager about the drop
                var that = this,
                    dropped = false;
                if ($.ui.ddmanager && !this.options.dropBehaviour) {
                    dropped = $.ui.ddmanager.drop(this, event);
                }

                //if a drop comes from outside (a sortable)
                if (this.dropped) {
                    dropped = this.dropped;
                    this.dropped = false;
                }

                if (this.options.revert === "invalid" && !dropped || this.options.revert === "valid" && dropped || this.options.revert === true || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped)) {
                    $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
                        if (that._trigger("stop", event) !== false) {
                            that._clear();
                        }
                    });
                } else {
                    if (this._trigger("stop", event) !== false) {
                        this._clear();
                    }
                }

                return false;
            },

            _mouseUp: function _mouseUp(event) {
                this._unblockFrames();

                //If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
                if ($.ui.ddmanager) {
                    $.ui.ddmanager.dragStop(this, event);
                }

                // Only need to focus if the event occurred on the draggable itself, see #10527
                if (this.handleElement.is(event.target)) {
                    // The interaction is over; whether or not the click resulted in a drag, focus the element
                    this.element.focus();
                }

                return $.ui.mouse.prototype._mouseUp.call(this, event);
            },

            cancel: function cancel() {

                if (this.helper.is(".ui-draggable-dragging")) {
                    this._mouseUp({});
                } else {
                    this._clear();
                }

                return this;
            },

            _getHandle: function _getHandle(event) {
                return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true;
            },

            _setHandleClassName: function _setHandleClassName() {
                this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;
                this.handleElement.addClass("ui-draggable-handle");
            },

            _removeHandleClassName: function _removeHandleClassName() {
                this.handleElement.removeClass("ui-draggable-handle");
            },

            _createHelper: function _createHelper(event) {

                var o = this.options,
                    helperIsFunction = $.isFunction(o.helper),
                    helper = helperIsFunction ? $(o.helper.apply(this.element[0], [event])) : o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element;

                if (!helper.parents("body").length) {
                    helper.appendTo(o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo);
                }

                // http://bugs.jqueryui.com/ticket/9446
                // a helper function can return the original element
                // which wouldn't have been set to relative in _create
                if (helperIsFunction && helper[0] === this.element[0]) {
                    this._setPositionRelative();
                }

                if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css("position"))) {
                    helper.css("position", "absolute");
                }

                return helper;
            },

            _setPositionRelative: function _setPositionRelative() {
                if (!/^(?:r|a|f)/.test(this.element.css("position"))) {
                    this.element[0].style.position = "relative";
                }
            },

            _adjustOffsetFromHelper: function _adjustOffsetFromHelper(obj) {
                if (typeof obj === "string") {
                    obj = obj.split(" ");
                }
                if ($.isArray(obj)) {
                    obj = { left: +obj[0], top: +obj[1] || 0 };
                }
                if ("left" in obj) {
                    this.offset.click.left = obj.left + this.margins.left;
                }
                if ("right" in obj) {
                    this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
                }
                if ("top" in obj) {
                    this.offset.click.top = obj.top + this.margins.top;
                }
                if ("bottom" in obj) {
                    this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
                }
            },

            _isRootNode: function _isRootNode(element) {
                return (/(html|body)/i.test(element.tagName) || element === this.document[0]
                );
            },

            _getParentOffset: function _getParentOffset() {

                //Get the offsetParent and cache its position
                var po = this.offsetParent.offset(),
                    document = this.document[0];

                // This is a special case where we need to modify a offset calculated on start, since the following happened:
                // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
                // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
                //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
                if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                    po.left += this.scrollParent.scrollLeft();
                    po.top += this.scrollParent.scrollTop();
                }

                if (this._isRootNode(this.offsetParent[0])) {
                    po = { top: 0, left: 0 };
                }

                return {
                    top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                    left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
                };
            },

            _getRelativeOffset: function _getRelativeOffset() {
                if (this.cssPosition !== "relative") {
                    return { top: 0, left: 0 };
                }

                var p = this.element.position(),
                    scrollIsRootNode = this._isRootNode(this.scrollParent[0]);

                return {
                    top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0),
                    left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0)
                };
            },

            _cacheMargins: function _cacheMargins() {
                this.margins = {
                    left: parseInt(this.element.css("marginLeft"), 10) || 0,
                    top: parseInt(this.element.css("marginTop"), 10) || 0,
                    right: parseInt(this.element.css("marginRight"), 10) || 0,
                    bottom: parseInt(this.element.css("marginBottom"), 10) || 0
                };
            },

            _cacheHelperProportions: function _cacheHelperProportions() {
                this.helperProportions = {
                    width: this.helper.outerWidth(),
                    height: this.helper.outerHeight()
                };
            },

            _setContainment: function _setContainment() {

                var isUserScrollable,
                    c,
                    ce,
                    o = this.options,
                    document = this.document[0];

                this.relativeContainer = null;

                if (!o.containment) {
                    this.containment = null;
                    return;
                }

                if (o.containment === "window") {
                    this.containment = [$(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                    return;
                }

                if (o.containment === "document") {
                    this.containment = [0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                    return;
                }

                if (o.containment.constructor === Array) {
                    this.containment = o.containment;
                    return;
                }

                if (o.containment === "parent") {
                    o.containment = this.helper[0].parentNode;
                }

                c = $(o.containment);
                ce = c[0];

                if (!ce) {
                    return;
                }

                isUserScrollable = /(scroll|auto)/.test(c.css("overflow"));

                this.containment = [(parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"), 10) || 0), (isUserScrollable ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (isUserScrollable ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];
                this.relativeContainer = c;
            },

            _convertPositionTo: function _convertPositionTo(d, pos) {

                if (!pos) {
                    pos = this.position;
                }

                var mod = d === "absolute" ? 1 : -1,
                    scrollIsRootNode = this._isRootNode(this.scrollParent[0]);

                return {
                    top: pos.top + // The absolute mouse position
                    this.offset.relative.top * mod + // Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.parent.top * mod - // The offsetParent's offset without borders (offset + border)
                    (this.cssPosition === "fixed" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod,
                    left: pos.left + // The absolute mouse position
                    this.offset.relative.left * mod + // Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.parent.left * mod - // The offsetParent's offset without borders (offset + border)
                    (this.cssPosition === "fixed" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod
                };
            },

            _generatePosition: function _generatePosition(event, constrainPosition) {

                var containment,
                    co,
                    top,
                    left,
                    o = this.options,
                    scrollIsRootNode = this._isRootNode(this.scrollParent[0]),
                    pageX = event.pageX,
                    pageY = event.pageY;

                // Cache the scroll
                if (!scrollIsRootNode || !this.offset.scroll) {
                    this.offset.scroll = {
                        top: this.scrollParent.scrollTop(),
                        left: this.scrollParent.scrollLeft()
                    };
                }

                /*
                 * - Position constraining -
                 * Constrain the position to a mix of grid, containment.
                 */

                // If we are not dragging yet, we won't check for options
                if (constrainPosition) {
                    if (this.containment) {
                        if (this.relativeContainer) {
                            co = this.relativeContainer.offset();
                            containment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top];
                        } else {
                            containment = this.containment;
                        }

                        if (event.pageX - this.offset.click.left < containment[0]) {
                            pageX = containment[0] + this.offset.click.left;
                        }
                        if (event.pageY - this.offset.click.top < containment[1]) {
                            pageY = containment[1] + this.offset.click.top;
                        }
                        if (event.pageX - this.offset.click.left > containment[2]) {
                            pageX = containment[2] + this.offset.click.left;
                        }
                        if (event.pageY - this.offset.click.top > containment[3]) {
                            pageY = containment[3] + this.offset.click.top;
                        }
                    }

                    if (o.grid) {
                        //Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
                        top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                        pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;

                        left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                        pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
                    }

                    if (o.axis === "y") {
                        pageX = this.originalPageX;
                    }

                    if (o.axis === "x") {
                        pageY = this.originalPageY;
                    }
                }

                return {
                    top: pageY - // The absolute mouse position
                    this.offset.click.top - // Click offset (relative to the element)
                    this.offset.relative.top - // Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.parent.top + ( // The offsetParent's offset without borders (offset + border)
                    this.cssPosition === "fixed" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top),
                    left: pageX - // The absolute mouse position
                    this.offset.click.left - // Click offset (relative to the element)
                    this.offset.relative.left - // Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.parent.left + ( // The offsetParent's offset without borders (offset + border)
                    this.cssPosition === "fixed" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)
                };
            },

            _clear: function _clear() {
                this.helper.removeClass("ui-draggable-dragging");
                if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
                    this.helper.remove();
                }
                this.helper = null;
                this.cancelHelperRemoval = false;
                if (this.destroyOnClear) {
                    this.destroy();
                }
            },

            _normalizeRightBottom: function _normalizeRightBottom() {
                if (this.options.axis !== "y" && this.helper.css("right") !== "auto") {
                    this.helper.width(this.helper.width());
                    this.helper.css("right", "auto");
                }
                if (this.options.axis !== "x" && this.helper.css("bottom") !== "auto") {
                    this.helper.height(this.helper.height());
                    this.helper.css("bottom", "auto");
                }
            },

            // From now on bulk stuff - mainly helpers

            _trigger: function _trigger(type, event, ui) {
                ui = ui || this._uiHash();
                $.ui.plugin.call(this, type, [event, ui, this], true);

                // Absolute position and offset (see #6884 ) have to be recalculated after plugins
                if (/^(drag|start|stop)/.test(type)) {
                    this.positionAbs = this._convertPositionTo("absolute");
                    ui.offset = this.positionAbs;
                }
                return $.Widget.prototype._trigger.call(this, type, event, ui);
            },

            plugins: {},

            _uiHash: function _uiHash() {
                return {
                    helper: this.helper,
                    position: this.position,
                    originalPosition: this.originalPosition,
                    offset: this.positionAbs
                };
            }

        });

        $.ui.plugin.add("draggable", "connectToSortable", {
            start: function start(event, ui, draggable) {
                var uiSortable = $.extend({}, ui, {
                    item: draggable.element
                });

                draggable.sortables = [];
                $(draggable.options.connectToSortable).each(function () {
                    var sortable = $(this).sortable("instance");

                    if (sortable && !sortable.options.disabled) {
                        draggable.sortables.push(sortable);

                        // refreshPositions is called at drag start to refresh the containerCache
                        // which is used in drag. This ensures it's initialized and synchronized
                        // with any changes that might have happened on the page since initialization.
                        sortable.refreshPositions();
                        sortable._trigger("activate", event, uiSortable);
                    }
                });
            },
            stop: function stop(event, ui, draggable) {
                var uiSortable = $.extend({}, ui, {
                    item: draggable.element
                });

                draggable.cancelHelperRemoval = false;

                $.each(draggable.sortables, function () {
                    var sortable = this;

                    if (sortable.isOver) {
                        sortable.isOver = 0;

                        // Allow this sortable to handle removing the helper
                        draggable.cancelHelperRemoval = true;
                        sortable.cancelHelperRemoval = false;

                        // Use _storedCSS To restore properties in the sortable,
                        // as this also handles revert (#9675) since the draggable
                        // may have modified them in unexpected ways (#8809)
                        sortable._storedCSS = {
                            position: sortable.placeholder.css("position"),
                            top: sortable.placeholder.css("top"),
                            left: sortable.placeholder.css("left")
                        };

                        sortable._mouseStop(event);

                        // Once drag has ended, the sortable should return to using
                        // its original helper, not the shared helper from draggable
                        sortable.options.helper = sortable.options._helper;
                    } else {
                        // Prevent this Sortable from removing the helper.
                        // However, don't set the draggable to remove the helper
                        // either as another connected Sortable may yet handle the removal.
                        sortable.cancelHelperRemoval = true;

                        sortable._trigger("deactivate", event, uiSortable);
                    }
                });
            },
            drag: function drag(event, ui, draggable) {
                $.each(draggable.sortables, function () {
                    var innermostIntersecting = false,
                        sortable = this;

                    // Copy over variables that sortable's _intersectsWith uses
                    sortable.positionAbs = draggable.positionAbs;
                    sortable.helperProportions = draggable.helperProportions;
                    sortable.offset.click = draggable.offset.click;

                    if (sortable._intersectsWith(sortable.containerCache)) {
                        innermostIntersecting = true;

                        $.each(draggable.sortables, function () {
                            // Copy over variables that sortable's _intersectsWith uses
                            this.positionAbs = draggable.positionAbs;
                            this.helperProportions = draggable.helperProportions;
                            this.offset.click = draggable.offset.click;

                            if (this !== sortable && this._intersectsWith(this.containerCache) && $.contains(sortable.element[0], this.element[0])) {
                                innermostIntersecting = false;
                            }

                            return innermostIntersecting;
                        });
                    }

                    if (innermostIntersecting) {
                        // If it intersects, we use a little isOver variable and set it once,
                        // so that the move-in stuff gets fired only once.
                        if (!sortable.isOver) {
                            sortable.isOver = 1;

                            // Store draggable's parent in case we need to reappend to it later.
                            draggable._parent = ui.helper.parent();

                            sortable.currentItem = ui.helper.appendTo(sortable.element).data("ui-sortable-item", true);

                            // Store helper option to later restore it
                            sortable.options._helper = sortable.options.helper;

                            sortable.options.helper = function () {
                                return ui.helper[0];
                            };

                            // Fire the start events of the sortable with our passed browser event,
                            // and our own helper (so it doesn't create a new one)
                            event.target = sortable.currentItem[0];
                            sortable._mouseCapture(event, true);
                            sortable._mouseStart(event, true, true);

                            // Because the browser event is way off the new appended portlet,
                            // modify necessary variables to reflect the changes
                            sortable.offset.click.top = draggable.offset.click.top;
                            sortable.offset.click.left = draggable.offset.click.left;
                            sortable.offset.parent.left -= draggable.offset.parent.left - sortable.offset.parent.left;
                            sortable.offset.parent.top -= draggable.offset.parent.top - sortable.offset.parent.top;

                            draggable._trigger("toSortable", event);

                            // Inform draggable that the helper is in a valid drop zone,
                            // used solely in the revert option to handle "valid/invalid".
                            draggable.dropped = sortable.element;

                            // Need to refreshPositions of all sortables in the case that
                            // adding to one sortable changes the location of the other sortables (#9675)
                            $.each(draggable.sortables, function () {
                                this.refreshPositions();
                            });

                            // hack so receive/update callbacks work (mostly)
                            draggable.currentItem = draggable.element;
                            sortable.fromOutside = draggable;
                        }

                        if (sortable.currentItem) {
                            sortable._mouseDrag(event);
                            // Copy the sortable's position because the draggable's can potentially reflect
                            // a relative position, while sortable is always absolute, which the dragged
                            // element has now become. (#8809)
                            ui.position = sortable.position;
                        }
                    } else {
                        // If it doesn't intersect with the sortable, and it intersected before,
                        // we fake the drag stop of the sortable, but make sure it doesn't remove
                        // the helper by using cancelHelperRemoval.
                        if (sortable.isOver) {

                            sortable.isOver = 0;
                            sortable.cancelHelperRemoval = true;

                            // Calling sortable's mouseStop would trigger a revert,
                            // so revert must be temporarily false until after mouseStop is called.
                            sortable.options._revert = sortable.options.revert;
                            sortable.options.revert = false;

                            sortable._trigger("out", event, sortable._uiHash(sortable));
                            sortable._mouseStop(event, true);

                            // restore sortable behaviors that were modfied
                            // when the draggable entered the sortable area (#9481)
                            sortable.options.revert = sortable.options._revert;
                            sortable.options.helper = sortable.options._helper;

                            if (sortable.placeholder) {
                                sortable.placeholder.remove();
                            }

                            // Restore and recalculate the draggable's offset considering the sortable
                            // may have modified them in unexpected ways. (#8809, #10669)
                            ui.helper.appendTo(draggable._parent);
                            draggable._refreshOffsets(event);
                            ui.position = draggable._generatePosition(event, true);

                            draggable._trigger("fromSortable", event);

                            // Inform draggable that the helper is no longer in a valid drop zone
                            draggable.dropped = false;

                            // Need to refreshPositions of all sortables just in case removing
                            // from one sortable changes the location of other sortables (#9675)
                            $.each(draggable.sortables, function () {
                                this.refreshPositions();
                            });
                        }
                    }
                });
            }
        });

        $.ui.plugin.add("draggable", "cursor", {
            start: function start(event, ui, instance) {
                var t = $("body"),
                    o = instance.options;

                if (t.css("cursor")) {
                    o._cursor = t.css("cursor");
                }
                t.css("cursor", o.cursor);
            },
            stop: function stop(event, ui, instance) {
                var o = instance.options;
                if (o._cursor) {
                    $("body").css("cursor", o._cursor);
                }
            }
        });

        $.ui.plugin.add("draggable", "opacity", {
            start: function start(event, ui, instance) {
                var t = $(ui.helper),
                    o = instance.options;
                if (t.css("opacity")) {
                    o._opacity = t.css("opacity");
                }
                t.css("opacity", o.opacity);
            },
            stop: function stop(event, ui, instance) {
                var o = instance.options;
                if (o._opacity) {
                    $(ui.helper).css("opacity", o._opacity);
                }
            }
        });

        $.ui.plugin.add("draggable", "scroll", {
            start: function start(event, ui, i) {
                if (!i.scrollParentNotHidden) {
                    i.scrollParentNotHidden = i.helper.scrollParent(false);
                }

                if (i.scrollParentNotHidden[0] !== i.document[0] && i.scrollParentNotHidden[0].tagName !== "HTML") {
                    i.overflowOffset = i.scrollParentNotHidden.offset();
                }
            },
            drag: function drag(event, ui, i) {

                var o = i.options,
                    scrolled = false,
                    scrollParent = i.scrollParentNotHidden[0],
                    document = i.document[0];

                if (scrollParent !== document && scrollParent.tagName !== "HTML") {
                    if (!o.axis || o.axis !== "x") {
                        if (i.overflowOffset.top + scrollParent.offsetHeight - event.pageY < o.scrollSensitivity) {
                            scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
                        } else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
                            scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
                        }
                    }

                    if (!o.axis || o.axis !== "y") {
                        if (i.overflowOffset.left + scrollParent.offsetWidth - event.pageX < o.scrollSensitivity) {
                            scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
                        } else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
                            scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
                        }
                    }
                } else {

                    if (!o.axis || o.axis !== "x") {
                        if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
                            scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                        } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
                            scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                        }
                    }

                    if (!o.axis || o.axis !== "y") {
                        if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
                            scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                        } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
                            scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                        }
                    }
                }

                if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
                    $.ui.ddmanager.prepareOffsets(i, event);
                }
            }
        });

        $.ui.plugin.add("draggable", "snap", {
            start: function start(event, ui, i) {

                var o = i.options;

                i.snapElements = [];

                $(o.snap.constructor !== String ? o.snap.items || ":data(ui-draggable)" : o.snap).each(function () {
                    var $t = $(this),
                        $o = $t.offset();
                    if (this !== i.element[0]) {
                        i.snapElements.push({
                            item: this,
                            width: $t.outerWidth(), height: $t.outerHeight(),
                            top: $o.top, left: $o.left
                        });
                    }
                });
            },
            drag: function drag(event, ui, inst) {

                var ts,
                    bs,
                    ls,
                    rs,
                    l,
                    r,
                    t,
                    b,
                    i,
                    first,
                    o = inst.options,
                    d = o.snapTolerance,
                    x1 = ui.offset.left,
                    x2 = x1 + inst.helperProportions.width,
                    y1 = ui.offset.top,
                    y2 = y1 + inst.helperProportions.height;

                for (i = inst.snapElements.length - 1; i >= 0; i--) {

                    l = inst.snapElements[i].left - inst.margins.left;
                    r = l + inst.snapElements[i].width;
                    t = inst.snapElements[i].top - inst.margins.top;
                    b = t + inst.snapElements[i].height;

                    if (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {
                        if (inst.snapElements[i].snapping) {
                            inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item }));
                        }
                        inst.snapElements[i].snapping = false;
                        continue;
                    }

                    if (o.snapMode !== "inner") {
                        ts = Math.abs(t - y2) <= d;
                        bs = Math.abs(b - y1) <= d;
                        ls = Math.abs(l - x2) <= d;
                        rs = Math.abs(r - x1) <= d;
                        if (ts) {
                            ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top;
                        }
                        if (bs) {
                            ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top;
                        }
                        if (ls) {
                            ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left;
                        }
                        if (rs) {
                            ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left;
                        }
                    }

                    first = ts || bs || ls || rs;

                    if (o.snapMode !== "outer") {
                        ts = Math.abs(t - y1) <= d;
                        bs = Math.abs(b - y2) <= d;
                        ls = Math.abs(l - x1) <= d;
                        rs = Math.abs(r - x2) <= d;
                        if (ts) {
                            ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top;
                        }
                        if (bs) {
                            ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top;
                        }
                        if (ls) {
                            ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left;
                        }
                        if (rs) {
                            ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left;
                        }
                    }

                    if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
                        inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item }));
                    }
                    inst.snapElements[i].snapping = ts || bs || ls || rs || first;
                }
            }
        });

        $.ui.plugin.add("draggable", "stack", {
            start: function start(event, ui, instance) {
                var min,
                    o = instance.options,
                    group = $.makeArray($(o.stack)).sort(function (a, b) {
                    return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
                });

                if (!group.length) {
                    return;
                }

                min = parseInt($(group[0]).css("zIndex"), 10) || 0;
                $(group).each(function (i) {
                    $(this).css("zIndex", min + i);
                });
                this.css("zIndex", min + group.length);
            }
        });

        $.ui.plugin.add("draggable", "zIndex", {
            start: function start(event, ui, instance) {
                var t = $(ui.helper),
                    o = instance.options;

                if (t.css("zIndex")) {
                    o._zIndex = t.css("zIndex");
                }
                t.css("zIndex", o.zIndex);
            },
            stop: function stop(event, ui, instance) {
                var o = instance.options;

                if (o._zIndex) {
                    $(ui.helper).css("zIndex", o._zIndex);
                }
            }
        });

        var draggable = $.ui.draggable;

        /*!
         * jQuery UI Resizable 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/resizable/
         */

        $.widget("ui.resizable", $.ui.mouse, {
            version: "1.11.4",
            widgetEventPrefix: "resize",
            options: {
                alsoResize: false,
                animate: false,
                animateDuration: "slow",
                animateEasing: "swing",
                aspectRatio: false,
                autoHide: false,
                containment: false,
                ghost: false,
                grid: false,
                handles: "e,s,se",
                helper: false,
                maxHeight: null,
                maxWidth: null,
                minHeight: 10,
                minWidth: 10,
                // See #7960
                zIndex: 90,

                // callbacks
                resize: null,
                start: null,
                stop: null
            },

            _num: function _num(value) {
                return parseInt(value, 10) || 0;
            },

            _isNumber: function _isNumber(value) {
                return !isNaN(parseInt(value, 10));
            },

            _hasScroll: function _hasScroll(el, a) {

                if ($(el).css("overflow") === "hidden") {
                    return false;
                }

                var scroll = a && a === "left" ? "scrollLeft" : "scrollTop",
                    has = false;

                if (el[scroll] > 0) {
                    return true;
                }

                // TODO: determine which cases actually cause this to happen
                // if the element doesn't have the scroll set, see if it's possible to
                // set the scroll
                el[scroll] = 1;
                has = el[scroll] > 0;
                el[scroll] = 0;
                return has;
            },

            _create: function _create() {

                var n,
                    i,
                    handle,
                    axis,
                    hname,
                    that = this,
                    o = this.options;
                this.element.addClass("ui-resizable");

                $.extend(this, {
                    _aspectRatio: !!o.aspectRatio,
                    aspectRatio: o.aspectRatio,
                    originalElement: this.element,
                    _proportionallyResizeElements: [],
                    _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
                });

                // Wrap the element if it cannot hold child nodes
                if (this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)) {

                    this.element.wrap($("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
                        position: this.element.css("position"),
                        width: this.element.outerWidth(),
                        height: this.element.outerHeight(),
                        top: this.element.css("top"),
                        left: this.element.css("left")
                    }));

                    this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance"));

                    this.elementIsWrapper = true;

                    this.element.css({
                        marginLeft: this.originalElement.css("marginLeft"),
                        marginTop: this.originalElement.css("marginTop"),
                        marginRight: this.originalElement.css("marginRight"),
                        marginBottom: this.originalElement.css("marginBottom")
                    });
                    this.originalElement.css({
                        marginLeft: 0,
                        marginTop: 0,
                        marginRight: 0,
                        marginBottom: 0
                    });
                    // support: Safari
                    // Prevent Safari textarea resize
                    this.originalResizeStyle = this.originalElement.css("resize");
                    this.originalElement.css("resize", "none");

                    this._proportionallyResizeElements.push(this.originalElement.css({
                        position: "static",
                        zoom: 1,
                        display: "block"
                    }));

                    // support: IE9
                    // avoid IE jump (hard set the margin)
                    this.originalElement.css({ margin: this.originalElement.css("margin") });

                    this._proportionallyResize();
                }

                this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : {
                    n: ".ui-resizable-n",
                    e: ".ui-resizable-e",
                    s: ".ui-resizable-s",
                    w: ".ui-resizable-w",
                    se: ".ui-resizable-se",
                    sw: ".ui-resizable-sw",
                    ne: ".ui-resizable-ne",
                    nw: ".ui-resizable-nw"
                });

                this._handles = $();
                if (this.handles.constructor === String) {

                    if (this.handles === "all") {
                        this.handles = "n,e,s,w,se,sw,ne,nw";
                    }

                    n = this.handles.split(",");
                    this.handles = {};

                    for (i = 0; i < n.length; i++) {

                        handle = $.trim(n[i]);
                        hname = "ui-resizable-" + handle;
                        axis = $("<div class='ui-resizable-handle " + hname + "'></div>");

                        axis.css({ zIndex: o.zIndex });

                        // TODO : What's going on here?
                        if ("se" === handle) {
                            axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
                        }

                        this.handles[handle] = ".ui-resizable-" + handle;
                        this.element.append(axis);
                    }
                }

                this._renderAxis = function (target) {

                    var i, axis, padPos, padWrapper;

                    target = target || this.element;

                    for (i in this.handles) {

                        if (this.handles[i].constructor === String) {
                            this.handles[i] = this.element.children(this.handles[i]).first().show();
                        } else if (this.handles[i].jquery || this.handles[i].nodeType) {
                            this.handles[i] = $(this.handles[i]);
                            this._on(this.handles[i], { "mousedown": that._mouseDown });
                        }

                        if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)) {

                            axis = $(this.handles[i], this.element);

                            padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

                            padPos = ["padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left"].join("");

                            target.css(padPos, padWrapper);

                            this._proportionallyResize();
                        }

                        this._handles = this._handles.add(this.handles[i]);
                    }
                };

                // TODO: make renderAxis a prototype function
                this._renderAxis(this.element);

                this._handles = this._handles.add(this.element.find(".ui-resizable-handle"));
                this._handles.disableSelection();

                this._handles.mouseover(function () {
                    if (!that.resizing) {
                        if (this.className) {
                            axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
                        }
                        that.axis = axis && axis[1] ? axis[1] : "se";
                    }
                });

                if (o.autoHide) {
                    this._handles.hide();
                    $(this.element).addClass("ui-resizable-autohide").mouseenter(function () {
                        if (o.disabled) {
                            return;
                        }
                        $(this).removeClass("ui-resizable-autohide");
                        that._handles.show();
                    }).mouseleave(function () {
                        if (o.disabled) {
                            return;
                        }
                        if (!that.resizing) {
                            $(this).addClass("ui-resizable-autohide");
                            that._handles.hide();
                        }
                    });
                }

                this._mouseInit();
            },

            _destroy: function _destroy() {

                this._mouseDestroy();

                var wrapper,
                    _destroy = function _destroy(exp) {
                    $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
                };

                // TODO: Unwrap at same DOM position
                if (this.elementIsWrapper) {
                    _destroy(this.element);
                    wrapper = this.element;
                    this.originalElement.css({
                        position: wrapper.css("position"),
                        width: wrapper.outerWidth(),
                        height: wrapper.outerHeight(),
                        top: wrapper.css("top"),
                        left: wrapper.css("left")
                    }).insertAfter(wrapper);
                    wrapper.remove();
                }

                this.originalElement.css("resize", this.originalResizeStyle);
                _destroy(this.originalElement);

                return this;
            },

            _mouseCapture: function _mouseCapture(event) {
                var i,
                    handle,
                    capture = false;

                for (i in this.handles) {
                    handle = $(this.handles[i])[0];
                    if (handle === event.target || $.contains(handle, event.target)) {
                        capture = true;
                    }
                }

                return !this.options.disabled && capture;
            },

            _mouseStart: function _mouseStart(event) {

                var curleft,
                    curtop,
                    cursor,
                    o = this.options,
                    el = this.element;

                this.resizing = true;

                this._renderProxy();

                curleft = this._num(this.helper.css("left"));
                curtop = this._num(this.helper.css("top"));

                if (o.containment) {
                    curleft += $(o.containment).scrollLeft() || 0;
                    curtop += $(o.containment).scrollTop() || 0;
                }

                this.offset = this.helper.offset();
                this.position = { left: curleft, top: curtop };

                this.size = this._helper ? {
                    width: this.helper.width(),
                    height: this.helper.height()
                } : {
                    width: el.width(),
                    height: el.height()
                };

                this.originalSize = this._helper ? {
                    width: el.outerWidth(),
                    height: el.outerHeight()
                } : {
                    width: el.width(),
                    height: el.height()
                };

                this.sizeDiff = {
                    width: el.outerWidth() - el.width(),
                    height: el.outerHeight() - el.height()
                };

                this.originalPosition = { left: curleft, top: curtop };
                this.originalMousePosition = { left: event.pageX, top: event.pageY };

                this.aspectRatio = typeof o.aspectRatio === "number" ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;

                cursor = $(".ui-resizable-" + this.axis).css("cursor");
                $("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);

                el.addClass("ui-resizable-resizing");
                this._propagate("start", event);
                return true;
            },

            _mouseDrag: function _mouseDrag(event) {

                var data,
                    props,
                    smp = this.originalMousePosition,
                    a = this.axis,
                    dx = event.pageX - smp.left || 0,
                    dy = event.pageY - smp.top || 0,
                    trigger = this._change[a];

                this._updatePrevProperties();

                if (!trigger) {
                    return false;
                }

                data = trigger.apply(this, [event, dx, dy]);

                this._updateVirtualBoundaries(event.shiftKey);
                if (this._aspectRatio || event.shiftKey) {
                    data = this._updateRatio(data, event);
                }

                data = this._respectSize(data, event);

                this._updateCache(data);

                this._propagate("resize", event);

                props = this._applyChanges();

                if (!this._helper && this._proportionallyResizeElements.length) {
                    this._proportionallyResize();
                }

                if (!$.isEmptyObject(props)) {
                    this._updatePrevProperties();
                    this._trigger("resize", event, this.ui());
                    this._applyChanges();
                }

                return false;
            },

            _mouseStop: function _mouseStop(event) {

                this.resizing = false;
                var pr,
                    ista,
                    soffseth,
                    soffsetw,
                    s,
                    left,
                    top,
                    o = this.options,
                    that = this;

                if (this._helper) {

                    pr = this._proportionallyResizeElements;
                    ista = pr.length && /textarea/i.test(pr[0].nodeName);
                    soffseth = ista && this._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;
                    soffsetw = ista ? 0 : that.sizeDiff.width;

                    s = {
                        width: that.helper.width() - soffsetw,
                        height: that.helper.height() - soffseth
                    };
                    left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null;
                    top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null;

                    if (!o.animate) {
                        this.element.css($.extend(s, { top: top, left: left }));
                    }

                    that.helper.height(that.size.height);
                    that.helper.width(that.size.width);

                    if (this._helper && !o.animate) {
                        this._proportionallyResize();
                    }
                }

                $("body").css("cursor", "auto");

                this.element.removeClass("ui-resizable-resizing");

                this._propagate("stop", event);

                if (this._helper) {
                    this.helper.remove();
                }

                return false;
            },

            _updatePrevProperties: function _updatePrevProperties() {
                this.prevPosition = {
                    top: this.position.top,
                    left: this.position.left
                };
                this.prevSize = {
                    width: this.size.width,
                    height: this.size.height
                };
            },

            _applyChanges: function _applyChanges() {
                var props = {};

                if (this.position.top !== this.prevPosition.top) {
                    props.top = this.position.top + "px";
                }
                if (this.position.left !== this.prevPosition.left) {
                    props.left = this.position.left + "px";
                }
                if (this.size.width !== this.prevSize.width) {
                    props.width = this.size.width + "px";
                }
                if (this.size.height !== this.prevSize.height) {
                    props.height = this.size.height + "px";
                }

                this.helper.css(props);

                return props;
            },

            _updateVirtualBoundaries: function _updateVirtualBoundaries(forceAspectRatio) {
                var pMinWidth,
                    pMaxWidth,
                    pMinHeight,
                    pMaxHeight,
                    b,
                    o = this.options;

                b = {
                    minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,
                    maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity,
                    minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,
                    maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity
                };

                if (this._aspectRatio || forceAspectRatio) {
                    pMinWidth = b.minHeight * this.aspectRatio;
                    pMinHeight = b.minWidth / this.aspectRatio;
                    pMaxWidth = b.maxHeight * this.aspectRatio;
                    pMaxHeight = b.maxWidth / this.aspectRatio;

                    if (pMinWidth > b.minWidth) {
                        b.minWidth = pMinWidth;
                    }
                    if (pMinHeight > b.minHeight) {
                        b.minHeight = pMinHeight;
                    }
                    if (pMaxWidth < b.maxWidth) {
                        b.maxWidth = pMaxWidth;
                    }
                    if (pMaxHeight < b.maxHeight) {
                        b.maxHeight = pMaxHeight;
                    }
                }
                this._vBoundaries = b;
            },

            _updateCache: function _updateCache(data) {
                this.offset = this.helper.offset();
                if (this._isNumber(data.left)) {
                    this.position.left = data.left;
                }
                if (this._isNumber(data.top)) {
                    this.position.top = data.top;
                }
                if (this._isNumber(data.height)) {
                    this.size.height = data.height;
                }
                if (this._isNumber(data.width)) {
                    this.size.width = data.width;
                }
            },

            _updateRatio: function _updateRatio(data) {

                var cpos = this.position,
                    csize = this.size,
                    a = this.axis;

                if (this._isNumber(data.height)) {
                    data.width = data.height * this.aspectRatio;
                } else if (this._isNumber(data.width)) {
                    data.height = data.width / this.aspectRatio;
                }

                if (a === "sw") {
                    data.left = cpos.left + (csize.width - data.width);
                    data.top = null;
                }
                if (a === "nw") {
                    data.top = cpos.top + (csize.height - data.height);
                    data.left = cpos.left + (csize.width - data.width);
                }

                return data;
            },

            _respectSize: function _respectSize(data) {

                var o = this._vBoundaries,
                    a = this.axis,
                    ismaxw = this._isNumber(data.width) && o.maxWidth && o.maxWidth < data.width,
                    ismaxh = this._isNumber(data.height) && o.maxHeight && o.maxHeight < data.height,
                    isminw = this._isNumber(data.width) && o.minWidth && o.minWidth > data.width,
                    isminh = this._isNumber(data.height) && o.minHeight && o.minHeight > data.height,
                    dw = this.originalPosition.left + this.originalSize.width,
                    dh = this.position.top + this.size.height,
                    cw = /sw|nw|w/.test(a),
                    ch = /nw|ne|n/.test(a);
                if (isminw) {
                    data.width = o.minWidth;
                }
                if (isminh) {
                    data.height = o.minHeight;
                }
                if (ismaxw) {
                    data.width = o.maxWidth;
                }
                if (ismaxh) {
                    data.height = o.maxHeight;
                }

                if (isminw && cw) {
                    data.left = dw - o.minWidth;
                }
                if (ismaxw && cw) {
                    data.left = dw - o.maxWidth;
                }
                if (isminh && ch) {
                    data.top = dh - o.minHeight;
                }
                if (ismaxh && ch) {
                    data.top = dh - o.maxHeight;
                }

                // Fixing jump error on top/left - bug #2330
                if (!data.width && !data.height && !data.left && data.top) {
                    data.top = null;
                } else if (!data.width && !data.height && !data.top && data.left) {
                    data.left = null;
                }

                return data;
            },

            _getPaddingPlusBorderDimensions: function _getPaddingPlusBorderDimensions(element) {
                var i = 0,
                    widths = [],
                    borders = [element.css("borderTopWidth"), element.css("borderRightWidth"), element.css("borderBottomWidth"), element.css("borderLeftWidth")],
                    paddings = [element.css("paddingTop"), element.css("paddingRight"), element.css("paddingBottom"), element.css("paddingLeft")];

                for (; i < 4; i++) {
                    widths[i] = parseInt(borders[i], 10) || 0;
                    widths[i] += parseInt(paddings[i], 10) || 0;
                }

                return {
                    height: widths[0] + widths[2],
                    width: widths[1] + widths[3]
                };
            },

            _proportionallyResize: function _proportionallyResize() {

                if (!this._proportionallyResizeElements.length) {
                    return;
                }

                var prel,
                    i = 0,
                    element = this.helper || this.element;

                for (; i < this._proportionallyResizeElements.length; i++) {

                    prel = this._proportionallyResizeElements[i];

                    // TODO: Seems like a bug to cache this.outerDimensions
                    // considering that we are in a loop.
                    if (!this.outerDimensions) {
                        this.outerDimensions = this._getPaddingPlusBorderDimensions(prel);
                    }

                    prel.css({
                        height: element.height() - this.outerDimensions.height || 0,
                        width: element.width() - this.outerDimensions.width || 0
                    });
                }
            },

            _renderProxy: function _renderProxy() {

                var el = this.element,
                    o = this.options;
                this.elementOffset = el.offset();

                if (this._helper) {

                    this.helper = this.helper || $("<div style='overflow:hidden;'></div>");

                    this.helper.addClass(this._helper).css({
                        width: this.element.outerWidth() - 1,
                        height: this.element.outerHeight() - 1,
                        position: "absolute",
                        left: this.elementOffset.left + "px",
                        top: this.elementOffset.top + "px",
                        zIndex: ++o.zIndex //TODO: Don't modify option
                    });

                    this.helper.appendTo("body").disableSelection();
                } else {
                    this.helper = this.element;
                }
            },

            _change: {
                e: function e(event, dx) {
                    return { width: this.originalSize.width + dx };
                },
                w: function w(event, dx) {
                    var cs = this.originalSize,
                        sp = this.originalPosition;
                    return { left: sp.left + dx, width: cs.width - dx };
                },
                n: function n(event, dx, dy) {
                    var cs = this.originalSize,
                        sp = this.originalPosition;
                    return { top: sp.top + dy, height: cs.height - dy };
                },
                s: function s(event, dx, dy) {
                    return { height: this.originalSize.height + dy };
                },
                se: function se(event, dx, dy) {
                    return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
                },
                sw: function sw(event, dx, dy) {
                    return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
                },
                ne: function ne(event, dx, dy) {
                    return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
                },
                nw: function nw(event, dx, dy) {
                    return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
                }
            },

            _propagate: function _propagate(n, event) {
                $.ui.plugin.call(this, n, [event, this.ui()]);
                n !== "resize" && this._trigger(n, event, this.ui());
            },

            plugins: {},

            ui: function ui() {
                return {
                    originalElement: this.originalElement,
                    element: this.element,
                    helper: this.helper,
                    position: this.position,
                    size: this.size,
                    originalSize: this.originalSize,
                    originalPosition: this.originalPosition
                };
            }

        });

        /*
         * Resizable Extensions
         */

        $.ui.plugin.add("resizable", "animate", {

            stop: function stop(event) {
                var that = $(this).resizable("instance"),
                    o = that.options,
                    pr = that._proportionallyResizeElements,
                    ista = pr.length && /textarea/i.test(pr[0].nodeName),
                    soffseth = ista && that._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height,
                    soffsetw = ista ? 0 : that.sizeDiff.width,
                    style = { width: that.size.width - soffsetw, height: that.size.height - soffseth },
                    left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null,
                    top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null;

                that.element.animate($.extend(style, top && left ? { top: top, left: left } : {}), {
                    duration: o.animateDuration,
                    easing: o.animateEasing,
                    step: function step() {

                        var data = {
                            width: parseInt(that.element.css("width"), 10),
                            height: parseInt(that.element.css("height"), 10),
                            top: parseInt(that.element.css("top"), 10),
                            left: parseInt(that.element.css("left"), 10)
                        };

                        if (pr && pr.length) {
                            $(pr[0]).css({ width: data.width, height: data.height });
                        }

                        // propagating resize, and updating values for each animation step
                        that._updateCache(data);
                        that._propagate("resize", event);
                    }
                });
            }

        });

        $.ui.plugin.add("resizable", "containment", {

            start: function start() {
                var element,
                    p,
                    co,
                    ch,
                    cw,
                    width,
                    height,
                    that = $(this).resizable("instance"),
                    o = that.options,
                    el = that.element,
                    oc = o.containment,
                    ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;

                if (!ce) {
                    return;
                }

                that.containerElement = $(ce);

                if (/document/.test(oc) || oc === document) {
                    that.containerOffset = {
                        left: 0,
                        top: 0
                    };
                    that.containerPosition = {
                        left: 0,
                        top: 0
                    };

                    that.parentData = {
                        element: $(document),
                        left: 0,
                        top: 0,
                        width: $(document).width(),
                        height: $(document).height() || document.body.parentNode.scrollHeight
                    };
                } else {
                    element = $(ce);
                    p = [];
                    $(["Top", "Right", "Left", "Bottom"]).each(function (i, name) {
                        p[i] = that._num(element.css("padding" + name));
                    });

                    that.containerOffset = element.offset();
                    that.containerPosition = element.position();
                    that.containerSize = {
                        height: element.innerHeight() - p[3],
                        width: element.innerWidth() - p[1]
                    };

                    co = that.containerOffset;
                    ch = that.containerSize.height;
                    cw = that.containerSize.width;
                    width = that._hasScroll(ce, "left") ? ce.scrollWidth : cw;
                    height = that._hasScroll(ce) ? ce.scrollHeight : ch;

                    that.parentData = {
                        element: ce,
                        left: co.left,
                        top: co.top,
                        width: width,
                        height: height
                    };
                }
            },

            resize: function resize(event) {
                var woset,
                    hoset,
                    isParent,
                    isOffsetRelative,
                    that = $(this).resizable("instance"),
                    o = that.options,
                    co = that.containerOffset,
                    cp = that.position,
                    pRatio = that._aspectRatio || event.shiftKey,
                    cop = {
                    top: 0,
                    left: 0
                },
                    ce = that.containerElement,
                    continueResize = true;

                if (ce[0] !== document && /static/.test(ce.css("position"))) {
                    cop = co;
                }

                if (cp.left < (that._helper ? co.left : 0)) {
                    that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);

                    if (pRatio) {
                        that.size.height = that.size.width / that.aspectRatio;
                        continueResize = false;
                    }
                    that.position.left = o.helper ? co.left : 0;
                }

                if (cp.top < (that._helper ? co.top : 0)) {
                    that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);

                    if (pRatio) {
                        that.size.width = that.size.height * that.aspectRatio;
                        continueResize = false;
                    }
                    that.position.top = that._helper ? co.top : 0;
                }

                isParent = that.containerElement.get(0) === that.element.parent().get(0);
                isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));

                if (isParent && isOffsetRelative) {
                    that.offset.left = that.parentData.left + that.position.left;
                    that.offset.top = that.parentData.top + that.position.top;
                } else {
                    that.offset.left = that.element.offset().left;
                    that.offset.top = that.element.offset().top;
                }

                woset = Math.abs(that.sizeDiff.width + (that._helper ? that.offset.left - cop.left : that.offset.left - co.left));

                hoset = Math.abs(that.sizeDiff.height + (that._helper ? that.offset.top - cop.top : that.offset.top - co.top));

                if (woset + that.size.width >= that.parentData.width) {
                    that.size.width = that.parentData.width - woset;
                    if (pRatio) {
                        that.size.height = that.size.width / that.aspectRatio;
                        continueResize = false;
                    }
                }

                if (hoset + that.size.height >= that.parentData.height) {
                    that.size.height = that.parentData.height - hoset;
                    if (pRatio) {
                        that.size.width = that.size.height * that.aspectRatio;
                        continueResize = false;
                    }
                }

                if (!continueResize) {
                    that.position.left = that.prevPosition.left;
                    that.position.top = that.prevPosition.top;
                    that.size.width = that.prevSize.width;
                    that.size.height = that.prevSize.height;
                }
            },

            stop: function stop() {
                var that = $(this).resizable("instance"),
                    o = that.options,
                    co = that.containerOffset,
                    cop = that.containerPosition,
                    ce = that.containerElement,
                    helper = $(that.helper),
                    ho = helper.offset(),
                    w = helper.outerWidth() - that.sizeDiff.width,
                    h = helper.outerHeight() - that.sizeDiff.height;

                if (that._helper && !o.animate && /relative/.test(ce.css("position"))) {
                    $(this).css({
                        left: ho.left - cop.left - co.left,
                        width: w,
                        height: h
                    });
                }

                if (that._helper && !o.animate && /static/.test(ce.css("position"))) {
                    $(this).css({
                        left: ho.left - cop.left - co.left,
                        width: w,
                        height: h
                    });
                }
            }
        });

        $.ui.plugin.add("resizable", "alsoResize", {

            start: function start() {
                var that = $(this).resizable("instance"),
                    o = that.options;

                $(o.alsoResize).each(function () {
                    var el = $(this);
                    el.data("ui-resizable-alsoresize", {
                        width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
                        left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)
                    });
                });
            },

            resize: function resize(event, ui) {
                var that = $(this).resizable("instance"),
                    o = that.options,
                    os = that.originalSize,
                    op = that.originalPosition,
                    delta = {
                    height: that.size.height - os.height || 0,
                    width: that.size.width - os.width || 0,
                    top: that.position.top - op.top || 0,
                    left: that.position.left - op.left || 0
                };

                $(o.alsoResize).each(function () {
                    var el = $(this),
                        start = $(this).data("ui-resizable-alsoresize"),
                        style = {},
                        css = el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];

                    $.each(css, function (i, prop) {
                        var sum = (start[prop] || 0) + (delta[prop] || 0);
                        if (sum && sum >= 0) {
                            style[prop] = sum || null;
                        }
                    });

                    el.css(style);
                });
            },

            stop: function stop() {
                $(this).removeData("resizable-alsoresize");
            }
        });

        $.ui.plugin.add("resizable", "ghost", {

            start: function start() {

                var that = $(this).resizable("instance"),
                    o = that.options,
                    cs = that.size;

                that.ghost = that.originalElement.clone();
                that.ghost.css({
                    opacity: 0.25,
                    display: "block",
                    position: "relative",
                    height: cs.height,
                    width: cs.width,
                    margin: 0,
                    left: 0,
                    top: 0
                }).addClass("ui-resizable-ghost").addClass(typeof o.ghost === "string" ? o.ghost : "");

                that.ghost.appendTo(that.helper);
            },

            resize: function resize() {
                var that = $(this).resizable("instance");
                if (that.ghost) {
                    that.ghost.css({
                        position: "relative",
                        height: that.size.height,
                        width: that.size.width
                    });
                }
            },

            stop: function stop() {
                var that = $(this).resizable("instance");
                if (that.ghost && that.helper) {
                    that.helper.get(0).removeChild(that.ghost.get(0));
                }
            }

        });

        $.ui.plugin.add("resizable", "grid", {

            resize: function resize() {
                var outerDimensions,
                    that = $(this).resizable("instance"),
                    o = that.options,
                    cs = that.size,
                    os = that.originalSize,
                    op = that.originalPosition,
                    a = that.axis,
                    grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid,
                    gridX = grid[0] || 1,
                    gridY = grid[1] || 1,
                    ox = Math.round((cs.width - os.width) / gridX) * gridX,
                    oy = Math.round((cs.height - os.height) / gridY) * gridY,
                    newWidth = os.width + ox,
                    newHeight = os.height + oy,
                    isMaxWidth = o.maxWidth && o.maxWidth < newWidth,
                    isMaxHeight = o.maxHeight && o.maxHeight < newHeight,
                    isMinWidth = o.minWidth && o.minWidth > newWidth,
                    isMinHeight = o.minHeight && o.minHeight > newHeight;

                o.grid = grid;

                if (isMinWidth) {
                    newWidth += gridX;
                }
                if (isMinHeight) {
                    newHeight += gridY;
                }
                if (isMaxWidth) {
                    newWidth -= gridX;
                }
                if (isMaxHeight) {
                    newHeight -= gridY;
                }

                if (/^(se|s|e)$/.test(a)) {
                    that.size.width = newWidth;
                    that.size.height = newHeight;
                } else if (/^(ne)$/.test(a)) {
                    that.size.width = newWidth;
                    that.size.height = newHeight;
                    that.position.top = op.top - oy;
                } else if (/^(sw)$/.test(a)) {
                    that.size.width = newWidth;
                    that.size.height = newHeight;
                    that.position.left = op.left - ox;
                } else {
                    if (newHeight - gridY <= 0 || newWidth - gridX <= 0) {
                        outerDimensions = that._getPaddingPlusBorderDimensions(this);
                    }

                    if (newHeight - gridY > 0) {
                        that.size.height = newHeight;
                        that.position.top = op.top - oy;
                    } else {
                        newHeight = gridY - outerDimensions.height;
                        that.size.height = newHeight;
                        that.position.top = op.top + os.height - newHeight;
                    }
                    if (newWidth - gridX > 0) {
                        that.size.width = newWidth;
                        that.position.left = op.left - ox;
                    } else {
                        newWidth = gridX - outerDimensions.width;
                        that.size.width = newWidth;
                        that.position.left = op.left + os.width - newWidth;
                    }
                }
            }

        });

        var resizable = $.ui.resizable;

        /*!
         * jQuery UI Dialog 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/dialog/
         */

        var dialog = $.widget("ui.dialog", {
            version: "1.11.4",
            options: {
                appendTo: "body",
                autoOpen: true,
                buttons: [],
                closeOnEscape: true,
                closeText: "Close",
                dialogClass: "",
                draggable: true,
                hide: null,
                height: "auto",
                maxHeight: null,
                maxWidth: null,
                minHeight: 150,
                minWidth: 150,
                modal: false,
                position: {
                    my: "center",
                    at: "center",
                    of: window,
                    collision: "fit",
                    // Ensure the titlebar is always visible
                    using: function using(pos) {
                        var topOffset = $(this).css(pos).offset().top;
                        if (topOffset < 0) {
                            $(this).css("top", pos.top - topOffset);
                        }
                    }
                },
                resizable: true,
                show: null,
                title: null,
                width: 300,

                // callbacks
                beforeClose: null,
                close: null,
                drag: null,
                dragStart: null,
                dragStop: null,
                focus: null,
                open: null,
                resize: null,
                resizeStart: null,
                resizeStop: null
            },

            sizeRelatedOptions: {
                buttons: true,
                height: true,
                maxHeight: true,
                maxWidth: true,
                minHeight: true,
                minWidth: true,
                width: true
            },

            resizableRelatedOptions: {
                maxHeight: true,
                maxWidth: true,
                minHeight: true,
                minWidth: true
            },

            _create: function _create() {
                this.originalCss = {
                    display: this.element[0].style.display,
                    width: this.element[0].style.width,
                    minHeight: this.element[0].style.minHeight,
                    maxHeight: this.element[0].style.maxHeight,
                    height: this.element[0].style.height
                };
                this.originalPosition = {
                    parent: this.element.parent(),
                    index: this.element.parent().children().index(this.element)
                };
                this.originalTitle = this.element.attr("title");
                this.options.title = this.options.title || this.originalTitle;

                this._createWrapper();

                this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog);

                this._createTitlebar();
                this._createButtonPane();

                if (this.options.draggable && $.fn.draggable) {
                    this._makeDraggable();
                }
                if (this.options.resizable && $.fn.resizable) {
                    this._makeResizable();
                }

                this._isOpen = false;

                this._trackFocus();
            },

            _init: function _init() {
                if (this.options.autoOpen) {
                    this.open();
                }
            },

            _appendTo: function _appendTo() {
                var element = this.options.appendTo;
                if (element && (element.jquery || element.nodeType)) {
                    return $(element);
                }
                return this.document.find(element || "body").eq(0);
            },

            _destroy: function _destroy() {
                var next,
                    originalPosition = this.originalPosition;

                this._untrackInstance();
                this._destroyOverlay();

                this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss)
                // Without detaching first, the following becomes really slow
                .detach();

                this.uiDialog.stop(true, true).remove();

                if (this.originalTitle) {
                    this.element.attr("title", this.originalTitle);
                }

                next = originalPosition.parent.children().eq(originalPosition.index);
                // Don't try to place the dialog next to itself (#8613)
                if (next.length && next[0] !== this.element[0]) {
                    next.before(this.element);
                } else {
                    originalPosition.parent.append(this.element);
                }
            },

            widget: function widget() {
                return this.uiDialog;
            },

            disable: $.noop,
            enable: $.noop,

            close: function close(event) {
                var activeElement,
                    that = this;

                if (!this._isOpen || this._trigger("beforeClose", event) === false) {
                    return;
                }

                this._isOpen = false;
                this._focusedElement = null;
                this._destroyOverlay();
                this._untrackInstance();

                if (!this.opener.filter(":focusable").focus().length) {

                    // support: IE9
                    // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
                    try {
                        activeElement = this.document[0].activeElement;

                        // Support: IE9, IE10
                        // If the <body> is blurred, IE will switch windows, see #4520
                        if (activeElement && activeElement.nodeName.toLowerCase() !== "body") {

                            // Hiding a focused element doesn't trigger blur in WebKit
                            // so in case we have nothing to focus on, explicitly blur the active element
                            // https://bugs.webkit.org/show_bug.cgi?id=47182
                            $(activeElement).blur();
                        }
                    } catch (error) {}
                }

                this._hide(this.uiDialog, this.options.hide, function () {
                    that._trigger("close", event);
                });
            },

            isOpen: function isOpen() {
                return this._isOpen;
            },

            moveToTop: function moveToTop() {
                this._moveToTop();
            },

            _moveToTop: function _moveToTop(event, silent) {
                var moved = false,
                    zIndices = this.uiDialog.siblings(".ui-front:visible").map(function () {
                    return +$(this).css("z-index");
                }).get(),
                    zIndexMax = Math.max.apply(null, zIndices);

                if (zIndexMax >= +this.uiDialog.css("z-index")) {
                    this.uiDialog.css("z-index", zIndexMax + 1);
                    moved = true;
                }

                if (moved && !silent) {
                    this._trigger("focus", event);
                }
                return moved;
            },

            open: function open() {
                var that = this;
                if (this._isOpen) {
                    if (this._moveToTop()) {
                        this._focusTabbable();
                    }
                    return;
                }

                this._isOpen = true;
                this.opener = $(this.document[0].activeElement);

                this._size();
                this._position();
                this._createOverlay();
                this._moveToTop(null, true);

                // Ensure the overlay is moved to the top with the dialog, but only when
                // opening. The overlay shouldn't move after the dialog is open so that
                // modeless dialogs opened after the modal dialog stack properly.
                if (this.overlay) {
                    this.overlay.css("z-index", this.uiDialog.css("z-index") - 1);
                }

                this._show(this.uiDialog, this.options.show, function () {
                    that._focusTabbable();
                    that._trigger("focus");
                });

                // Track the dialog immediately upon openening in case a focus event
                // somehow occurs outside of the dialog before an element inside the
                // dialog is focused (#10152)
                this._makeFocusTarget();

                this._trigger("open");
            },

            _focusTabbable: function _focusTabbable() {
                // Set focus to the first match:
                // 1. An element that was focused previously
                // 2. First element inside the dialog matching [autofocus]
                // 3. Tabbable element inside the content element
                // 4. Tabbable element inside the buttonpane
                // 5. The close button
                // 6. The dialog itself
                var hasFocus = this._focusedElement;
                if (!hasFocus) {
                    hasFocus = this.element.find("[autofocus]");
                }
                if (!hasFocus.length) {
                    hasFocus = this.element.find(":tabbable");
                }
                if (!hasFocus.length) {
                    hasFocus = this.uiDialogButtonPane.find(":tabbable");
                }
                if (!hasFocus.length) {
                    hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
                }
                if (!hasFocus.length) {
                    hasFocus = this.uiDialog;
                }
                hasFocus.eq(0).focus();
            },

            _keepFocus: function _keepFocus(event) {
                function checkFocus() {
                    var activeElement = this.document[0].activeElement,
                        isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);
                    if (!isActive) {
                        this._focusTabbable();
                    }
                }
                event.preventDefault();
                checkFocus.call(this);
                // support: IE
                // IE <= 8 doesn't prevent moving focus even with event.preventDefault()
                // so we check again later
                this._delay(checkFocus);
            },

            _createWrapper: function _createWrapper() {
                this.uiDialog = $("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " + this.options.dialogClass).hide().attr({
                    // Setting tabIndex makes the div focusable
                    tabIndex: -1,
                    role: "dialog"
                }).appendTo(this._appendTo());

                this._on(this.uiDialog, {
                    keydown: function keydown(event) {
                        if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                            event.preventDefault();
                            this.close(event);
                            return;
                        }

                        // prevent tabbing out of dialogs
                        if (event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented()) {
                            return;
                        }
                        var tabbables = this.uiDialog.find(":tabbable"),
                            first = tabbables.filter(":first"),
                            last = tabbables.filter(":last");

                        if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {
                            this._delay(function () {
                                first.focus();
                            });
                            event.preventDefault();
                        } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {
                            this._delay(function () {
                                last.focus();
                            });
                            event.preventDefault();
                        }
                    },
                    mousedown: function mousedown(event) {
                        if (this._moveToTop(event)) {
                            this._focusTabbable();
                        }
                    }
                });

                // We assume that any existing aria-describedby attribute means
                // that the dialog content is marked up properly
                // otherwise we brute force the content as the description
                if (!this.element.find("[aria-describedby]").length) {
                    this.uiDialog.attr({
                        "aria-describedby": this.element.uniqueId().attr("id")
                    });
                }
            },

            _createTitlebar: function _createTitlebar() {
                var uiDialogTitle;

                this.uiDialogTitlebar = $("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog);
                this._on(this.uiDialogTitlebar, {
                    mousedown: function mousedown(event) {
                        // Don't prevent click on close button (#8838)
                        // Focusing a dialog that is partially scrolled out of view
                        // causes the browser to scroll it into view, preventing the click event
                        if (!$(event.target).closest(".ui-dialog-titlebar-close")) {
                            // Dialog isn't getting focus when dragging (#8063)
                            this.uiDialog.focus();
                        }
                    }
                });

                // support: IE
                // Use type="button" to prevent enter keypresses in textboxes from closing the
                // dialog in IE (#9312)
                this.uiDialogTitlebarClose = $("<button type='button'></button>").button({
                    label: this.options.closeText,
                    icons: {
                        primary: "ui-icon-closethick"
                    },
                    text: false
                }).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar);
                this._on(this.uiDialogTitlebarClose, {
                    click: function click(event) {
                        event.preventDefault();
                        this.close(event);
                    }
                });

                uiDialogTitle = $("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar);
                this._title(uiDialogTitle);

                this.uiDialog.attr({
                    "aria-labelledby": uiDialogTitle.attr("id")
                });
            },

            _title: function _title(title) {
                if (!this.options.title) {
                    title.html("&#160;");
                }
                title.text(this.options.title);
            },

            _createButtonPane: function _createButtonPane() {
                this.uiDialogButtonPane = $("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");

                this.uiButtonSet = $("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane);

                this._createButtons();
            },

            _createButtons: function _createButtons() {
                var that = this,
                    buttons = this.options.buttons;

                // if we already have a button pane, remove it
                this.uiDialogButtonPane.remove();
                this.uiButtonSet.empty();

                if ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) {
                    this.uiDialog.removeClass("ui-dialog-buttons");
                    return;
                }

                $.each(buttons, function (name, props) {
                    var click, buttonOptions;
                    props = $.isFunction(props) ? { click: props, text: name } : props;
                    // Default to a non-submitting button
                    props = $.extend({ type: "button" }, props);
                    // Change the context for the click callback to be the main element
                    click = props.click;
                    props.click = function () {
                        click.apply(that.element[0], arguments);
                    };
                    buttonOptions = {
                        icons: props.icons,
                        text: props.showText
                    };
                    delete props.icons;
                    delete props.showText;
                    $("<button></button>", props).button(buttonOptions).appendTo(that.uiButtonSet);
                });
                this.uiDialog.addClass("ui-dialog-buttons");
                this.uiDialogButtonPane.appendTo(this.uiDialog);
            },

            _makeDraggable: function _makeDraggable() {
                var that = this,
                    options = this.options;

                function filteredUi(ui) {
                    return {
                        position: ui.position,
                        offset: ui.offset
                    };
                }

                this.uiDialog.draggable({
                    cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
                    handle: ".ui-dialog-titlebar",
                    containment: "document",
                    start: function start(event, ui) {
                        $(this).addClass("ui-dialog-dragging");
                        that._blockFrames();
                        that._trigger("dragStart", event, filteredUi(ui));
                    },
                    drag: function drag(event, ui) {
                        that._trigger("drag", event, filteredUi(ui));
                    },
                    stop: function stop(event, ui) {
                        var left = ui.offset.left - that.document.scrollLeft(),
                            top = ui.offset.top - that.document.scrollTop();

                        options.position = {
                            my: "left top",
                            at: "left" + (left >= 0 ? "+" : "") + left + " " + "top" + (top >= 0 ? "+" : "") + top,
                            of: that.window
                        };
                        $(this).removeClass("ui-dialog-dragging");
                        that._unblockFrames();
                        that._trigger("dragStop", event, filteredUi(ui));
                    }
                });
            },

            _makeResizable: function _makeResizable() {
                var that = this,
                    options = this.options,
                    handles = options.resizable,

                // .ui-resizable has position: relative defined in the stylesheet
                // but dialogs have to use absolute or fixed positioning
                position = this.uiDialog.css("position"),
                    resizeHandles = typeof handles === "string" ? handles : "n,e,s,w,se,sw,ne,nw";

                function filteredUi(ui) {
                    return {
                        originalPosition: ui.originalPosition,
                        originalSize: ui.originalSize,
                        position: ui.position,
                        size: ui.size
                    };
                }

                this.uiDialog.resizable({
                    cancel: ".ui-dialog-content",
                    containment: "document",
                    alsoResize: this.element,
                    maxWidth: options.maxWidth,
                    maxHeight: options.maxHeight,
                    minWidth: options.minWidth,
                    minHeight: this._minHeight(),
                    handles: resizeHandles,
                    start: function start(event, ui) {
                        $(this).addClass("ui-dialog-resizing");
                        that._blockFrames();
                        that._trigger("resizeStart", event, filteredUi(ui));
                    },
                    resize: function resize(event, ui) {
                        that._trigger("resize", event, filteredUi(ui));
                    },
                    stop: function stop(event, ui) {
                        var offset = that.uiDialog.offset(),
                            left = offset.left - that.document.scrollLeft(),
                            top = offset.top - that.document.scrollTop();

                        options.height = that.uiDialog.height();
                        options.width = that.uiDialog.width();
                        options.position = {
                            my: "left top",
                            at: "left" + (left >= 0 ? "+" : "") + left + " " + "top" + (top >= 0 ? "+" : "") + top,
                            of: that.window
                        };
                        $(this).removeClass("ui-dialog-resizing");
                        that._unblockFrames();
                        that._trigger("resizeStop", event, filteredUi(ui));
                    }
                }).css("position", position);
            },

            _trackFocus: function _trackFocus() {
                this._on(this.widget(), {
                    focusin: function focusin(event) {
                        this._makeFocusTarget();
                        this._focusedElement = $(event.target);
                    }
                });
            },

            _makeFocusTarget: function _makeFocusTarget() {
                this._untrackInstance();
                this._trackingInstances().unshift(this);
            },

            _untrackInstance: function _untrackInstance() {
                var instances = this._trackingInstances(),
                    exists = $.inArray(this, instances);
                if (exists !== -1) {
                    instances.splice(exists, 1);
                }
            },

            _trackingInstances: function _trackingInstances() {
                var instances = this.document.data("ui-dialog-instances");
                if (!instances) {
                    instances = [];
                    this.document.data("ui-dialog-instances", instances);
                }
                return instances;
            },

            _minHeight: function _minHeight() {
                var options = this.options;

                return options.height === "auto" ? options.minHeight : Math.min(options.minHeight, options.height);
            },

            _position: function _position() {
                // Need to show the dialog to get the actual offset in the position plugin
                var isVisible = this.uiDialog.is(":visible");
                if (!isVisible) {
                    this.uiDialog.show();
                }
                this.uiDialog.position(this.options.position);
                if (!isVisible) {
                    this.uiDialog.hide();
                }
            },

            _setOptions: function _setOptions(options) {
                var that = this,
                    resize = false,
                    resizableOptions = {};

                $.each(options, function (key, value) {
                    that._setOption(key, value);

                    if (key in that.sizeRelatedOptions) {
                        resize = true;
                    }
                    if (key in that.resizableRelatedOptions) {
                        resizableOptions[key] = value;
                    }
                });

                if (resize) {
                    this._size();
                    this._position();
                }
                if (this.uiDialog.is(":data(ui-resizable)")) {
                    this.uiDialog.resizable("option", resizableOptions);
                }
            },

            _setOption: function _setOption(key, value) {
                var isDraggable,
                    isResizable,
                    uiDialog = this.uiDialog;

                if (key === "dialogClass") {
                    uiDialog.removeClass(this.options.dialogClass).addClass(value);
                }

                if (key === "disabled") {
                    return;
                }

                this._super(key, value);

                if (key === "appendTo") {
                    this.uiDialog.appendTo(this._appendTo());
                }

                if (key === "buttons") {
                    this._createButtons();
                }

                if (key === "closeText") {
                    this.uiDialogTitlebarClose.button({
                        // Ensure that we always pass a string
                        label: "" + value
                    });
                }

                if (key === "draggable") {
                    isDraggable = uiDialog.is(":data(ui-draggable)");
                    if (isDraggable && !value) {
                        uiDialog.draggable("destroy");
                    }

                    if (!isDraggable && value) {
                        this._makeDraggable();
                    }
                }

                if (key === "position") {
                    this._position();
                }

                if (key === "resizable") {
                    // currently resizable, becoming non-resizable
                    isResizable = uiDialog.is(":data(ui-resizable)");
                    if (isResizable && !value) {
                        uiDialog.resizable("destroy");
                    }

                    // currently resizable, changing handles
                    if (isResizable && typeof value === "string") {
                        uiDialog.resizable("option", "handles", value);
                    }

                    // currently non-resizable, becoming resizable
                    if (!isResizable && value !== false) {
                        this._makeResizable();
                    }
                }

                if (key === "title") {
                    this._title(this.uiDialogTitlebar.find(".ui-dialog-title"));
                }
            },

            _size: function _size() {
                // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
                // divs will both have width and height set, so we need to reset them
                var nonContentHeight,
                    minContentHeight,
                    maxContentHeight,
                    options = this.options;

                // Reset content sizing
                this.element.show().css({
                    width: "auto",
                    minHeight: 0,
                    maxHeight: "none",
                    height: 0
                });

                if (options.minWidth > options.width) {
                    options.width = options.minWidth;
                }

                // reset wrapper sizing
                // determine the height of all the non-content elements
                nonContentHeight = this.uiDialog.css({
                    height: "auto",
                    width: options.width
                }).outerHeight();
                minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
                maxContentHeight = typeof options.maxHeight === "number" ? Math.max(0, options.maxHeight - nonContentHeight) : "none";

                if (options.height === "auto") {
                    this.element.css({
                        minHeight: minContentHeight,
                        maxHeight: maxContentHeight,
                        height: "auto"
                    });
                } else {
                    this.element.height(Math.max(0, options.height - nonContentHeight));
                }

                if (this.uiDialog.is(":data(ui-resizable)")) {
                    this.uiDialog.resizable("option", "minHeight", this._minHeight());
                }
            },

            _blockFrames: function _blockFrames() {
                this.iframeBlocks = this.document.find("iframe").map(function () {
                    var iframe = $(this);

                    return $("<div>").css({
                        position: "absolute",
                        width: iframe.outerWidth(),
                        height: iframe.outerHeight()
                    }).appendTo(iframe.parent()).offset(iframe.offset())[0];
                });
            },

            _unblockFrames: function _unblockFrames() {
                if (this.iframeBlocks) {
                    this.iframeBlocks.remove();
                    delete this.iframeBlocks;
                }
            },

            _allowInteraction: function _allowInteraction(event) {
                if ($(event.target).closest(".ui-dialog").length) {
                    return true;
                }

                // TODO: Remove hack when datepicker implements
                // the .ui-front logic (#8989)
                return !!$(event.target).closest(".ui-datepicker").length;
            },

            _createOverlay: function _createOverlay() {
                if (!this.options.modal) {
                    return;
                }

                // We use a delay in case the overlay is created from an
                // event that we're going to be cancelling (#2804)
                var isOpening = true;
                this._delay(function () {
                    isOpening = false;
                });

                if (!this.document.data("ui-dialog-overlays")) {

                    // Prevent use of anchors and inputs
                    // Using _on() for an event handler shared across many instances is
                    // safe because the dialogs stack and must be closed in reverse order
                    this._on(this.document, {
                        focusin: function focusin(event) {
                            if (isOpening) {
                                return;
                            }

                            if (!this._allowInteraction(event)) {
                                event.preventDefault();
                                this._trackingInstances()[0]._focusTabbable();
                            }
                        }
                    });
                }

                this.overlay = $("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo());
                this._on(this.overlay, {
                    mousedown: "_keepFocus"
                });
                this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1);
            },

            _destroyOverlay: function _destroyOverlay() {
                if (!this.options.modal) {
                    return;
                }

                if (this.overlay) {
                    var overlays = this.document.data("ui-dialog-overlays") - 1;

                    if (!overlays) {
                        this.document.unbind("focusin").removeData("ui-dialog-overlays");
                    } else {
                        this.document.data("ui-dialog-overlays", overlays);
                    }

                    this.overlay.remove();
                    this.overlay = null;
                }
            }
        });

        /*!
         * jQuery UI Droppable 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/droppable/
         */

        $.widget("ui.droppable", {
            version: "1.11.4",
            widgetEventPrefix: "drop",
            options: {
                accept: "*",
                activeClass: false,
                addClasses: true,
                greedy: false,
                hoverClass: false,
                scope: "default",
                tolerance: "intersect",

                // callbacks
                activate: null,
                deactivate: null,
                drop: null,
                out: null,
                over: null
            },
            _create: function _create() {

                var proportions,
                    o = this.options,
                    accept = o.accept;

                this.isover = false;
                this.isout = true;

                this.accept = $.isFunction(accept) ? accept : function (d) {
                    return d.is(accept);
                };

                this.proportions = function () /* valueToWrite */{
                    if (arguments.length) {
                        // Store the droppable's proportions
                        proportions = arguments[0];
                    } else {
                        // Retrieve or derive the droppable's proportions
                        return proportions ? proportions : proportions = {
                            width: this.element[0].offsetWidth,
                            height: this.element[0].offsetHeight
                        };
                    }
                };

                this._addToManager(o.scope);

                o.addClasses && this.element.addClass("ui-droppable");
            },

            _addToManager: function _addToManager(scope) {
                // Add the reference and positions to the manager
                $.ui.ddmanager.droppables[scope] = $.ui.ddmanager.droppables[scope] || [];
                $.ui.ddmanager.droppables[scope].push(this);
            },

            _splice: function _splice(drop) {
                var i = 0;
                for (; i < drop.length; i++) {
                    if (drop[i] === this) {
                        drop.splice(i, 1);
                    }
                }
            },

            _destroy: function _destroy() {
                var drop = $.ui.ddmanager.droppables[this.options.scope];

                this._splice(drop);

                this.element.removeClass("ui-droppable ui-droppable-disabled");
            },

            _setOption: function _setOption(key, value) {

                if (key === "accept") {
                    this.accept = $.isFunction(value) ? value : function (d) {
                        return d.is(value);
                    };
                } else if (key === "scope") {
                    var drop = $.ui.ddmanager.droppables[this.options.scope];

                    this._splice(drop);
                    this._addToManager(value);
                }

                this._super(key, value);
            },

            _activate: function _activate(event) {
                var draggable = $.ui.ddmanager.current;
                if (this.options.activeClass) {
                    this.element.addClass(this.options.activeClass);
                }
                if (draggable) {
                    this._trigger("activate", event, this.ui(draggable));
                }
            },

            _deactivate: function _deactivate(event) {
                var draggable = $.ui.ddmanager.current;
                if (this.options.activeClass) {
                    this.element.removeClass(this.options.activeClass);
                }
                if (draggable) {
                    this._trigger("deactivate", event, this.ui(draggable));
                }
            },

            _over: function _over(event) {

                var draggable = $.ui.ddmanager.current;

                // Bail if draggable and droppable are same element
                if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                    return;
                }

                if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                    if (this.options.hoverClass) {
                        this.element.addClass(this.options.hoverClass);
                    }
                    this._trigger("over", event, this.ui(draggable));
                }
            },

            _out: function _out(event) {

                var draggable = $.ui.ddmanager.current;

                // Bail if draggable and droppable are same element
                if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                    return;
                }

                if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                    if (this.options.hoverClass) {
                        this.element.removeClass(this.options.hoverClass);
                    }
                    this._trigger("out", event, this.ui(draggable));
                }
            },

            _drop: function _drop(event, custom) {

                var draggable = custom || $.ui.ddmanager.current,
                    childrenIntersection = false;

                // Bail if draggable and droppable are same element
                if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                    return false;
                }

                this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function () {
                    var inst = $(this).droppable("instance");
                    if (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], draggable.currentItem || draggable.element) && $.ui.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance, event)) {
                        childrenIntersection = true;return false;
                    }
                });
                if (childrenIntersection) {
                    return false;
                }

                if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                    if (this.options.activeClass) {
                        this.element.removeClass(this.options.activeClass);
                    }
                    if (this.options.hoverClass) {
                        this.element.removeClass(this.options.hoverClass);
                    }
                    this._trigger("drop", event, this.ui(draggable));
                    return this.element;
                }

                return false;
            },

            ui: function ui(c) {
                return {
                    draggable: c.currentItem || c.element,
                    helper: c.helper,
                    position: c.position,
                    offset: c.positionAbs
                };
            }

        });

        $.ui.intersect = function () {
            function isOverAxis(x, reference, size) {
                return x >= reference && x < reference + size;
            }

            return function (draggable, droppable, toleranceMode, event) {

                if (!droppable.offset) {
                    return false;
                }

                var x1 = (draggable.positionAbs || draggable.position.absolute).left + draggable.margins.left,
                    y1 = (draggable.positionAbs || draggable.position.absolute).top + draggable.margins.top,
                    x2 = x1 + draggable.helperProportions.width,
                    y2 = y1 + draggable.helperProportions.height,
                    l = droppable.offset.left,
                    t = droppable.offset.top,
                    r = l + droppable.proportions().width,
                    b = t + droppable.proportions().height;

                switch (toleranceMode) {
                    case "fit":
                        return l <= x1 && x2 <= r && t <= y1 && y2 <= b;
                    case "intersect":
                        return l < x1 + draggable.helperProportions.width / 2 && // Right Half
                        x2 - draggable.helperProportions.width / 2 < r && // Left Half
                        t < y1 + draggable.helperProportions.height / 2 && // Bottom Half
                        y2 - draggable.helperProportions.height / 2 < b; // Top Half
                    case "pointer":
                        return isOverAxis(event.pageY, t, droppable.proportions().height) && isOverAxis(event.pageX, l, droppable.proportions().width);
                    case "touch":
                        return (y1 >= t && y1 <= b || // Top edge touching
                        y2 >= t && y2 <= b || // Bottom edge touching
                        y1 < t && y2 > b // Surrounded vertically
                        ) && (x1 >= l && x1 <= r || // Left edge touching
                        x2 >= l && x2 <= r || // Right edge touching
                        x1 < l && x2 > r // Surrounded horizontally
                        );
                    default:
                        return false;
                }
            };
        }();

        /*
        	This manager tracks offsets of draggables and droppables
        */
        $.ui.ddmanager = {
            current: null,
            droppables: { "default": [] },
            prepareOffsets: function prepareOffsets(t, event) {

                var i,
                    j,
                    m = $.ui.ddmanager.droppables[t.options.scope] || [],
                    type = event ? event.type : null,
                    // workaround for #2317
                list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();

                droppablesLoop: for (i = 0; i < m.length; i++) {

                    // No disabled and non-accepted
                    if (m[i].options.disabled || t && !m[i].accept.call(m[i].element[0], t.currentItem || t.element)) {
                        continue;
                    }

                    // Filter out elements in the current dragged item
                    for (j = 0; j < list.length; j++) {
                        if (list[j] === m[i].element[0]) {
                            m[i].proportions().height = 0;
                            continue droppablesLoop;
                        }
                    }

                    m[i].visible = m[i].element.css("display") !== "none";
                    if (!m[i].visible) {
                        continue;
                    }

                    // Activate the droppable if used directly from draggables
                    if (type === "mousedown") {
                        m[i]._activate.call(m[i], event);
                    }

                    m[i].offset = m[i].element.offset();
                    m[i].proportions({ width: m[i].element[0].offsetWidth, height: m[i].element[0].offsetHeight });
                }
            },
            drop: function drop(draggable, event) {

                var dropped = false;
                // Create a copy of the droppables in case the list changes during the drop (#9116)
                $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function () {

                    if (!this.options) {
                        return;
                    }
                    if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance, event)) {
                        dropped = this._drop.call(this, event) || dropped;
                    }

                    if (!this.options.disabled && this.visible && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                        this.isout = true;
                        this.isover = false;
                        this._deactivate.call(this, event);
                    }
                });
                return dropped;
            },
            dragStart: function dragStart(draggable, event) {
                // Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
                draggable.element.parentsUntil("body").bind("scroll.droppable", function () {
                    if (!draggable.options.refreshPositions) {
                        $.ui.ddmanager.prepareOffsets(draggable, event);
                    }
                });
            },
            drag: function drag(draggable, event) {

                // If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
                if (draggable.options.refreshPositions) {
                    $.ui.ddmanager.prepareOffsets(draggable, event);
                }

                // Run through all droppables and check their positions based on specific tolerance options
                $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function () {

                    if (this.options.disabled || this.greedyChild || !this.visible) {
                        return;
                    }

                    var parentInstance,
                        scope,
                        parent,
                        intersects = $.ui.intersect(draggable, this, this.options.tolerance, event),
                        c = !intersects && this.isover ? "isout" : intersects && !this.isover ? "isover" : null;
                    if (!c) {
                        return;
                    }

                    if (this.options.greedy) {
                        // find droppable parents with same scope
                        scope = this.options.scope;
                        parent = this.element.parents(":data(ui-droppable)").filter(function () {
                            return $(this).droppable("instance").options.scope === scope;
                        });

                        if (parent.length) {
                            parentInstance = $(parent[0]).droppable("instance");
                            parentInstance.greedyChild = c === "isover";
                        }
                    }

                    // we just moved into a greedy child
                    if (parentInstance && c === "isover") {
                        parentInstance.isover = false;
                        parentInstance.isout = true;
                        parentInstance._out.call(parentInstance, event);
                    }

                    this[c] = true;
                    this[c === "isout" ? "isover" : "isout"] = false;
                    this[c === "isover" ? "_over" : "_out"].call(this, event);

                    // we just moved out of a greedy child
                    if (parentInstance && c === "isout") {
                        parentInstance.isout = false;
                        parentInstance.isover = true;
                        parentInstance._over.call(parentInstance, event);
                    }
                });
            },
            dragStop: function dragStop(draggable, event) {
                draggable.element.parentsUntil("body").unbind("scroll.droppable");
                // Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
                if (!draggable.options.refreshPositions) {
                    $.ui.ddmanager.prepareOffsets(draggable, event);
                }
            }
        };

        var droppable = $.ui.droppable;

        /*!
         * jQuery UI Effects 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/category/effects-core/
         */

        var dataSpace = "ui-effects-",


        // Create a local jQuery because jQuery Color relies on it and the
        // global may not exist with AMD and a custom build (#10199)
        jQuery = $;

        $.effects = {
            effect: {}
        };

        /*!
         * jQuery Color Animations v2.1.2
         * https://github.com/jquery/jquery-color
         *
         * Copyright 2014 jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * Date: Wed Jan 16 08:47:09 2013 -0600
         */
        (function (jQuery, undefined) {

            var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",


            // plusequals test for += 100 -= 100
            rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,

            // a set of RE's that can match strings and generate color tuples.
            stringParsers = [{
                re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                parse: function parse(execResult) {
                    return [execResult[1], execResult[2], execResult[3], execResult[4]];
                }
            }, {
                re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                parse: function parse(execResult) {
                    return [execResult[1] * 2.55, execResult[2] * 2.55, execResult[3] * 2.55, execResult[4]];
                }
            }, {
                // this regex ignores A-F because it's compared against an already lowercased string
                re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
                parse: function parse(execResult) {
                    return [parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16)];
                }
            }, {
                // this regex ignores A-F because it's compared against an already lowercased string
                re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
                parse: function parse(execResult) {
                    return [parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16)];
                }
            }, {
                re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                space: "hsla",
                parse: function parse(execResult) {
                    return [execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4]];
                }
            }],


            // jQuery.Color( )
            color = jQuery.Color = function (color, green, blue, alpha) {
                return new jQuery.Color.fn.parse(color, green, blue, alpha);
            },
                spaces = {
                rgba: {
                    props: {
                        red: {
                            idx: 0,
                            type: "byte"
                        },
                        green: {
                            idx: 1,
                            type: "byte"
                        },
                        blue: {
                            idx: 2,
                            type: "byte"
                        }
                    }
                },

                hsla: {
                    props: {
                        hue: {
                            idx: 0,
                            type: "degrees"
                        },
                        saturation: {
                            idx: 1,
                            type: "percent"
                        },
                        lightness: {
                            idx: 2,
                            type: "percent"
                        }
                    }
                }
            },
                propTypes = {
                "byte": {
                    floor: true,
                    max: 255
                },
                "percent": {
                    max: 1
                },
                "degrees": {
                    mod: 360,
                    floor: true
                }
            },
                support = color.support = {},


            // element for support tests
            supportElem = jQuery("<p>")[0],


            // colors = jQuery.Color.names
            colors,


            // local aliases of functions called often
            each = jQuery.each;

            // determine rgba support immediately
            supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
            support.rgba = supportElem.style.backgroundColor.indexOf("rgba") > -1;

            // define cache name and alpha properties
            // for rgba and hsla spaces
            each(spaces, function (spaceName, space) {
                space.cache = "_" + spaceName;
                space.props.alpha = {
                    idx: 3,
                    type: "percent",
                    def: 1
                };
            });

            function clamp(value, prop, allowEmpty) {
                var type = propTypes[prop.type] || {};

                if (value == null) {
                    return allowEmpty || !prop.def ? null : prop.def;
                }

                // ~~ is an short way of doing floor for positive numbers
                value = type.floor ? ~~value : parseFloat(value);

                // IE will pass in empty strings as value for alpha,
                // which will hit this case
                if (isNaN(value)) {
                    return prop.def;
                }

                if (type.mod) {
                    // we add mod before modding to make sure that negatives values
                    // get converted properly: -10 -> 350
                    return (value + type.mod) % type.mod;
                }

                // for now all property types without mod have min and max
                return 0 > value ? 0 : type.max < value ? type.max : value;
            }

            function stringParse(string) {
                var inst = color(),
                    rgba = inst._rgba = [];

                string = string.toLowerCase();

                each(stringParsers, function (i, parser) {
                    var parsed,
                        match = parser.re.exec(string),
                        values = match && parser.parse(match),
                        spaceName = parser.space || "rgba";

                    if (values) {
                        parsed = inst[spaceName](values);

                        // if this was an rgba parse the assignment might happen twice
                        // oh well....
                        inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];
                        rgba = inst._rgba = parsed._rgba;

                        // exit each( stringParsers ) here because we matched
                        return false;
                    }
                });

                // Found a stringParser that handled it
                if (rgba.length) {

                    // if this came from a parsed string, force "transparent" when alpha is 0
                    // chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
                    if (rgba.join() === "0,0,0,0") {
                        jQuery.extend(rgba, colors.transparent);
                    }
                    return inst;
                }

                // named colors
                return colors[string];
            }

            color.fn = jQuery.extend(color.prototype, {
                parse: function parse(red, green, blue, alpha) {
                    if (red === undefined) {
                        this._rgba = [null, null, null, null];
                        return this;
                    }
                    if (red.jquery || red.nodeType) {
                        red = jQuery(red).css(green);
                        green = undefined;
                    }

                    var inst = this,
                        type = jQuery.type(red),
                        rgba = this._rgba = [];

                    // more than 1 argument specified - assume ( red, green, blue, alpha )
                    if (green !== undefined) {
                        red = [red, green, blue, alpha];
                        type = "array";
                    }

                    if (type === "string") {
                        return this.parse(stringParse(red) || colors._default);
                    }

                    if (type === "array") {
                        each(spaces.rgba.props, function (key, prop) {
                            rgba[prop.idx] = clamp(red[prop.idx], prop);
                        });
                        return this;
                    }

                    if (type === "object") {
                        if (red instanceof color) {
                            each(spaces, function (spaceName, space) {
                                if (red[space.cache]) {
                                    inst[space.cache] = red[space.cache].slice();
                                }
                            });
                        } else {
                            each(spaces, function (spaceName, space) {
                                var cache = space.cache;
                                each(space.props, function (key, prop) {

                                    // if the cache doesn't exist, and we know how to convert
                                    if (!inst[cache] && space.to) {

                                        // if the value was null, we don't need to copy it
                                        // if the key was alpha, we don't need to copy it either
                                        if (key === "alpha" || red[key] == null) {
                                            return;
                                        }
                                        inst[cache] = space.to(inst._rgba);
                                    }

                                    // this is the only case where we allow nulls for ALL properties.
                                    // call clamp with alwaysAllowEmpty
                                    inst[cache][prop.idx] = clamp(red[key], prop, true);
                                });

                                // everything defined but alpha?
                                if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {
                                    // use the default of 1
                                    inst[cache][3] = 1;
                                    if (space.from) {
                                        inst._rgba = space.from(inst[cache]);
                                    }
                                }
                            });
                        }
                        return this;
                    }
                },
                is: function is(compare) {
                    var is = color(compare),
                        same = true,
                        inst = this;

                    each(spaces, function (_, space) {
                        var localCache,
                            isCache = is[space.cache];
                        if (isCache) {
                            localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];
                            each(space.props, function (_, prop) {
                                if (isCache[prop.idx] != null) {
                                    same = isCache[prop.idx] === localCache[prop.idx];
                                    return same;
                                }
                            });
                        }
                        return same;
                    });
                    return same;
                },
                _space: function _space() {
                    var used = [],
                        inst = this;
                    each(spaces, function (spaceName, space) {
                        if (inst[space.cache]) {
                            used.push(spaceName);
                        }
                    });
                    return used.pop();
                },
                transition: function transition(other, distance) {
                    var end = color(other),
                        spaceName = end._space(),
                        space = spaces[spaceName],
                        startColor = this.alpha() === 0 ? color("transparent") : this,
                        start = startColor[space.cache] || space.to(startColor._rgba),
                        result = start.slice();

                    end = end[space.cache];
                    each(space.props, function (key, prop) {
                        var index = prop.idx,
                            startValue = start[index],
                            endValue = end[index],
                            type = propTypes[prop.type] || {};

                        // if null, don't override start value
                        if (endValue === null) {
                            return;
                        }
                        // if null - use end
                        if (startValue === null) {
                            result[index] = endValue;
                        } else {
                            if (type.mod) {
                                if (endValue - startValue > type.mod / 2) {
                                    startValue += type.mod;
                                } else if (startValue - endValue > type.mod / 2) {
                                    startValue -= type.mod;
                                }
                            }
                            result[index] = clamp((endValue - startValue) * distance + startValue, prop);
                        }
                    });
                    return this[spaceName](result);
                },
                blend: function blend(opaque) {
                    // if we are already opaque - return ourself
                    if (this._rgba[3] === 1) {
                        return this;
                    }

                    var rgb = this._rgba.slice(),
                        a = rgb.pop(),
                        blend = color(opaque)._rgba;

                    return color(jQuery.map(rgb, function (v, i) {
                        return (1 - a) * blend[i] + a * v;
                    }));
                },
                toRgbaString: function toRgbaString() {
                    var prefix = "rgba(",
                        rgba = jQuery.map(this._rgba, function (v, i) {
                        return v == null ? i > 2 ? 1 : 0 : v;
                    });

                    if (rgba[3] === 1) {
                        rgba.pop();
                        prefix = "rgb(";
                    }

                    return prefix + rgba.join() + ")";
                },
                toHslaString: function toHslaString() {
                    var prefix = "hsla(",
                        hsla = jQuery.map(this.hsla(), function (v, i) {
                        if (v == null) {
                            v = i > 2 ? 1 : 0;
                        }

                        // catch 1 and 2
                        if (i && i < 3) {
                            v = Math.round(v * 100) + "%";
                        }
                        return v;
                    });

                    if (hsla[3] === 1) {
                        hsla.pop();
                        prefix = "hsl(";
                    }
                    return prefix + hsla.join() + ")";
                },
                toHexString: function toHexString(includeAlpha) {
                    var rgba = this._rgba.slice(),
                        alpha = rgba.pop();

                    if (includeAlpha) {
                        rgba.push(~~(alpha * 255));
                    }

                    return "#" + jQuery.map(rgba, function (v) {

                        // default to 0 when nulls exist
                        v = (v || 0).toString(16);
                        return v.length === 1 ? "0" + v : v;
                    }).join("");
                },
                toString: function toString() {
                    return this._rgba[3] === 0 ? "transparent" : this.toRgbaString();
                }
            });
            color.fn.parse.prototype = color.fn;

            // hsla conversions adapted from:
            // https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

            function hue2rgb(p, q, h) {
                h = (h + 1) % 1;
                if (h * 6 < 1) {
                    return p + (q - p) * h * 6;
                }
                if (h * 2 < 1) {
                    return q;
                }
                if (h * 3 < 2) {
                    return p + (q - p) * (2 / 3 - h) * 6;
                }
                return p;
            }

            spaces.hsla.to = function (rgba) {
                if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {
                    return [null, null, null, rgba[3]];
                }
                var r = rgba[0] / 255,
                    g = rgba[1] / 255,
                    b = rgba[2] / 255,
                    a = rgba[3],
                    max = Math.max(r, g, b),
                    min = Math.min(r, g, b),
                    diff = max - min,
                    add = max + min,
                    l = add * 0.5,
                    h,
                    s;

                if (min === max) {
                    h = 0;
                } else if (r === max) {
                    h = 60 * (g - b) / diff + 360;
                } else if (g === max) {
                    h = 60 * (b - r) / diff + 120;
                } else {
                    h = 60 * (r - g) / diff + 240;
                }

                // chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
                // otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
                if (diff === 0) {
                    s = 0;
                } else if (l <= 0.5) {
                    s = diff / add;
                } else {
                    s = diff / (2 - add);
                }
                return [Math.round(h) % 360, s, l, a == null ? 1 : a];
            };

            spaces.hsla.from = function (hsla) {
                if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {
                    return [null, null, null, hsla[3]];
                }
                var h = hsla[0] / 360,
                    s = hsla[1],
                    l = hsla[2],
                    a = hsla[3],
                    q = l <= 0.5 ? l * (1 + s) : l + s - l * s,
                    p = 2 * l - q;

                return [Math.round(hue2rgb(p, q, h + 1 / 3) * 255), Math.round(hue2rgb(p, q, h) * 255), Math.round(hue2rgb(p, q, h - 1 / 3) * 255), a];
            };

            each(spaces, function (spaceName, space) {
                var props = space.props,
                    cache = space.cache,
                    to = space.to,
                    from = space.from;

                // makes rgba() and hsla()
                color.fn[spaceName] = function (value) {

                    // generate a cache for this space if it doesn't exist
                    if (to && !this[cache]) {
                        this[cache] = to(this._rgba);
                    }
                    if (value === undefined) {
                        return this[cache].slice();
                    }

                    var ret,
                        type = jQuery.type(value),
                        arr = type === "array" || type === "object" ? value : arguments,
                        local = this[cache].slice();

                    each(props, function (key, prop) {
                        var val = arr[type === "object" ? key : prop.idx];
                        if (val == null) {
                            val = local[prop.idx];
                        }
                        local[prop.idx] = clamp(val, prop);
                    });

                    if (from) {
                        ret = color(from(local));
                        ret[cache] = local;
                        return ret;
                    } else {
                        return color(local);
                    }
                };

                // makes red() green() blue() alpha() hue() saturation() lightness()
                each(props, function (key, prop) {
                    // alpha is included in more than one space
                    if (color.fn[key]) {
                        return;
                    }
                    color.fn[key] = function (value) {
                        var vtype = jQuery.type(value),
                            fn = key === "alpha" ? this._hsla ? "hsla" : "rgba" : spaceName,
                            local = this[fn](),
                            cur = local[prop.idx],
                            match;

                        if (vtype === "undefined") {
                            return cur;
                        }

                        if (vtype === "function") {
                            value = value.call(this, cur);
                            vtype = jQuery.type(value);
                        }
                        if (value == null && prop.empty) {
                            return this;
                        }
                        if (vtype === "string") {
                            match = rplusequals.exec(value);
                            if (match) {
                                value = cur + parseFloat(match[2]) * (match[1] === "+" ? 1 : -1);
                            }
                        }
                        local[prop.idx] = value;
                        return this[fn](local);
                    };
                });
            });

            // add cssHook and .fx.step function for each named hook.
            // accept a space separated string of properties
            color.hook = function (hook) {
                var hooks = hook.split(" ");
                each(hooks, function (i, hook) {
                    jQuery.cssHooks[hook] = {
                        set: function set(elem, value) {
                            var parsed,
                                curElem,
                                backgroundColor = "";

                            if (value !== "transparent" && (jQuery.type(value) !== "string" || (parsed = stringParse(value)))) {
                                value = color(parsed || value);
                                if (!support.rgba && value._rgba[3] !== 1) {
                                    curElem = hook === "backgroundColor" ? elem.parentNode : elem;
                                    while ((backgroundColor === "" || backgroundColor === "transparent") && curElem && curElem.style) {
                                        try {
                                            backgroundColor = jQuery.css(curElem, "backgroundColor");
                                            curElem = curElem.parentNode;
                                        } catch (e) {}
                                    }

                                    value = value.blend(backgroundColor && backgroundColor !== "transparent" ? backgroundColor : "_default");
                                }

                                value = value.toRgbaString();
                            }
                            try {
                                elem.style[hook] = value;
                            } catch (e) {
                                // wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'
                            }
                        }
                    };
                    jQuery.fx.step[hook] = function (fx) {
                        if (!fx.colorInit) {
                            fx.start = color(fx.elem, hook);
                            fx.end = color(fx.end);
                            fx.colorInit = true;
                        }
                        jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));
                    };
                });
            };

            color.hook(stepHooks);

            jQuery.cssHooks.borderColor = {
                expand: function expand(value) {
                    var expanded = {};

                    each(["Top", "Right", "Bottom", "Left"], function (i, part) {
                        expanded["border" + part + "Color"] = value;
                    });
                    return expanded;
                }
            };

            // Basic color names only.
            // Usage of any of the other color names requires adding yourself or including
            // jquery.color.svg-names.js.
            colors = jQuery.Color.names = {
                // 4.1. Basic color keywords
                aqua: "#00ffff",
                black: "#000000",
                blue: "#0000ff",
                fuchsia: "#ff00ff",
                gray: "#808080",
                green: "#008000",
                lime: "#00ff00",
                maroon: "#800000",
                navy: "#000080",
                olive: "#808000",
                purple: "#800080",
                red: "#ff0000",
                silver: "#c0c0c0",
                teal: "#008080",
                white: "#ffffff",
                yellow: "#ffff00",

                // 4.2.3. "transparent" color keyword
                transparent: [null, null, null, 0],

                _default: "#ffffff"
            };
        })(jQuery);

        /******************************************************************************/
        /****************************** CLASS ANIMATIONS ******************************/
        /******************************************************************************/
        (function () {

            var classAnimationActions = ["add", "remove", "toggle"],
                shorthandStyles = {
                border: 1,
                borderBottom: 1,
                borderColor: 1,
                borderLeft: 1,
                borderRight: 1,
                borderTop: 1,
                borderWidth: 1,
                margin: 1,
                padding: 1
            };

            $.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function (_, prop) {
                $.fx.step[prop] = function (fx) {
                    if (fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {
                        jQuery.style(fx.elem, prop, fx.end);
                        fx.setAttr = true;
                    }
                };
            });

            function getElementStyles(elem) {
                var key,
                    len,
                    style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle,
                    styles = {};

                if (style && style.length && style[0] && style[style[0]]) {
                    len = style.length;
                    while (len--) {
                        key = style[len];
                        if (typeof style[key] === "string") {
                            styles[$.camelCase(key)] = style[key];
                        }
                    }
                    // support: Opera, IE <9
                } else {
                    for (key in style) {
                        if (typeof style[key] === "string") {
                            styles[key] = style[key];
                        }
                    }
                }

                return styles;
            }

            function styleDifference(oldStyle, newStyle) {
                var diff = {},
                    name,
                    value;

                for (name in newStyle) {
                    value = newStyle[name];
                    if (oldStyle[name] !== value) {
                        if (!shorthandStyles[name]) {
                            if ($.fx.step[name] || !isNaN(parseFloat(value))) {
                                diff[name] = value;
                            }
                        }
                    }
                }

                return diff;
            }

            // support: jQuery <1.8
            if (!$.fn.addBack) {
                $.fn.addBack = function (selector) {
                    return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
                };
            }

            $.effects.animateClass = function (value, duration, easing, callback) {
                var o = $.speed(duration, easing, callback);

                return this.queue(function () {
                    var animated = $(this),
                        baseClass = animated.attr("class") || "",
                        applyClassChange,
                        allAnimations = o.children ? animated.find("*").addBack() : animated;

                    // map the animated objects to store the original styles.
                    allAnimations = allAnimations.map(function () {
                        var el = $(this);
                        return {
                            el: el,
                            start: getElementStyles(this)
                        };
                    });

                    // apply class change
                    applyClassChange = function applyClassChange() {
                        $.each(classAnimationActions, function (i, action) {
                            if (value[action]) {
                                animated[action + "Class"](value[action]);
                            }
                        });
                    };
                    applyClassChange();

                    // map all animated objects again - calculate new styles and diff
                    allAnimations = allAnimations.map(function () {
                        this.end = getElementStyles(this.el[0]);
                        this.diff = styleDifference(this.start, this.end);
                        return this;
                    });

                    // apply original class
                    animated.attr("class", baseClass);

                    // map all animated objects again - this time collecting a promise
                    allAnimations = allAnimations.map(function () {
                        var styleInfo = this,
                            dfd = $.Deferred(),
                            opts = $.extend({}, o, {
                            queue: false,
                            complete: function complete() {
                                dfd.resolve(styleInfo);
                            }
                        });

                        this.el.animate(this.diff, opts);
                        return dfd.promise();
                    });

                    // once all animations have completed:
                    $.when.apply($, allAnimations.get()).done(function () {

                        // set the final class
                        applyClassChange();

                        // for each animated element,
                        // clear all css properties that were animated
                        $.each(arguments, function () {
                            var el = this.el;
                            $.each(this.diff, function (key) {
                                el.css(key, "");
                            });
                        });

                        // this is guarnteed to be there if you use jQuery.speed()
                        // it also handles dequeuing the next anim...
                        o.complete.call(animated[0]);
                    });
                });
            };

            $.fn.extend({
                addClass: function (orig) {
                    return function (classNames, speed, easing, callback) {
                        return speed ? $.effects.animateClass.call(this, { add: classNames }, speed, easing, callback) : orig.apply(this, arguments);
                    };
                }($.fn.addClass),

                removeClass: function (orig) {
                    return function (classNames, speed, easing, callback) {
                        return arguments.length > 1 ? $.effects.animateClass.call(this, { remove: classNames }, speed, easing, callback) : orig.apply(this, arguments);
                    };
                }($.fn.removeClass),

                toggleClass: function (orig) {
                    return function (classNames, force, speed, easing, callback) {
                        if (typeof force === "boolean" || force === undefined) {
                            if (!speed) {
                                // without speed parameter
                                return orig.apply(this, arguments);
                            } else {
                                return $.effects.animateClass.call(this, force ? { add: classNames } : { remove: classNames }, speed, easing, callback);
                            }
                        } else {
                            // without force parameter
                            return $.effects.animateClass.call(this, { toggle: classNames }, force, speed, easing);
                        }
                    };
                }($.fn.toggleClass),

                switchClass: function switchClass(remove, add, speed, easing, callback) {
                    return $.effects.animateClass.call(this, {
                        add: add,
                        remove: remove
                    }, speed, easing, callback);
                }
            });
        })();

        /******************************************************************************/
        /*********************************** EFFECTS **********************************/
        /******************************************************************************/

        (function () {

            $.extend($.effects, {
                version: "1.11.4",

                // Saves a set of properties in a data storage
                save: function save(element, set) {
                    for (var i = 0; i < set.length; i++) {
                        if (set[i] !== null) {
                            element.data(dataSpace + set[i], element[0].style[set[i]]);
                        }
                    }
                },

                // Restores a set of previously saved properties from a data storage
                restore: function restore(element, set) {
                    var val, i;
                    for (i = 0; i < set.length; i++) {
                        if (set[i] !== null) {
                            val = element.data(dataSpace + set[i]);
                            // support: jQuery 1.6.2
                            // http://bugs.jquery.com/ticket/9917
                            // jQuery 1.6.2 incorrectly returns undefined for any falsy value.
                            // We can't differentiate between "" and 0 here, so we just assume
                            // empty string since it's likely to be a more common value...
                            if (val === undefined) {
                                val = "";
                            }
                            element.css(set[i], val);
                        }
                    }
                },

                setMode: function setMode(el, mode) {
                    if (mode === "toggle") {
                        mode = el.is(":hidden") ? "show" : "hide";
                    }
                    return mode;
                },

                // Translates a [top,left] array into a baseline value
                // this should be a little more flexible in the future to handle a string & hash
                getBaseline: function getBaseline(origin, original) {
                    var y, x;
                    switch (origin[0]) {
                        case "top":
                            y = 0;break;
                        case "middle":
                            y = 0.5;break;
                        case "bottom":
                            y = 1;break;
                        default:
                            y = origin[0] / original.height;
                    }
                    switch (origin[1]) {
                        case "left":
                            x = 0;break;
                        case "center":
                            x = 0.5;break;
                        case "right":
                            x = 1;break;
                        default:
                            x = origin[1] / original.width;
                    }
                    return {
                        x: x,
                        y: y
                    };
                },

                // Wraps the element around a wrapper that copies position properties
                createWrapper: function createWrapper(element) {

                    // if the element is already wrapped, return it
                    if (element.parent().is(".ui-effects-wrapper")) {
                        return element.parent();
                    }

                    // wrap the element
                    var props = {
                        width: element.outerWidth(true),
                        height: element.outerHeight(true),
                        "float": element.css("float")
                    },
                        wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({
                        fontSize: "100%",
                        background: "transparent",
                        border: "none",
                        margin: 0,
                        padding: 0
                    }),

                    // Store the size in case width/height are defined in % - Fixes #5245
                    size = {
                        width: element.width(),
                        height: element.height()
                    },
                        active = document.activeElement;

                    // support: Firefox
                    // Firefox incorrectly exposes anonymous content
                    // https://bugzilla.mozilla.org/show_bug.cgi?id=561664
                    try {
                        active.id;
                    } catch (e) {
                        active = document.body;
                    }

                    element.wrap(wrapper);

                    // Fixes #7595 - Elements lose focus when wrapped.
                    if (element[0] === active || $.contains(element[0], active)) {
                        $(active).focus();
                    }

                    wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element

                    // transfer positioning properties to the wrapper
                    if (element.css("position") === "static") {
                        wrapper.css({ position: "relative" });
                        element.css({ position: "relative" });
                    } else {
                        $.extend(props, {
                            position: element.css("position"),
                            zIndex: element.css("z-index")
                        });
                        $.each(["top", "left", "bottom", "right"], function (i, pos) {
                            props[pos] = element.css(pos);
                            if (isNaN(parseInt(props[pos], 10))) {
                                props[pos] = "auto";
                            }
                        });
                        element.css({
                            position: "relative",
                            top: 0,
                            left: 0,
                            right: "auto",
                            bottom: "auto"
                        });
                    }
                    element.css(size);

                    return wrapper.css(props).show();
                },

                removeWrapper: function removeWrapper(element) {
                    var active = document.activeElement;

                    if (element.parent().is(".ui-effects-wrapper")) {
                        element.parent().replaceWith(element);

                        // Fixes #7595 - Elements lose focus when wrapped.
                        if (element[0] === active || $.contains(element[0], active)) {
                            $(active).focus();
                        }
                    }

                    return element;
                },

                setTransition: function setTransition(element, list, factor, value) {
                    value = value || {};
                    $.each(list, function (i, x) {
                        var unit = element.cssUnit(x);
                        if (unit[0] > 0) {
                            value[x] = unit[0] * factor + unit[1];
                        }
                    });
                    return value;
                }
            });

            // return an effect options object for the given parameters:
            function _normalizeArguments(effect, options, speed, callback) {

                // allow passing all options as the first parameter
                if ($.isPlainObject(effect)) {
                    options = effect;
                    effect = effect.effect;
                }

                // convert to an object
                effect = { effect: effect };

                // catch (effect, null, ...)
                if (options == null) {
                    options = {};
                }

                // catch (effect, callback)
                if ($.isFunction(options)) {
                    callback = options;
                    speed = null;
                    options = {};
                }

                // catch (effect, speed, ?)
                if (typeof options === "number" || $.fx.speeds[options]) {
                    callback = speed;
                    speed = options;
                    options = {};
                }

                // catch (effect, options, callback)
                if ($.isFunction(speed)) {
                    callback = speed;
                    speed = null;
                }

                // add options to effect
                if (options) {
                    $.extend(effect, options);
                }

                speed = speed || options.duration;
                effect.duration = $.fx.off ? 0 : typeof speed === "number" ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;

                effect.complete = callback || options.complete;

                return effect;
            }

            function standardAnimationOption(option) {
                // Valid standard speeds (nothing, number, named speed)
                if (!option || typeof option === "number" || $.fx.speeds[option]) {
                    return true;
                }

                // Invalid strings - treat as "normal" speed
                if (typeof option === "string" && !$.effects.effect[option]) {
                    return true;
                }

                // Complete callback
                if ($.isFunction(option)) {
                    return true;
                }

                // Options hash (but not naming an effect)
                if ((typeof option === "undefined" ? "undefined" : _typeof(option)) === "object" && !option.effect) {
                    return true;
                }

                // Didn't match any standard API
                return false;
            }

            $.fn.extend({
                effect: function effect() /* effect, options, speed, callback */{
                    var args = _normalizeArguments.apply(this, arguments),
                        mode = args.mode,
                        queue = args.queue,
                        effectMethod = $.effects.effect[args.effect];

                    if ($.fx.off || !effectMethod) {
                        // delegate to the original method (e.g., .show()) if possible
                        if (mode) {
                            return this[mode](args.duration, args.complete);
                        } else {
                            return this.each(function () {
                                if (args.complete) {
                                    args.complete.call(this);
                                }
                            });
                        }
                    }

                    function run(next) {
                        var elem = $(this),
                            complete = args.complete,
                            mode = args.mode;

                        function done() {
                            if ($.isFunction(complete)) {
                                complete.call(elem[0]);
                            }
                            if ($.isFunction(next)) {
                                next();
                            }
                        }

                        // If the element already has the correct final state, delegate to
                        // the core methods so the internal tracking of "olddisplay" works.
                        if (elem.is(":hidden") ? mode === "hide" : mode === "show") {
                            elem[mode]();
                            done();
                        } else {
                            effectMethod.call(elem[0], args, done);
                        }
                    }

                    return queue === false ? this.each(run) : this.queue(queue || "fx", run);
                },

                show: function (orig) {
                    return function (option) {
                        if (standardAnimationOption(option)) {
                            return orig.apply(this, arguments);
                        } else {
                            var args = _normalizeArguments.apply(this, arguments);
                            args.mode = "show";
                            return this.effect.call(this, args);
                        }
                    };
                }($.fn.show),

                hide: function (orig) {
                    return function (option) {
                        if (standardAnimationOption(option)) {
                            return orig.apply(this, arguments);
                        } else {
                            var args = _normalizeArguments.apply(this, arguments);
                            args.mode = "hide";
                            return this.effect.call(this, args);
                        }
                    };
                }($.fn.hide),

                toggle: function (orig) {
                    return function (option) {
                        if (standardAnimationOption(option) || typeof option === "boolean") {
                            return orig.apply(this, arguments);
                        } else {
                            var args = _normalizeArguments.apply(this, arguments);
                            args.mode = "toggle";
                            return this.effect.call(this, args);
                        }
                    };
                }($.fn.toggle),

                // helper functions
                cssUnit: function cssUnit(key) {
                    var style = this.css(key),
                        val = [];

                    $.each(["em", "px", "%", "pt"], function (i, unit) {
                        if (style.indexOf(unit) > 0) {
                            val = [parseFloat(style), unit];
                        }
                    });
                    return val;
                }
            });
        })();

        /******************************************************************************/
        /*********************************** EASING ***********************************/
        /******************************************************************************/

        (function () {

            // based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

            var baseEasings = {};

            $.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (i, name) {
                baseEasings[name] = function (p) {
                    return Math.pow(p, i + 2);
                };
            });

            $.extend(baseEasings, {
                Sine: function Sine(p) {
                    return 1 - Math.cos(p * Math.PI / 2);
                },
                Circ: function Circ(p) {
                    return 1 - Math.sqrt(1 - p * p);
                },
                Elastic: function Elastic(p) {
                    return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15);
                },
                Back: function Back(p) {
                    return p * p * (3 * p - 2);
                },
                Bounce: function Bounce(p) {
                    var pow2,
                        bounce = 4;

                    while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {}
                    return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);
                }
            });

            $.each(baseEasings, function (name, easeIn) {
                $.easing["easeIn" + name] = easeIn;
                $.easing["easeOut" + name] = function (p) {
                    return 1 - easeIn(1 - p);
                };
                $.easing["easeInOut" + name] = function (p) {
                    return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2;
                };
            });
        })();

        var effect = $.effects;

        /*!
         * jQuery UI Effects Blind 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/blind-effect/
         */

        var effectBlind = $.effects.effect.blind = function (o, done) {
            // Create element
            var el = $(this),
                rvertical = /up|down|vertical/,
                rpositivemotion = /up|left|vertical|horizontal/,
                props = ["position", "top", "bottom", "left", "right", "height", "width"],
                mode = $.effects.setMode(el, o.mode || "hide"),
                direction = o.direction || "up",
                vertical = rvertical.test(direction),
                ref = vertical ? "height" : "width",
                ref2 = vertical ? "top" : "left",
                motion = rpositivemotion.test(direction),
                animation = {},
                show = mode === "show",
                wrapper,
                distance,
                margin;

            // if already wrapped, the wrapper's properties are my property. #6245
            if (el.parent().is(".ui-effects-wrapper")) {
                $.effects.save(el.parent(), props);
            } else {
                $.effects.save(el, props);
            }
            el.show();
            wrapper = $.effects.createWrapper(el).css({
                overflow: "hidden"
            });

            distance = wrapper[ref]();
            margin = parseFloat(wrapper.css(ref2)) || 0;

            animation[ref] = show ? distance : 0;
            if (!motion) {
                el.css(vertical ? "bottom" : "right", 0).css(vertical ? "top" : "left", "auto").css({ position: "absolute" });

                animation[ref2] = show ? margin : distance + margin;
            }

            // start at 0 if we are showing
            if (show) {
                wrapper.css(ref, 0);
                if (!motion) {
                    wrapper.css(ref2, margin + distance);
                }
            }

            // Animate
            wrapper.animate(animation, {
                duration: o.duration,
                easing: o.easing,
                queue: false,
                complete: function complete() {
                    if (mode === "hide") {
                        el.hide();
                    }
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el);
                    done();
                }
            });
        };

        /*!
         * jQuery UI Effects Bounce 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/bounce-effect/
         */

        var effectBounce = $.effects.effect.bounce = function (o, done) {
            var el = $(this),
                props = ["position", "top", "bottom", "left", "right", "height", "width"],


            // defaults:
            mode = $.effects.setMode(el, o.mode || "effect"),
                hide = mode === "hide",
                show = mode === "show",
                direction = o.direction || "up",
                distance = o.distance,
                times = o.times || 5,


            // number of internal animations
            anims = times * 2 + (show || hide ? 1 : 0),
                speed = o.duration / anims,
                easing = o.easing,


            // utility:
            ref = direction === "up" || direction === "down" ? "top" : "left",
                motion = direction === "up" || direction === "left",
                i,
                upAnim,
                downAnim,


            // we will need to re-assemble the queue to stack our animations in place
            queue = el.queue(),
                queuelen = queue.length;

            // Avoid touching opacity to prevent clearType and PNG issues in IE
            if (show || hide) {
                props.push("opacity");
            }

            $.effects.save(el, props);
            el.show();
            $.effects.createWrapper(el); // Create Wrapper

            // default distance for the BIGGEST bounce is the outer Distance / 3
            if (!distance) {
                distance = el[ref === "top" ? "outerHeight" : "outerWidth"]() / 3;
            }

            if (show) {
                downAnim = { opacity: 1 };
                downAnim[ref] = 0;

                // if we are showing, force opacity 0 and set the initial position
                // then do the "first" animation
                el.css("opacity", 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing);
            }

            // start at the smallest distance if we are hiding
            if (hide) {
                distance = distance / Math.pow(2, times - 1);
            }

            downAnim = {};
            downAnim[ref] = 0;
            // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
            for (i = 0; i < times; i++) {
                upAnim = {};
                upAnim[ref] = (motion ? "-=" : "+=") + distance;

                el.animate(upAnim, speed, easing).animate(downAnim, speed, easing);

                distance = hide ? distance * 2 : distance / 2;
            }

            // Last Bounce when Hiding
            if (hide) {
                upAnim = { opacity: 0 };
                upAnim[ref] = (motion ? "-=" : "+=") + distance;

                el.animate(upAnim, speed, easing);
            }

            el.queue(function () {
                if (hide) {
                    el.hide();
                }
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            });

            // inject all the animations we just queued to be first in line (after "inprogress")
            if (queuelen > 1) {
                queue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));
            }
            el.dequeue();
        };

        /*!
         * jQuery UI Effects Clip 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/clip-effect/
         */

        var effectClip = $.effects.effect.clip = function (o, done) {
            // Create element
            var el = $(this),
                props = ["position", "top", "bottom", "left", "right", "height", "width"],
                mode = $.effects.setMode(el, o.mode || "hide"),
                show = mode === "show",
                direction = o.direction || "vertical",
                vert = direction === "vertical",
                size = vert ? "height" : "width",
                position = vert ? "top" : "left",
                animation = {},
                wrapper,
                animate,
                distance;

            // Save & Show
            $.effects.save(el, props);
            el.show();

            // Create Wrapper
            wrapper = $.effects.createWrapper(el).css({
                overflow: "hidden"
            });
            animate = el[0].tagName === "IMG" ? wrapper : el;
            distance = animate[size]();

            // Shift
            if (show) {
                animate.css(size, 0);
                animate.css(position, distance / 2);
            }

            // Create Animation Object:
            animation[size] = show ? distance : 0;
            animation[position] = show ? 0 : distance / 2;

            // Animate
            animate.animate(animation, {
                queue: false,
                duration: o.duration,
                easing: o.easing,
                complete: function complete() {
                    if (!show) {
                        el.hide();
                    }
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el);
                    done();
                }
            });
        };

        /*!
         * jQuery UI Effects Drop 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/drop-effect/
         */

        var effectDrop = $.effects.effect.drop = function (o, done) {

            var el = $(this),
                props = ["position", "top", "bottom", "left", "right", "opacity", "height", "width"],
                mode = $.effects.setMode(el, o.mode || "hide"),
                show = mode === "show",
                direction = o.direction || "left",
                ref = direction === "up" || direction === "down" ? "top" : "left",
                motion = direction === "up" || direction === "left" ? "pos" : "neg",
                animation = {
                opacity: show ? 1 : 0
            },
                distance;

            // Adjust
            $.effects.save(el, props);
            el.show();
            $.effects.createWrapper(el);

            distance = o.distance || el[ref === "top" ? "outerHeight" : "outerWidth"](true) / 2;

            if (show) {
                el.css("opacity", 0).css(ref, motion === "pos" ? -distance : distance);
            }

            // Animation
            animation[ref] = (show ? motion === "pos" ? "+=" : "-=" : motion === "pos" ? "-=" : "+=") + distance;

            // Animate
            el.animate(animation, {
                queue: false,
                duration: o.duration,
                easing: o.easing,
                complete: function complete() {
                    if (mode === "hide") {
                        el.hide();
                    }
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el);
                    done();
                }
            });
        };

        /*!
         * jQuery UI Effects Explode 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/explode-effect/
         */

        var effectExplode = $.effects.effect.explode = function (o, done) {

            var rows = o.pieces ? Math.round(Math.sqrt(o.pieces)) : 3,
                cells = rows,
                el = $(this),
                mode = $.effects.setMode(el, o.mode || "hide"),
                show = mode === "show",


            // show and then visibility:hidden the element before calculating offset
            offset = el.show().css("visibility", "hidden").offset(),


            // width and height of a piece
            width = Math.ceil(el.outerWidth() / cells),
                height = Math.ceil(el.outerHeight() / rows),
                pieces = [],


            // loop
            i,
                j,
                left,
                top,
                mx,
                my;

            // children animate complete:
            function childComplete() {
                pieces.push(this);
                if (pieces.length === rows * cells) {
                    animComplete();
                }
            }

            // clone the element for each row and cell.
            for (i = 0; i < rows; i++) {
                // ===>
                top = offset.top + i * height;
                my = i - (rows - 1) / 2;

                for (j = 0; j < cells; j++) {
                    // |||
                    left = offset.left + j * width;
                    mx = j - (cells - 1) / 2;

                    // Create a clone of the now hidden main element that will be absolute positioned
                    // within a wrapper div off the -left and -top equal to size of our pieces
                    el.clone().appendTo("body").wrap("<div></div>").css({
                        position: "absolute",
                        visibility: "visible",
                        left: -j * width,
                        top: -i * height
                    })

                    // select the wrapper - make it overflow: hidden and absolute positioned based on
                    // where the original was located +left and +top equal to the size of pieces
                    .parent().addClass("ui-effects-explode").css({
                        position: "absolute",
                        overflow: "hidden",
                        width: width,
                        height: height,
                        left: left + (show ? mx * width : 0),
                        top: top + (show ? my * height : 0),
                        opacity: show ? 0 : 1
                    }).animate({
                        left: left + (show ? 0 : mx * width),
                        top: top + (show ? 0 : my * height),
                        opacity: show ? 1 : 0
                    }, o.duration || 500, o.easing, childComplete);
                }
            }

            function animComplete() {
                el.css({
                    visibility: "visible"
                });
                $(pieces).remove();
                if (!show) {
                    el.hide();
                }
                done();
            }
        };

        /*!
         * jQuery UI Effects Fade 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/fade-effect/
         */

        var effectFade = $.effects.effect.fade = function (o, done) {
            var el = $(this),
                mode = $.effects.setMode(el, o.mode || "toggle");

            el.animate({
                opacity: mode
            }, {
                queue: false,
                duration: o.duration,
                easing: o.easing,
                complete: done
            });
        };

        /*!
         * jQuery UI Effects Fold 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/fold-effect/
         */

        var effectFold = $.effects.effect.fold = function (o, done) {

            // Create element
            var el = $(this),
                props = ["position", "top", "bottom", "left", "right", "height", "width"],
                mode = $.effects.setMode(el, o.mode || "hide"),
                show = mode === "show",
                hide = mode === "hide",
                size = o.size || 15,
                percent = /([0-9]+)%/.exec(size),
                horizFirst = !!o.horizFirst,
                widthFirst = show !== horizFirst,
                ref = widthFirst ? ["width", "height"] : ["height", "width"],
                duration = o.duration / 2,
                wrapper,
                distance,
                animation1 = {},
                animation2 = {};

            $.effects.save(el, props);
            el.show();

            // Create Wrapper
            wrapper = $.effects.createWrapper(el).css({
                overflow: "hidden"
            });
            distance = widthFirst ? [wrapper.width(), wrapper.height()] : [wrapper.height(), wrapper.width()];

            if (percent) {
                size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1];
            }
            if (show) {
                wrapper.css(horizFirst ? {
                    height: 0,
                    width: size
                } : {
                    height: size,
                    width: 0
                });
            }

            // Animation
            animation1[ref[0]] = show ? distance[0] : size;
            animation2[ref[1]] = show ? distance[1] : 0;

            // Animate
            wrapper.animate(animation1, duration, o.easing).animate(animation2, duration, o.easing, function () {
                if (hide) {
                    el.hide();
                }
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            });
        };

        /*!
         * jQuery UI Effects Highlight 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/highlight-effect/
         */

        var effectHighlight = $.effects.effect.highlight = function (o, done) {
            var elem = $(this),
                props = ["backgroundImage", "backgroundColor", "opacity"],
                mode = $.effects.setMode(elem, o.mode || "show"),
                animation = {
                backgroundColor: elem.css("backgroundColor")
            };

            if (mode === "hide") {
                animation.opacity = 0;
            }

            $.effects.save(elem, props);

            elem.show().css({
                backgroundImage: "none",
                backgroundColor: o.color || "#ffff99"
            }).animate(animation, {
                queue: false,
                duration: o.duration,
                easing: o.easing,
                complete: function complete() {
                    if (mode === "hide") {
                        elem.hide();
                    }
                    $.effects.restore(elem, props);
                    done();
                }
            });
        };

        /*!
         * jQuery UI Effects Size 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/size-effect/
         */

        var effectSize = $.effects.effect.size = function (o, done) {

            // Create element
            var original,
                baseline,
                factor,
                el = $(this),
                props0 = ["position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity"],


            // Always restore
            props1 = ["position", "top", "bottom", "left", "right", "overflow", "opacity"],


            // Copy for children
            props2 = ["width", "height", "overflow"],
                cProps = ["fontSize"],
                vProps = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"],
                hProps = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"],


            // Set options
            mode = $.effects.setMode(el, o.mode || "effect"),
                restore = o.restore || mode !== "effect",
                scale = o.scale || "both",
                origin = o.origin || ["middle", "center"],
                position = el.css("position"),
                props = restore ? props0 : props1,
                zero = {
                height: 0,
                width: 0,
                outerHeight: 0,
                outerWidth: 0
            };

            if (mode === "show") {
                el.show();
            }
            original = {
                height: el.height(),
                width: el.width(),
                outerHeight: el.outerHeight(),
                outerWidth: el.outerWidth()
            };

            if (o.mode === "toggle" && mode === "show") {
                el.from = o.to || zero;
                el.to = o.from || original;
            } else {
                el.from = o.from || (mode === "show" ? zero : original);
                el.to = o.to || (mode === "hide" ? zero : original);
            }

            // Set scaling factor
            factor = {
                from: {
                    y: el.from.height / original.height,
                    x: el.from.width / original.width
                },
                to: {
                    y: el.to.height / original.height,
                    x: el.to.width / original.width
                }
            };

            // Scale the css box
            if (scale === "box" || scale === "both") {

                // Vertical props scaling
                if (factor.from.y !== factor.to.y) {
                    props = props.concat(vProps);
                    el.from = $.effects.setTransition(el, vProps, factor.from.y, el.from);
                    el.to = $.effects.setTransition(el, vProps, factor.to.y, el.to);
                }

                // Horizontal props scaling
                if (factor.from.x !== factor.to.x) {
                    props = props.concat(hProps);
                    el.from = $.effects.setTransition(el, hProps, factor.from.x, el.from);
                    el.to = $.effects.setTransition(el, hProps, factor.to.x, el.to);
                }
            }

            // Scale the content
            if (scale === "content" || scale === "both") {

                // Vertical props scaling
                if (factor.from.y !== factor.to.y) {
                    props = props.concat(cProps).concat(props2);
                    el.from = $.effects.setTransition(el, cProps, factor.from.y, el.from);
                    el.to = $.effects.setTransition(el, cProps, factor.to.y, el.to);
                }
            }

            $.effects.save(el, props);
            el.show();
            $.effects.createWrapper(el);
            el.css("overflow", "hidden").css(el.from);

            // Adjust
            if (origin) {
                // Calculate baseline shifts
                baseline = $.effects.getBaseline(origin, original);
                el.from.top = (original.outerHeight - el.outerHeight()) * baseline.y;
                el.from.left = (original.outerWidth - el.outerWidth()) * baseline.x;
                el.to.top = (original.outerHeight - el.to.outerHeight) * baseline.y;
                el.to.left = (original.outerWidth - el.to.outerWidth) * baseline.x;
            }
            el.css(el.from); // set top & left

            // Animate
            if (scale === "content" || scale === "both") {
                // Scale the children

                // Add margins/font-size
                vProps = vProps.concat(["marginTop", "marginBottom"]).concat(cProps);
                hProps = hProps.concat(["marginLeft", "marginRight"]);
                props2 = props0.concat(vProps).concat(hProps);

                el.find("*[width]").each(function () {
                    var child = $(this),
                        c_original = {
                        height: child.height(),
                        width: child.width(),
                        outerHeight: child.outerHeight(),
                        outerWidth: child.outerWidth()
                    };
                    if (restore) {
                        $.effects.save(child, props2);
                    }

                    child.from = {
                        height: c_original.height * factor.from.y,
                        width: c_original.width * factor.from.x,
                        outerHeight: c_original.outerHeight * factor.from.y,
                        outerWidth: c_original.outerWidth * factor.from.x
                    };
                    child.to = {
                        height: c_original.height * factor.to.y,
                        width: c_original.width * factor.to.x,
                        outerHeight: c_original.height * factor.to.y,
                        outerWidth: c_original.width * factor.to.x
                    };

                    // Vertical props scaling
                    if (factor.from.y !== factor.to.y) {
                        child.from = $.effects.setTransition(child, vProps, factor.from.y, child.from);
                        child.to = $.effects.setTransition(child, vProps, factor.to.y, child.to);
                    }

                    // Horizontal props scaling
                    if (factor.from.x !== factor.to.x) {
                        child.from = $.effects.setTransition(child, hProps, factor.from.x, child.from);
                        child.to = $.effects.setTransition(child, hProps, factor.to.x, child.to);
                    }

                    // Animate children
                    child.css(child.from);
                    child.animate(child.to, o.duration, o.easing, function () {

                        // Restore children
                        if (restore) {
                            $.effects.restore(child, props2);
                        }
                    });
                });
            }

            // Animate
            el.animate(el.to, {
                queue: false,
                duration: o.duration,
                easing: o.easing,
                complete: function complete() {
                    if (el.to.opacity === 0) {
                        el.css("opacity", el.from.opacity);
                    }
                    if (mode === "hide") {
                        el.hide();
                    }
                    $.effects.restore(el, props);
                    if (!restore) {

                        // we need to calculate our new positioning based on the scaling
                        if (position === "static") {
                            el.css({
                                position: "relative",
                                top: el.to.top,
                                left: el.to.left
                            });
                        } else {
                            $.each(["top", "left"], function (idx, pos) {
                                el.css(pos, function (_, str) {
                                    var val = parseInt(str, 10),
                                        toRef = idx ? el.to.left : el.to.top;

                                    // if original was "auto", recalculate the new value from wrapper
                                    if (str === "auto") {
                                        return toRef + "px";
                                    }

                                    return val + toRef + "px";
                                });
                            });
                        }
                    }

                    $.effects.removeWrapper(el);
                    done();
                }
            });
        };

        /*!
         * jQuery UI Effects Scale 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/scale-effect/
         */

        var effectScale = $.effects.effect.scale = function (o, done) {

            // Create element
            var el = $(this),
                options = $.extend(true, {}, o),
                mode = $.effects.setMode(el, o.mode || "effect"),
                percent = parseInt(o.percent, 10) || (parseInt(o.percent, 10) === 0 ? 0 : mode === "hide" ? 0 : 100),
                direction = o.direction || "both",
                origin = o.origin,
                original = {
                height: el.height(),
                width: el.width(),
                outerHeight: el.outerHeight(),
                outerWidth: el.outerWidth()
            },
                factor = {
                y: direction !== "horizontal" ? percent / 100 : 1,
                x: direction !== "vertical" ? percent / 100 : 1
            };

            // We are going to pass this effect to the size effect:
            options.effect = "size";
            options.queue = false;
            options.complete = done;

            // Set default origin and restore for show/hide
            if (mode !== "effect") {
                options.origin = origin || ["middle", "center"];
                options.restore = true;
            }

            options.from = o.from || (mode === "show" ? {
                height: 0,
                width: 0,
                outerHeight: 0,
                outerWidth: 0
            } : original);
            options.to = {
                height: original.height * factor.y,
                width: original.width * factor.x,
                outerHeight: original.outerHeight * factor.y,
                outerWidth: original.outerWidth * factor.x
            };

            // Fade option to support puff
            if (options.fade) {
                if (mode === "show") {
                    options.from.opacity = 0;
                    options.to.opacity = 1;
                }
                if (mode === "hide") {
                    options.from.opacity = 1;
                    options.to.opacity = 0;
                }
            }

            // Animate
            el.effect(options);
        };

        /*!
         * jQuery UI Effects Puff 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/puff-effect/
         */

        var effectPuff = $.effects.effect.puff = function (o, done) {
            var elem = $(this),
                mode = $.effects.setMode(elem, o.mode || "hide"),
                hide = mode === "hide",
                percent = parseInt(o.percent, 10) || 150,
                factor = percent / 100,
                original = {
                height: elem.height(),
                width: elem.width(),
                outerHeight: elem.outerHeight(),
                outerWidth: elem.outerWidth()
            };

            $.extend(o, {
                effect: "scale",
                queue: false,
                fade: true,
                mode: mode,
                complete: done,
                percent: hide ? percent : 100,
                from: hide ? original : {
                    height: original.height * factor,
                    width: original.width * factor,
                    outerHeight: original.outerHeight * factor,
                    outerWidth: original.outerWidth * factor
                }
            });

            elem.effect(o);
        };

        /*!
         * jQuery UI Effects Pulsate 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/pulsate-effect/
         */

        var effectPulsate = $.effects.effect.pulsate = function (o, done) {
            var elem = $(this),
                mode = $.effects.setMode(elem, o.mode || "show"),
                show = mode === "show",
                hide = mode === "hide",
                showhide = show || mode === "hide",


            // showing or hiding leaves of the "last" animation
            anims = (o.times || 5) * 2 + (showhide ? 1 : 0),
                duration = o.duration / anims,
                animateTo = 0,
                queue = elem.queue(),
                queuelen = queue.length,
                i;

            if (show || !elem.is(":visible")) {
                elem.css("opacity", 0).show();
                animateTo = 1;
            }

            // anims - 1 opacity "toggles"
            for (i = 1; i < anims; i++) {
                elem.animate({
                    opacity: animateTo
                }, duration, o.easing);
                animateTo = 1 - animateTo;
            }

            elem.animate({
                opacity: animateTo
            }, duration, o.easing);

            elem.queue(function () {
                if (hide) {
                    elem.hide();
                }
                done();
            });

            // We just queued up "anims" animations, we need to put them next in the queue
            if (queuelen > 1) {
                queue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));
            }
            elem.dequeue();
        };

        /*!
         * jQuery UI Effects Shake 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/shake-effect/
         */

        var effectShake = $.effects.effect.shake = function (o, done) {

            var el = $(this),
                props = ["position", "top", "bottom", "left", "right", "height", "width"],
                mode = $.effects.setMode(el, o.mode || "effect"),
                direction = o.direction || "left",
                distance = o.distance || 20,
                times = o.times || 3,
                anims = times * 2 + 1,
                speed = Math.round(o.duration / anims),
                ref = direction === "up" || direction === "down" ? "top" : "left",
                positiveMotion = direction === "up" || direction === "left",
                animation = {},
                animation1 = {},
                animation2 = {},
                i,


            // we will need to re-assemble the queue to stack our animations in place
            queue = el.queue(),
                queuelen = queue.length;

            $.effects.save(el, props);
            el.show();
            $.effects.createWrapper(el);

            // Animation
            animation[ref] = (positiveMotion ? "-=" : "+=") + distance;
            animation1[ref] = (positiveMotion ? "+=" : "-=") + distance * 2;
            animation2[ref] = (positiveMotion ? "-=" : "+=") + distance * 2;

            // Animate
            el.animate(animation, speed, o.easing);

            // Shakes
            for (i = 1; i < times; i++) {
                el.animate(animation1, speed, o.easing).animate(animation2, speed, o.easing);
            }
            el.animate(animation1, speed, o.easing).animate(animation, speed / 2, o.easing).queue(function () {
                if (mode === "hide") {
                    el.hide();
                }
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            });

            // inject all the animations we just queued to be first in line (after "inprogress")
            if (queuelen > 1) {
                queue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));
            }
            el.dequeue();
        };

        /*!
         * jQuery UI Effects Slide 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/slide-effect/
         */

        var effectSlide = $.effects.effect.slide = function (o, done) {

            // Create element
            var el = $(this),
                props = ["position", "top", "bottom", "left", "right", "width", "height"],
                mode = $.effects.setMode(el, o.mode || "show"),
                show = mode === "show",
                direction = o.direction || "left",
                ref = direction === "up" || direction === "down" ? "top" : "left",
                positiveMotion = direction === "up" || direction === "left",
                distance,
                animation = {};

            // Adjust
            $.effects.save(el, props);
            el.show();
            distance = o.distance || el[ref === "top" ? "outerHeight" : "outerWidth"](true);

            $.effects.createWrapper(el).css({
                overflow: "hidden"
            });

            if (show) {
                el.css(ref, positiveMotion ? isNaN(distance) ? "-" + distance : -distance : distance);
            }

            // Animation
            animation[ref] = (show ? positiveMotion ? "+=" : "-=" : positiveMotion ? "-=" : "+=") + distance;

            // Animate
            el.animate(animation, {
                queue: false,
                duration: o.duration,
                easing: o.easing,
                complete: function complete() {
                    if (mode === "hide") {
                        el.hide();
                    }
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el);
                    done();
                }
            });
        };

        /*!
         * jQuery UI Effects Transfer 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/transfer-effect/
         */

        var effectTransfer = $.effects.effect.transfer = function (o, done) {
            var elem = $(this),
                target = $(o.to),
                targetFixed = target.css("position") === "fixed",
                body = $("body"),
                fixTop = targetFixed ? body.scrollTop() : 0,
                fixLeft = targetFixed ? body.scrollLeft() : 0,
                endPosition = target.offset(),
                animation = {
                top: endPosition.top - fixTop,
                left: endPosition.left - fixLeft,
                height: target.innerHeight(),
                width: target.innerWidth()
            },
                startPosition = elem.offset(),
                transfer = $("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(o.className).css({
                top: startPosition.top - fixTop,
                left: startPosition.left - fixLeft,
                height: elem.innerHeight(),
                width: elem.innerWidth(),
                position: targetFixed ? "fixed" : "absolute"
            }).animate(animation, o.duration, o.easing, function () {
                transfer.remove();
                done();
            });
        };

        /*!
         * jQuery UI Progressbar 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/progressbar/
         */

        var progressbar = $.widget("ui.progressbar", {
            version: "1.11.4",
            options: {
                max: 100,
                value: 0,

                change: null,
                complete: null
            },

            min: 0,

            _create: function _create() {
                // Constrain initial value
                this.oldValue = this.options.value = this._constrainedValue();

                this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
                    // Only set static values, aria-valuenow and aria-valuemax are
                    // set inside _refreshValue()
                    role: "progressbar",
                    "aria-valuemin": this.min
                });

                this.valueDiv = $("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element);

                this._refreshValue();
            },

            _destroy: function _destroy() {
                this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");

                this.valueDiv.remove();
            },

            value: function value(newValue) {
                if (newValue === undefined) {
                    return this.options.value;
                }

                this.options.value = this._constrainedValue(newValue);
                this._refreshValue();
            },

            _constrainedValue: function _constrainedValue(newValue) {
                if (newValue === undefined) {
                    newValue = this.options.value;
                }

                this.indeterminate = newValue === false;

                // sanitize value
                if (typeof newValue !== "number") {
                    newValue = 0;
                }

                return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue));
            },

            _setOptions: function _setOptions(options) {
                // Ensure "value" option is set after other values (like max)
                var value = options.value;
                delete options.value;

                this._super(options);

                this.options.value = this._constrainedValue(value);
                this._refreshValue();
            },

            _setOption: function _setOption(key, value) {
                if (key === "max") {
                    // Don't allow a max less than min
                    value = Math.max(this.min, value);
                }
                if (key === "disabled") {
                    this.element.toggleClass("ui-state-disabled", !!value).attr("aria-disabled", value);
                }
                this._super(key, value);
            },

            _percentage: function _percentage() {
                return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
            },

            _refreshValue: function _refreshValue() {
                var value = this.options.value,
                    percentage = this._percentage();

                this.valueDiv.toggle(this.indeterminate || value > this.min).toggleClass("ui-corner-right", value === this.options.max).width(percentage.toFixed(0) + "%");

                this.element.toggleClass("ui-progressbar-indeterminate", this.indeterminate);

                if (this.indeterminate) {
                    this.element.removeAttr("aria-valuenow");
                    if (!this.overlayDiv) {
                        this.overlayDiv = $("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv);
                    }
                } else {
                    this.element.attr({
                        "aria-valuemax": this.options.max,
                        "aria-valuenow": value
                    });
                    if (this.overlayDiv) {
                        this.overlayDiv.remove();
                        this.overlayDiv = null;
                    }
                }

                if (this.oldValue !== value) {
                    this.oldValue = value;
                    this._trigger("change");
                }
                if (value === this.options.max) {
                    this._trigger("complete");
                }
            }
        });

        /*!
         * jQuery UI Selectable 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/selectable/
         */

        var selectable = $.widget("ui.selectable", $.ui.mouse, {
            version: "1.11.4",
            options: {
                appendTo: "body",
                autoRefresh: true,
                distance: 0,
                filter: "*",
                tolerance: "touch",

                // callbacks
                selected: null,
                selecting: null,
                start: null,
                stop: null,
                unselected: null,
                unselecting: null
            },
            _create: function _create() {
                var selectees,
                    that = this;

                this.element.addClass("ui-selectable");

                this.dragged = false;

                // cache selectee children based on filter
                this.refresh = function () {
                    selectees = $(that.options.filter, that.element[0]);
                    selectees.addClass("ui-selectee");
                    selectees.each(function () {
                        var $this = $(this),
                            pos = $this.offset();
                        $.data(this, "selectable-item", {
                            element: this,
                            $element: $this,
                            left: pos.left,
                            top: pos.top,
                            right: pos.left + $this.outerWidth(),
                            bottom: pos.top + $this.outerHeight(),
                            startselected: false,
                            selected: $this.hasClass("ui-selected"),
                            selecting: $this.hasClass("ui-selecting"),
                            unselecting: $this.hasClass("ui-unselecting")
                        });
                    });
                };
                this.refresh();

                this.selectees = selectees.addClass("ui-selectee");

                this._mouseInit();

                this.helper = $("<div class='ui-selectable-helper'></div>");
            },

            _destroy: function _destroy() {
                this.selectees.removeClass("ui-selectee").removeData("selectable-item");
                this.element.removeClass("ui-selectable ui-selectable-disabled");
                this._mouseDestroy();
            },

            _mouseStart: function _mouseStart(event) {
                var that = this,
                    options = this.options;

                this.opos = [event.pageX, event.pageY];

                if (this.options.disabled) {
                    return;
                }

                this.selectees = $(options.filter, this.element[0]);

                this._trigger("start", event);

                $(options.appendTo).append(this.helper);
                // position helper (lasso)
                this.helper.css({
                    "left": event.pageX,
                    "top": event.pageY,
                    "width": 0,
                    "height": 0
                });

                if (options.autoRefresh) {
                    this.refresh();
                }

                this.selectees.filter(".ui-selected").each(function () {
                    var selectee = $.data(this, "selectable-item");
                    selectee.startselected = true;
                    if (!event.metaKey && !event.ctrlKey) {
                        selectee.$element.removeClass("ui-selected");
                        selectee.selected = false;
                        selectee.$element.addClass("ui-unselecting");
                        selectee.unselecting = true;
                        // selectable UNSELECTING callback
                        that._trigger("unselecting", event, {
                            unselecting: selectee.element
                        });
                    }
                });

                $(event.target).parents().addBack().each(function () {
                    var doSelect,
                        selectee = $.data(this, "selectable-item");
                    if (selectee) {
                        doSelect = !event.metaKey && !event.ctrlKey || !selectee.$element.hasClass("ui-selected");
                        selectee.$element.removeClass(doSelect ? "ui-unselecting" : "ui-selected").addClass(doSelect ? "ui-selecting" : "ui-unselecting");
                        selectee.unselecting = !doSelect;
                        selectee.selecting = doSelect;
                        selectee.selected = doSelect;
                        // selectable (UN)SELECTING callback
                        if (doSelect) {
                            that._trigger("selecting", event, {
                                selecting: selectee.element
                            });
                        } else {
                            that._trigger("unselecting", event, {
                                unselecting: selectee.element
                            });
                        }
                        return false;
                    }
                });
            },

            _mouseDrag: function _mouseDrag(event) {

                this.dragged = true;

                if (this.options.disabled) {
                    return;
                }

                var tmp,
                    that = this,
                    options = this.options,
                    x1 = this.opos[0],
                    y1 = this.opos[1],
                    x2 = event.pageX,
                    y2 = event.pageY;

                if (x1 > x2) {
                    tmp = x2;x2 = x1;x1 = tmp;
                }
                if (y1 > y2) {
                    tmp = y2;y2 = y1;y1 = tmp;
                }
                this.helper.css({ left: x1, top: y1, width: x2 - x1, height: y2 - y1 });

                this.selectees.each(function () {
                    var selectee = $.data(this, "selectable-item"),
                        hit = false;

                    //prevent helper from being selected if appendTo: selectable
                    if (!selectee || selectee.element === that.element[0]) {
                        return;
                    }

                    if (options.tolerance === "touch") {
                        hit = !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1);
                    } else if (options.tolerance === "fit") {
                        hit = selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2;
                    }

                    if (hit) {
                        // SELECT
                        if (selectee.selected) {
                            selectee.$element.removeClass("ui-selected");
                            selectee.selected = false;
                        }
                        if (selectee.unselecting) {
                            selectee.$element.removeClass("ui-unselecting");
                            selectee.unselecting = false;
                        }
                        if (!selectee.selecting) {
                            selectee.$element.addClass("ui-selecting");
                            selectee.selecting = true;
                            // selectable SELECTING callback
                            that._trigger("selecting", event, {
                                selecting: selectee.element
                            });
                        }
                    } else {
                        // UNSELECT
                        if (selectee.selecting) {
                            if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
                                selectee.$element.removeClass("ui-selecting");
                                selectee.selecting = false;
                                selectee.$element.addClass("ui-selected");
                                selectee.selected = true;
                            } else {
                                selectee.$element.removeClass("ui-selecting");
                                selectee.selecting = false;
                                if (selectee.startselected) {
                                    selectee.$element.addClass("ui-unselecting");
                                    selectee.unselecting = true;
                                }
                                // selectable UNSELECTING callback
                                that._trigger("unselecting", event, {
                                    unselecting: selectee.element
                                });
                            }
                        }
                        if (selectee.selected) {
                            if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
                                selectee.$element.removeClass("ui-selected");
                                selectee.selected = false;

                                selectee.$element.addClass("ui-unselecting");
                                selectee.unselecting = true;
                                // selectable UNSELECTING callback
                                that._trigger("unselecting", event, {
                                    unselecting: selectee.element
                                });
                            }
                        }
                    }
                });

                return false;
            },

            _mouseStop: function _mouseStop(event) {
                var that = this;

                this.dragged = false;

                $(".ui-unselecting", this.element[0]).each(function () {
                    var selectee = $.data(this, "selectable-item");
                    selectee.$element.removeClass("ui-unselecting");
                    selectee.unselecting = false;
                    selectee.startselected = false;
                    that._trigger("unselected", event, {
                        unselected: selectee.element
                    });
                });
                $(".ui-selecting", this.element[0]).each(function () {
                    var selectee = $.data(this, "selectable-item");
                    selectee.$element.removeClass("ui-selecting").addClass("ui-selected");
                    selectee.selecting = false;
                    selectee.selected = true;
                    selectee.startselected = true;
                    that._trigger("selected", event, {
                        selected: selectee.element
                    });
                });
                this._trigger("stop", event);

                this.helper.remove();

                return false;
            }

        });

        /*!
         * jQuery UI Selectmenu 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/selectmenu
         */

        var selectmenu = $.widget("ui.selectmenu", {
            version: "1.11.4",
            defaultElement: "<select>",
            options: {
                appendTo: null,
                disabled: null,
                icons: {
                    button: "ui-icon-triangle-1-s"
                },
                position: {
                    my: "left top",
                    at: "left bottom",
                    collision: "none"
                },
                width: null,

                // callbacks
                change: null,
                close: null,
                focus: null,
                open: null,
                select: null
            },

            _create: function _create() {
                var selectmenuId = this.element.uniqueId().attr("id");
                this.ids = {
                    element: selectmenuId,
                    button: selectmenuId + "-button",
                    menu: selectmenuId + "-menu"
                };

                this._drawButton();
                this._drawMenu();

                if (this.options.disabled) {
                    this.disable();
                }
            },

            _drawButton: function _drawButton() {
                var that = this;

                // Associate existing label with the new button
                this.label = $("label[for='" + this.ids.element + "']").attr("for", this.ids.button);
                this._on(this.label, {
                    click: function click(event) {
                        this.button.focus();
                        event.preventDefault();
                    }
                });

                // Hide original select element
                this.element.hide();

                // Create button
                this.button = $("<span>", {
                    "class": "ui-selectmenu-button ui-widget ui-state-default ui-corner-all",
                    tabindex: this.options.disabled ? -1 : 0,
                    id: this.ids.button,
                    role: "combobox",
                    "aria-expanded": "false",
                    "aria-autocomplete": "list",
                    "aria-owns": this.ids.menu,
                    "aria-haspopup": "true"
                }).insertAfter(this.element);

                $("<span>", {
                    "class": "ui-icon " + this.options.icons.button
                }).prependTo(this.button);

                this.buttonText = $("<span>", {
                    "class": "ui-selectmenu-text"
                }).appendTo(this.button);

                this._setText(this.buttonText, this.element.find("option:selected").text());
                this._resizeButton();

                this._on(this.button, this._buttonEvents);
                this.button.one("focusin", function () {

                    // Delay rendering the menu items until the button receives focus.
                    // The menu may have already been rendered via a programmatic open.
                    if (!that.menuItems) {
                        that._refreshMenu();
                    }
                });
                this._hoverable(this.button);
                this._focusable(this.button);
            },

            _drawMenu: function _drawMenu() {
                var that = this;

                // Create menu
                this.menu = $("<ul>", {
                    "aria-hidden": "true",
                    "aria-labelledby": this.ids.button,
                    id: this.ids.menu
                });

                // Wrap menu
                this.menuWrap = $("<div>", {
                    "class": "ui-selectmenu-menu ui-front"
                }).append(this.menu).appendTo(this._appendTo());

                // Initialize menu widget
                this.menuInstance = this.menu.menu({
                    role: "listbox",
                    select: function select(event, ui) {
                        event.preventDefault();

                        // support: IE8
                        // If the item was selected via a click, the text selection
                        // will be destroyed in IE
                        that._setSelection();

                        that._select(ui.item.data("ui-selectmenu-item"), event);
                    },
                    focus: function focus(event, ui) {
                        var item = ui.item.data("ui-selectmenu-item");

                        // Prevent inital focus from firing and check if its a newly focused item
                        if (that.focusIndex != null && item.index !== that.focusIndex) {
                            that._trigger("focus", event, { item: item });
                            if (!that.isOpen) {
                                that._select(item, event);
                            }
                        }
                        that.focusIndex = item.index;

                        that.button.attr("aria-activedescendant", that.menuItems.eq(item.index).attr("id"));
                    }
                }).menu("instance");

                // Adjust menu styles to dropdown
                this.menu.addClass("ui-corner-bottom").removeClass("ui-corner-all");

                // Don't close the menu on mouseleave
                this.menuInstance._off(this.menu, "mouseleave");

                // Cancel the menu's collapseAll on document click
                this.menuInstance._closeOnDocumentClick = function () {
                    return false;
                };

                // Selects often contain empty items, but never contain dividers
                this.menuInstance._isDivider = function () {
                    return false;
                };
            },

            refresh: function refresh() {
                this._refreshMenu();
                this._setText(this.buttonText, this._getSelectedItem().text());
                if (!this.options.width) {
                    this._resizeButton();
                }
            },

            _refreshMenu: function _refreshMenu() {
                this.menu.empty();

                var item,
                    options = this.element.find("option");

                if (!options.length) {
                    return;
                }

                this._parseOptions(options);
                this._renderMenu(this.menu, this.items);

                this.menuInstance.refresh();
                this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup");

                item = this._getSelectedItem();

                // Update the menu to have the correct item focused
                this.menuInstance.focus(null, item);
                this._setAria(item.data("ui-selectmenu-item"));

                // Set disabled state
                this._setOption("disabled", this.element.prop("disabled"));
            },

            open: function open(event) {
                if (this.options.disabled) {
                    return;
                }

                // If this is the first time the menu is being opened, render the items
                if (!this.menuItems) {
                    this._refreshMenu();
                } else {

                    // Menu clears focus on close, reset focus to selected item
                    this.menu.find(".ui-state-focus").removeClass("ui-state-focus");
                    this.menuInstance.focus(null, this._getSelectedItem());
                }

                this.isOpen = true;
                this._toggleAttr();
                this._resizeMenu();
                this._position();

                this._on(this.document, this._documentClick);

                this._trigger("open", event);
            },

            _position: function _position() {
                this.menuWrap.position($.extend({ of: this.button }, this.options.position));
            },

            close: function close(event) {
                if (!this.isOpen) {
                    return;
                }

                this.isOpen = false;
                this._toggleAttr();

                this.range = null;
                this._off(this.document);

                this._trigger("close", event);
            },

            widget: function widget() {
                return this.button;
            },

            menuWidget: function menuWidget() {
                return this.menu;
            },

            _renderMenu: function _renderMenu(ul, items) {
                var that = this,
                    currentOptgroup = "";

                $.each(items, function (index, item) {
                    if (item.optgroup !== currentOptgroup) {
                        $("<li>", {
                            "class": "ui-selectmenu-optgroup ui-menu-divider" + (item.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : ""),
                            text: item.optgroup
                        }).appendTo(ul);

                        currentOptgroup = item.optgroup;
                    }

                    that._renderItemData(ul, item);
                });
            },

            _renderItemData: function _renderItemData(ul, item) {
                return this._renderItem(ul, item).data("ui-selectmenu-item", item);
            },

            _renderItem: function _renderItem(ul, item) {
                var li = $("<li>");

                if (item.disabled) {
                    li.addClass("ui-state-disabled");
                }
                this._setText(li, item.label);

                return li.appendTo(ul);
            },

            _setText: function _setText(element, value) {
                if (value) {
                    element.text(value);
                } else {
                    element.html("&#160;");
                }
            },

            _move: function _move(direction, event) {
                var item,
                    next,
                    filter = ".ui-menu-item";

                if (this.isOpen) {
                    item = this.menuItems.eq(this.focusIndex);
                } else {
                    item = this.menuItems.eq(this.element[0].selectedIndex);
                    filter += ":not(.ui-state-disabled)";
                }

                if (direction === "first" || direction === "last") {
                    next = item[direction === "first" ? "prevAll" : "nextAll"](filter).eq(-1);
                } else {
                    next = item[direction + "All"](filter).eq(0);
                }

                if (next.length) {
                    this.menuInstance.focus(event, next);
                }
            },

            _getSelectedItem: function _getSelectedItem() {
                return this.menuItems.eq(this.element[0].selectedIndex);
            },

            _toggle: function _toggle(event) {
                this[this.isOpen ? "close" : "open"](event);
            },

            _setSelection: function _setSelection() {
                var selection;

                if (!this.range) {
                    return;
                }

                if (window.getSelection) {
                    selection = window.getSelection();
                    selection.removeAllRanges();
                    selection.addRange(this.range);

                    // support: IE8
                } else {
                    this.range.select();
                }

                // support: IE
                // Setting the text selection kills the button focus in IE, but
                // restoring the focus doesn't kill the selection.
                this.button.focus();
            },

            _documentClick: {
                mousedown: function mousedown(event) {
                    if (!this.isOpen) {
                        return;
                    }

                    if (!$(event.target).closest(".ui-selectmenu-menu, #" + this.ids.button).length) {
                        this.close(event);
                    }
                }
            },

            _buttonEvents: {

                // Prevent text selection from being reset when interacting with the selectmenu (#10144)
                mousedown: function mousedown() {
                    var selection;

                    if (window.getSelection) {
                        selection = window.getSelection();
                        if (selection.rangeCount) {
                            this.range = selection.getRangeAt(0);
                        }

                        // support: IE8
                    } else {
                        this.range = document.selection.createRange();
                    }
                },

                click: function click(event) {
                    this._setSelection();
                    this._toggle(event);
                },

                keydown: function keydown(event) {
                    var preventDefault = true;
                    switch (event.keyCode) {
                        case $.ui.keyCode.TAB:
                        case $.ui.keyCode.ESCAPE:
                            this.close(event);
                            preventDefault = false;
                            break;
                        case $.ui.keyCode.ENTER:
                            if (this.isOpen) {
                                this._selectFocusedItem(event);
                            }
                            break;
                        case $.ui.keyCode.UP:
                            if (event.altKey) {
                                this._toggle(event);
                            } else {
                                this._move("prev", event);
                            }
                            break;
                        case $.ui.keyCode.DOWN:
                            if (event.altKey) {
                                this._toggle(event);
                            } else {
                                this._move("next", event);
                            }
                            break;
                        case $.ui.keyCode.SPACE:
                            if (this.isOpen) {
                                this._selectFocusedItem(event);
                            } else {
                                this._toggle(event);
                            }
                            break;
                        case $.ui.keyCode.LEFT:
                            this._move("prev", event);
                            break;
                        case $.ui.keyCode.RIGHT:
                            this._move("next", event);
                            break;
                        case $.ui.keyCode.HOME:
                        case $.ui.keyCode.PAGE_UP:
                            this._move("first", event);
                            break;
                        case $.ui.keyCode.END:
                        case $.ui.keyCode.PAGE_DOWN:
                            this._move("last", event);
                            break;
                        default:
                            this.menu.trigger(event);
                            preventDefault = false;
                    }

                    if (preventDefault) {
                        event.preventDefault();
                    }
                }
            },

            _selectFocusedItem: function _selectFocusedItem(event) {
                var item = this.menuItems.eq(this.focusIndex);
                if (!item.hasClass("ui-state-disabled")) {
                    this._select(item.data("ui-selectmenu-item"), event);
                }
            },

            _select: function _select(item, event) {
                var oldIndex = this.element[0].selectedIndex;

                // Change native select element
                this.element[0].selectedIndex = item.index;
                this._setText(this.buttonText, item.label);
                this._setAria(item);
                this._trigger("select", event, { item: item });

                if (item.index !== oldIndex) {
                    this._trigger("change", event, { item: item });
                }

                this.close(event);
            },

            _setAria: function _setAria(item) {
                var id = this.menuItems.eq(item.index).attr("id");

                this.button.attr({
                    "aria-labelledby": id,
                    "aria-activedescendant": id
                });
                this.menu.attr("aria-activedescendant", id);
            },

            _setOption: function _setOption(key, value) {
                if (key === "icons") {
                    this.button.find("span.ui-icon").removeClass(this.options.icons.button).addClass(value.button);
                }

                this._super(key, value);

                if (key === "appendTo") {
                    this.menuWrap.appendTo(this._appendTo());
                }

                if (key === "disabled") {
                    this.menuInstance.option("disabled", value);
                    this.button.toggleClass("ui-state-disabled", value).attr("aria-disabled", value);

                    this.element.prop("disabled", value);
                    if (value) {
                        this.button.attr("tabindex", -1);
                        this.close();
                    } else {
                        this.button.attr("tabindex", 0);
                    }
                }

                if (key === "width") {
                    this._resizeButton();
                }
            },

            _appendTo: function _appendTo() {
                var element = this.options.appendTo;

                if (element) {
                    element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);
                }

                if (!element || !element[0]) {
                    element = this.element.closest(".ui-front");
                }

                if (!element.length) {
                    element = this.document[0].body;
                }

                return element;
            },

            _toggleAttr: function _toggleAttr() {
                this.button.toggleClass("ui-corner-top", this.isOpen).toggleClass("ui-corner-all", !this.isOpen).attr("aria-expanded", this.isOpen);
                this.menuWrap.toggleClass("ui-selectmenu-open", this.isOpen);
                this.menu.attr("aria-hidden", !this.isOpen);
            },

            _resizeButton: function _resizeButton() {
                var width = this.options.width;

                if (!width) {
                    width = this.element.show().outerWidth();
                    this.element.hide();
                }

                this.button.outerWidth(width);
            },

            _resizeMenu: function _resizeMenu() {
                this.menu.outerWidth(Math.max(this.button.outerWidth(),

                // support: IE10
                // IE10 wraps long text (possibly a rounding bug)
                // so we add 1px to avoid the wrapping
                this.menu.width("").outerWidth() + 1));
            },

            _getCreateOptions: function _getCreateOptions() {
                return { disabled: this.element.prop("disabled") };
            },

            _parseOptions: function _parseOptions(options) {
                var data = [];
                options.each(function (index, item) {
                    var option = $(item),
                        optgroup = option.parent("optgroup");
                    data.push({
                        element: option,
                        index: index,
                        value: option.val(),
                        label: option.text(),
                        optgroup: optgroup.attr("label") || "",
                        disabled: optgroup.prop("disabled") || option.prop("disabled")
                    });
                });
                this.items = data;
            },

            _destroy: function _destroy() {
                this.menuWrap.remove();
                this.button.remove();
                this.element.show();
                this.element.removeUniqueId();
                this.label.attr("for", this.ids.element);
            }
        });

        /*!
         * jQuery UI Slider 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/slider/
         */

        var slider = $.widget("ui.slider", $.ui.mouse, {
            version: "1.11.4",
            widgetEventPrefix: "slide",

            options: {
                animate: false,
                distance: 0,
                max: 100,
                min: 0,
                orientation: "horizontal",
                range: false,
                step: 1,
                value: 0,
                values: null,

                // callbacks
                change: null,
                slide: null,
                start: null,
                stop: null
            },

            // number of pages in a slider
            // (how many times can you page up/down to go through the whole range)
            numPages: 5,

            _create: function _create() {
                this._keySliding = false;
                this._mouseSliding = false;
                this._animateOff = true;
                this._handleIndex = null;
                this._detectOrientation();
                this._mouseInit();
                this._calculateNewMax();

                this.element.addClass("ui-slider" + " ui-slider-" + this.orientation + " ui-widget" + " ui-widget-content" + " ui-corner-all");

                this._refresh();
                this._setOption("disabled", this.options.disabled);

                this._animateOff = false;
            },

            _refresh: function _refresh() {
                this._createRange();
                this._createHandles();
                this._setupEvents();
                this._refreshValue();
            },

            _createHandles: function _createHandles() {
                var i,
                    handleCount,
                    options = this.options,
                    existingHandles = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),
                    handle = "<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>",
                    handles = [];

                handleCount = options.values && options.values.length || 1;

                if (existingHandles.length > handleCount) {
                    existingHandles.slice(handleCount).remove();
                    existingHandles = existingHandles.slice(0, handleCount);
                }

                for (i = existingHandles.length; i < handleCount; i++) {
                    handles.push(handle);
                }

                this.handles = existingHandles.add($(handles.join("")).appendTo(this.element));

                this.handle = this.handles.eq(0);

                this.handles.each(function (i) {
                    $(this).data("ui-slider-handle-index", i);
                });
            },

            _createRange: function _createRange() {
                var options = this.options,
                    classes = "";

                if (options.range) {
                    if (options.range === true) {
                        if (!options.values) {
                            options.values = [this._valueMin(), this._valueMin()];
                        } else if (options.values.length && options.values.length !== 2) {
                            options.values = [options.values[0], options.values[0]];
                        } else if ($.isArray(options.values)) {
                            options.values = options.values.slice(0);
                        }
                    }

                    if (!this.range || !this.range.length) {
                        this.range = $("<div></div>").appendTo(this.element);

                        classes = "ui-slider-range" +
                        // note: this isn't the most fittingly semantic framework class for this element,
                        // but worked best visually with a variety of themes
                        " ui-widget-header ui-corner-all";
                    } else {
                        this.range.removeClass("ui-slider-range-min ui-slider-range-max")
                        // Handle range switching from true to min/max
                        .css({
                            "left": "",
                            "bottom": ""
                        });
                    }

                    this.range.addClass(classes + (options.range === "min" || options.range === "max" ? " ui-slider-range-" + options.range : ""));
                } else {
                    if (this.range) {
                        this.range.remove();
                    }
                    this.range = null;
                }
            },

            _setupEvents: function _setupEvents() {
                this._off(this.handles);
                this._on(this.handles, this._handleEvents);
                this._hoverable(this.handles);
                this._focusable(this.handles);
            },

            _destroy: function _destroy() {
                this.handles.remove();
                if (this.range) {
                    this.range.remove();
                }

                this.element.removeClass("ui-slider" + " ui-slider-horizontal" + " ui-slider-vertical" + " ui-widget" + " ui-widget-content" + " ui-corner-all");

                this._mouseDestroy();
            },

            _mouseCapture: function _mouseCapture(event) {
                var position,
                    normValue,
                    distance,
                    closestHandle,
                    index,
                    allowed,
                    offset,
                    mouseOverHandle,
                    that = this,
                    o = this.options;

                if (o.disabled) {
                    return false;
                }

                this.elementSize = {
                    width: this.element.outerWidth(),
                    height: this.element.outerHeight()
                };
                this.elementOffset = this.element.offset();

                position = { x: event.pageX, y: event.pageY };
                normValue = this._normValueFromMouse(position);
                distance = this._valueMax() - this._valueMin() + 1;
                this.handles.each(function (i) {
                    var thisDistance = Math.abs(normValue - that.values(i));
                    if (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {
                        distance = thisDistance;
                        closestHandle = $(this);
                        index = i;
                    }
                });

                allowed = this._start(event, index);
                if (allowed === false) {
                    return false;
                }
                this._mouseSliding = true;

                this._handleIndex = index;

                closestHandle.addClass("ui-state-active").focus();

                offset = closestHandle.offset();
                mouseOverHandle = !$(event.target).parents().addBack().is(".ui-slider-handle");
                this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
                    left: event.pageX - offset.left - closestHandle.width() / 2,
                    top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) - (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) + (parseInt(closestHandle.css("marginTop"), 10) || 0)
                };

                if (!this.handles.hasClass("ui-state-hover")) {
                    this._slide(event, index, normValue);
                }
                this._animateOff = true;
                return true;
            },

            _mouseStart: function _mouseStart() {
                return true;
            },

            _mouseDrag: function _mouseDrag(event) {
                var position = { x: event.pageX, y: event.pageY },
                    normValue = this._normValueFromMouse(position);

                this._slide(event, this._handleIndex, normValue);

                return false;
            },

            _mouseStop: function _mouseStop(event) {
                this.handles.removeClass("ui-state-active");
                this._mouseSliding = false;

                this._stop(event, this._handleIndex);
                this._change(event, this._handleIndex);

                this._handleIndex = null;
                this._clickOffset = null;
                this._animateOff = false;

                return false;
            },

            _detectOrientation: function _detectOrientation() {
                this.orientation = this.options.orientation === "vertical" ? "vertical" : "horizontal";
            },

            _normValueFromMouse: function _normValueFromMouse(position) {
                var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;

                if (this.orientation === "horizontal") {
                    pixelTotal = this.elementSize.width;
                    pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);
                } else {
                    pixelTotal = this.elementSize.height;
                    pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);
                }

                percentMouse = pixelMouse / pixelTotal;
                if (percentMouse > 1) {
                    percentMouse = 1;
                }
                if (percentMouse < 0) {
                    percentMouse = 0;
                }
                if (this.orientation === "vertical") {
                    percentMouse = 1 - percentMouse;
                }

                valueTotal = this._valueMax() - this._valueMin();
                valueMouse = this._valueMin() + percentMouse * valueTotal;

                return this._trimAlignValue(valueMouse);
            },

            _start: function _start(event, index) {
                var uiHash = {
                    handle: this.handles[index],
                    value: this.value()
                };
                if (this.options.values && this.options.values.length) {
                    uiHash.value = this.values(index);
                    uiHash.values = this.values();
                }
                return this._trigger("start", event, uiHash);
            },

            _slide: function _slide(event, index, newVal) {
                var otherVal, newValues, allowed;

                if (this.options.values && this.options.values.length) {
                    otherVal = this.values(index ? 0 : 1);

                    if (this.options.values.length === 2 && this.options.range === true && (index === 0 && newVal > otherVal || index === 1 && newVal < otherVal)) {
                        newVal = otherVal;
                    }

                    if (newVal !== this.values(index)) {
                        newValues = this.values();
                        newValues[index] = newVal;
                        // A slide can be canceled by returning false from the slide callback
                        allowed = this._trigger("slide", event, {
                            handle: this.handles[index],
                            value: newVal,
                            values: newValues
                        });
                        otherVal = this.values(index ? 0 : 1);
                        if (allowed !== false) {
                            this.values(index, newVal);
                        }
                    }
                } else {
                    if (newVal !== this.value()) {
                        // A slide can be canceled by returning false from the slide callback
                        allowed = this._trigger("slide", event, {
                            handle: this.handles[index],
                            value: newVal
                        });
                        if (allowed !== false) {
                            this.value(newVal);
                        }
                    }
                }
            },

            _stop: function _stop(event, index) {
                var uiHash = {
                    handle: this.handles[index],
                    value: this.value()
                };
                if (this.options.values && this.options.values.length) {
                    uiHash.value = this.values(index);
                    uiHash.values = this.values();
                }

                this._trigger("stop", event, uiHash);
            },

            _change: function _change(event, index) {
                if (!this._keySliding && !this._mouseSliding) {
                    var uiHash = {
                        handle: this.handles[index],
                        value: this.value()
                    };
                    if (this.options.values && this.options.values.length) {
                        uiHash.value = this.values(index);
                        uiHash.values = this.values();
                    }

                    //store the last changed value index for reference when handles overlap
                    this._lastChangedValue = index;

                    this._trigger("change", event, uiHash);
                }
            },

            value: function value(newValue) {
                if (arguments.length) {
                    this.options.value = this._trimAlignValue(newValue);
                    this._refreshValue();
                    this._change(null, 0);
                    return;
                }

                return this._value();
            },

            values: function values(index, newValue) {
                var vals, newValues, i;

                if (arguments.length > 1) {
                    this.options.values[index] = this._trimAlignValue(newValue);
                    this._refreshValue();
                    this._change(null, index);
                    return;
                }

                if (arguments.length) {
                    if ($.isArray(arguments[0])) {
                        vals = this.options.values;
                        newValues = arguments[0];
                        for (i = 0; i < vals.length; i += 1) {
                            vals[i] = this._trimAlignValue(newValues[i]);
                            this._change(null, i);
                        }
                        this._refreshValue();
                    } else {
                        if (this.options.values && this.options.values.length) {
                            return this._values(index);
                        } else {
                            return this.value();
                        }
                    }
                } else {
                    return this._values();
                }
            },

            _setOption: function _setOption(key, value) {
                var i,
                    valsLength = 0;

                if (key === "range" && this.options.range === true) {
                    if (value === "min") {
                        this.options.value = this._values(0);
                        this.options.values = null;
                    } else if (value === "max") {
                        this.options.value = this._values(this.options.values.length - 1);
                        this.options.values = null;
                    }
                }

                if ($.isArray(this.options.values)) {
                    valsLength = this.options.values.length;
                }

                if (key === "disabled") {
                    this.element.toggleClass("ui-state-disabled", !!value);
                }

                this._super(key, value);

                switch (key) {
                    case "orientation":
                        this._detectOrientation();
                        this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation);
                        this._refreshValue();

                        // Reset positioning from previous orientation
                        this.handles.css(value === "horizontal" ? "bottom" : "left", "");
                        break;
                    case "value":
                        this._animateOff = true;
                        this._refreshValue();
                        this._change(null, 0);
                        this._animateOff = false;
                        break;
                    case "values":
                        this._animateOff = true;
                        this._refreshValue();
                        for (i = 0; i < valsLength; i += 1) {
                            this._change(null, i);
                        }
                        this._animateOff = false;
                        break;
                    case "step":
                    case "min":
                    case "max":
                        this._animateOff = true;
                        this._calculateNewMax();
                        this._refreshValue();
                        this._animateOff = false;
                        break;
                    case "range":
                        this._animateOff = true;
                        this._refresh();
                        this._animateOff = false;
                        break;
                }
            },

            //internal value getter
            // _value() returns value trimmed by min and max, aligned by step
            _value: function _value() {
                var val = this.options.value;
                val = this._trimAlignValue(val);

                return val;
            },

            //internal values getter
            // _values() returns array of values trimmed by min and max, aligned by step
            // _values( index ) returns single value trimmed by min and max, aligned by step
            _values: function _values(index) {
                var val, vals, i;

                if (arguments.length) {
                    val = this.options.values[index];
                    val = this._trimAlignValue(val);

                    return val;
                } else if (this.options.values && this.options.values.length) {
                    // .slice() creates a copy of the array
                    // this copy gets trimmed by min and max and then returned
                    vals = this.options.values.slice();
                    for (i = 0; i < vals.length; i += 1) {
                        vals[i] = this._trimAlignValue(vals[i]);
                    }

                    return vals;
                } else {
                    return [];
                }
            },

            // returns the step-aligned value that val is closest to, between (inclusive) min and max
            _trimAlignValue: function _trimAlignValue(val) {
                if (val <= this._valueMin()) {
                    return this._valueMin();
                }
                if (val >= this._valueMax()) {
                    return this._valueMax();
                }
                var step = this.options.step > 0 ? this.options.step : 1,
                    valModStep = (val - this._valueMin()) % step,
                    alignValue = val - valModStep;

                if (Math.abs(valModStep) * 2 >= step) {
                    alignValue += valModStep > 0 ? step : -step;
                }

                // Since JavaScript has problems with large floats, round
                // the final value to 5 digits after the decimal point (see #4124)
                return parseFloat(alignValue.toFixed(5));
            },

            _calculateNewMax: function _calculateNewMax() {
                var max = this.options.max,
                    min = this._valueMin(),
                    step = this.options.step,
                    aboveMin = Math.floor(+(max - min).toFixed(this._precision()) / step) * step;
                max = aboveMin + min;
                this.max = parseFloat(max.toFixed(this._precision()));
            },

            _precision: function _precision() {
                var precision = this._precisionOf(this.options.step);
                if (this.options.min !== null) {
                    precision = Math.max(precision, this._precisionOf(this.options.min));
                }
                return precision;
            },

            _precisionOf: function _precisionOf(num) {
                var str = num.toString(),
                    decimal = str.indexOf(".");
                return decimal === -1 ? 0 : str.length - decimal - 1;
            },

            _valueMin: function _valueMin() {
                return this.options.min;
            },

            _valueMax: function _valueMax() {
                return this.max;
            },

            _refreshValue: function _refreshValue() {
                var lastValPercent,
                    valPercent,
                    value,
                    valueMin,
                    valueMax,
                    oRange = this.options.range,
                    o = this.options,
                    that = this,
                    animate = !this._animateOff ? o.animate : false,
                    _set = {};

                if (this.options.values && this.options.values.length) {
                    this.handles.each(function (i) {
                        valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;
                        _set[that.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                        $(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                        if (that.options.range === true) {
                            if (that.orientation === "horizontal") {
                                if (i === 0) {
                                    that.range.stop(1, 1)[animate ? "animate" : "css"]({ left: valPercent + "%" }, o.animate);
                                }
                                if (i === 1) {
                                    that.range[animate ? "animate" : "css"]({ width: valPercent - lastValPercent + "%" }, { queue: false, duration: o.animate });
                                }
                            } else {
                                if (i === 0) {
                                    that.range.stop(1, 1)[animate ? "animate" : "css"]({ bottom: valPercent + "%" }, o.animate);
                                }
                                if (i === 1) {
                                    that.range[animate ? "animate" : "css"]({ height: valPercent - lastValPercent + "%" }, { queue: false, duration: o.animate });
                                }
                            }
                        }
                        lastValPercent = valPercent;
                    });
                } else {
                    value = this.value();
                    valueMin = this._valueMin();
                    valueMax = this._valueMax();
                    valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;
                    _set[this.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                    this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);

                    if (oRange === "min" && this.orientation === "horizontal") {
                        this.range.stop(1, 1)[animate ? "animate" : "css"]({ width: valPercent + "%" }, o.animate);
                    }
                    if (oRange === "max" && this.orientation === "horizontal") {
                        this.range[animate ? "animate" : "css"]({ width: 100 - valPercent + "%" }, { queue: false, duration: o.animate });
                    }
                    if (oRange === "min" && this.orientation === "vertical") {
                        this.range.stop(1, 1)[animate ? "animate" : "css"]({ height: valPercent + "%" }, o.animate);
                    }
                    if (oRange === "max" && this.orientation === "vertical") {
                        this.range[animate ? "animate" : "css"]({ height: 100 - valPercent + "%" }, { queue: false, duration: o.animate });
                    }
                }
            },

            _handleEvents: {
                keydown: function keydown(event) {
                    var allowed,
                        curVal,
                        newVal,
                        step,
                        index = $(event.target).data("ui-slider-handle-index");

                    switch (event.keyCode) {
                        case $.ui.keyCode.HOME:
                        case $.ui.keyCode.END:
                        case $.ui.keyCode.PAGE_UP:
                        case $.ui.keyCode.PAGE_DOWN:
                        case $.ui.keyCode.UP:
                        case $.ui.keyCode.RIGHT:
                        case $.ui.keyCode.DOWN:
                        case $.ui.keyCode.LEFT:
                            event.preventDefault();
                            if (!this._keySliding) {
                                this._keySliding = true;
                                $(event.target).addClass("ui-state-active");
                                allowed = this._start(event, index);
                                if (allowed === false) {
                                    return;
                                }
                            }
                            break;
                    }

                    step = this.options.step;
                    if (this.options.values && this.options.values.length) {
                        curVal = newVal = this.values(index);
                    } else {
                        curVal = newVal = this.value();
                    }

                    switch (event.keyCode) {
                        case $.ui.keyCode.HOME:
                            newVal = this._valueMin();
                            break;
                        case $.ui.keyCode.END:
                            newVal = this._valueMax();
                            break;
                        case $.ui.keyCode.PAGE_UP:
                            newVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / this.numPages);
                            break;
                        case $.ui.keyCode.PAGE_DOWN:
                            newVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / this.numPages);
                            break;
                        case $.ui.keyCode.UP:
                        case $.ui.keyCode.RIGHT:
                            if (curVal === this._valueMax()) {
                                return;
                            }
                            newVal = this._trimAlignValue(curVal + step);
                            break;
                        case $.ui.keyCode.DOWN:
                        case $.ui.keyCode.LEFT:
                            if (curVal === this._valueMin()) {
                                return;
                            }
                            newVal = this._trimAlignValue(curVal - step);
                            break;
                    }

                    this._slide(event, index, newVal);
                },
                keyup: function keyup(event) {
                    var index = $(event.target).data("ui-slider-handle-index");

                    if (this._keySliding) {
                        this._keySliding = false;
                        this._stop(event, index);
                        this._change(event, index);
                        $(event.target).removeClass("ui-state-active");
                    }
                }
            }
        });

        /*!
         * jQuery UI Sortable 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/sortable/
         */

        var sortable = $.widget("ui.sortable", $.ui.mouse, {
            version: "1.11.4",
            widgetEventPrefix: "sort",
            ready: false,
            options: {
                appendTo: "parent",
                axis: false,
                connectWith: false,
                containment: false,
                cursor: "auto",
                cursorAt: false,
                dropOnEmpty: true,
                forcePlaceholderSize: false,
                forceHelperSize: false,
                grid: false,
                handle: false,
                helper: "original",
                items: "> *",
                opacity: false,
                placeholder: false,
                revert: false,
                scroll: true,
                scrollSensitivity: 20,
                scrollSpeed: 20,
                scope: "default",
                tolerance: "intersect",
                zIndex: 1000,

                // callbacks
                activate: null,
                beforeStop: null,
                change: null,
                deactivate: null,
                out: null,
                over: null,
                receive: null,
                remove: null,
                sort: null,
                start: null,
                stop: null,
                update: null
            },

            _isOverAxis: function _isOverAxis(x, reference, size) {
                return x >= reference && x < reference + size;
            },

            _isFloating: function _isFloating(item) {
                return (/left|right/.test(item.css("float")) || /inline|table-cell/.test(item.css("display"))
                );
            },

            _create: function _create() {
                this.containerCache = {};
                this.element.addClass("ui-sortable");

                //Get the items
                this.refresh();

                //Let's determine the parent's offset
                this.offset = this.element.offset();

                //Initialize mouse events for interaction
                this._mouseInit();

                this._setHandleClassName();

                //We're ready to go
                this.ready = true;
            },

            _setOption: function _setOption(key, value) {
                this._super(key, value);

                if (key === "handle") {
                    this._setHandleClassName();
                }
            },

            _setHandleClassName: function _setHandleClassName() {
                this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle");
                $.each(this.items, function () {
                    (this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item).addClass("ui-sortable-handle");
                });
            },

            _destroy: function _destroy() {
                this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle");
                this._mouseDestroy();

                for (var i = this.items.length - 1; i >= 0; i--) {
                    this.items[i].item.removeData(this.widgetName + "-item");
                }

                return this;
            },

            _mouseCapture: function _mouseCapture(event, overrideHandle) {
                var currentItem = null,
                    validHandle = false,
                    that = this;

                if (this.reverting) {
                    return false;
                }

                if (this.options.disabled || this.options.type === "static") {
                    return false;
                }

                //We have to refresh the items data once first
                this._refreshItems(event);

                //Find out if the clicked node (or one of its parents) is a actual item in this.items
                $(event.target).parents().each(function () {
                    if ($.data(this, that.widgetName + "-item") === that) {
                        currentItem = $(this);
                        return false;
                    }
                });
                if ($.data(event.target, that.widgetName + "-item") === that) {
                    currentItem = $(event.target);
                }

                if (!currentItem) {
                    return false;
                }
                if (this.options.handle && !overrideHandle) {
                    $(this.options.handle, currentItem).find("*").addBack().each(function () {
                        if (this === event.target) {
                            validHandle = true;
                        }
                    });
                    if (!validHandle) {
                        return false;
                    }
                }

                this.currentItem = currentItem;
                this._removeCurrentsFromItems();
                return true;
            },

            _mouseStart: function _mouseStart(event, overrideHandle, noActivation) {

                var i,
                    body,
                    o = this.options;

                this.currentContainer = this;

                //We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
                this.refreshPositions();

                //Create and append the visible helper
                this.helper = this._createHelper(event);

                //Cache the helper size
                this._cacheHelperProportions();

                /*
                 * - Position generation -
                 * This block generates everything position related - it's the core of draggables.
                 */

                //Cache the margins of the original element
                this._cacheMargins();

                //Get the next scrolling parent
                this.scrollParent = this.helper.scrollParent();

                //The element's absolute position on the page minus margins
                this.offset = this.currentItem.offset();
                this.offset = {
                    top: this.offset.top - this.margins.top,
                    left: this.offset.left - this.margins.left
                };

                $.extend(this.offset, {
                    click: { //Where the click happened, relative to the element
                        left: event.pageX - this.offset.left,
                        top: event.pageY - this.offset.top
                    },
                    parent: this._getParentOffset(),
                    relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
                });

                // Only after we got the offset, we can change the helper's position to absolute
                // TODO: Still need to figure out a way to make relative sorting possible
                this.helper.css("position", "absolute");
                this.cssPosition = this.helper.css("position");

                //Generate the original position
                this.originalPosition = this._generatePosition(event);
                this.originalPageX = event.pageX;
                this.originalPageY = event.pageY;

                //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
                o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);

                //Cache the former DOM position
                this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

                //If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
                if (this.helper[0] !== this.currentItem[0]) {
                    this.currentItem.hide();
                }

                //Create the placeholder
                this._createPlaceholder();

                //Set a containment if given in the options
                if (o.containment) {
                    this._setContainment();
                }

                if (o.cursor && o.cursor !== "auto") {
                    // cursor option
                    body = this.document.find("body");

                    // support: IE
                    this.storedCursor = body.css("cursor");
                    body.css("cursor", o.cursor);

                    this.storedStylesheet = $("<style>*{ cursor: " + o.cursor + " !important; }</style>").appendTo(body);
                }

                if (o.opacity) {
                    // opacity option
                    if (this.helper.css("opacity")) {
                        this._storedOpacity = this.helper.css("opacity");
                    }
                    this.helper.css("opacity", o.opacity);
                }

                if (o.zIndex) {
                    // zIndex option
                    if (this.helper.css("zIndex")) {
                        this._storedZIndex = this.helper.css("zIndex");
                    }
                    this.helper.css("zIndex", o.zIndex);
                }

                //Prepare scrolling
                if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
                    this.overflowOffset = this.scrollParent.offset();
                }

                //Call callbacks
                this._trigger("start", event, this._uiHash());

                //Recache the helper size
                if (!this._preserveHelperProportions) {
                    this._cacheHelperProportions();
                }

                //Post "activate" events to possible containers
                if (!noActivation) {
                    for (i = this.containers.length - 1; i >= 0; i--) {
                        this.containers[i]._trigger("activate", event, this._uiHash(this));
                    }
                }

                //Prepare possible droppables
                if ($.ui.ddmanager) {
                    $.ui.ddmanager.current = this;
                }

                if ($.ui.ddmanager && !o.dropBehaviour) {
                    $.ui.ddmanager.prepareOffsets(this, event);
                }

                this.dragging = true;

                this.helper.addClass("ui-sortable-helper");
                this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
                return true;
            },

            _mouseDrag: function _mouseDrag(event) {
                var i,
                    item,
                    itemElement,
                    intersection,
                    o = this.options,
                    scrolled = false;

                //Compute the helpers position
                this.position = this._generatePosition(event);
                this.positionAbs = this._convertPositionTo("absolute");

                if (!this.lastPositionAbs) {
                    this.lastPositionAbs = this.positionAbs;
                }

                //Do scrolling
                if (this.options.scroll) {
                    if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {

                        if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) {
                            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
                        } else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
                            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
                        }

                        if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) {
                            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
                        } else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
                            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
                        }
                    } else {

                        if (event.pageY - this.document.scrollTop() < o.scrollSensitivity) {
                            scrolled = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed);
                        } else if (this.window.height() - (event.pageY - this.document.scrollTop()) < o.scrollSensitivity) {
                            scrolled = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed);
                        }

                        if (event.pageX - this.document.scrollLeft() < o.scrollSensitivity) {
                            scrolled = this.document.scrollLeft(this.document.scrollLeft() - o.scrollSpeed);
                        } else if (this.window.width() - (event.pageX - this.document.scrollLeft()) < o.scrollSensitivity) {
                            scrolled = this.document.scrollLeft(this.document.scrollLeft() + o.scrollSpeed);
                        }
                    }

                    if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
                        $.ui.ddmanager.prepareOffsets(this, event);
                    }
                }

                //Regenerate the absolute position used for position checks
                this.positionAbs = this._convertPositionTo("absolute");

                //Set the helper position
                if (!this.options.axis || this.options.axis !== "y") {
                    this.helper[0].style.left = this.position.left + "px";
                }
                if (!this.options.axis || this.options.axis !== "x") {
                    this.helper[0].style.top = this.position.top + "px";
                }

                //Rearrange
                for (i = this.items.length - 1; i >= 0; i--) {

                    //Cache variables and intersection, continue if no intersection
                    item = this.items[i];
                    itemElement = item.item[0];
                    intersection = this._intersectsWithPointer(item);
                    if (!intersection) {
                        continue;
                    }

                    // Only put the placeholder inside the current Container, skip all
                    // items from other containers. This works because when moving
                    // an item from one container to another the
                    // currentContainer is switched before the placeholder is moved.
                    //
                    // Without this, moving items in "sub-sortables" can cause
                    // the placeholder to jitter between the outer and inner container.
                    if (item.instance !== this.currentContainer) {
                        continue;
                    }

                    // cannot intersect with itself
                    // no useless actions that have been done before
                    // no action if the item moved is the parent of the item checked
                    if (itemElement !== this.currentItem[0] && this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && (this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)) {

                        this.direction = intersection === 1 ? "down" : "up";

                        if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
                            this._rearrange(event, item);
                        } else {
                            break;
                        }

                        this._trigger("change", event, this._uiHash());
                        break;
                    }
                }

                //Post events to containers
                this._contactContainers(event);

                //Interconnect with droppables
                if ($.ui.ddmanager) {
                    $.ui.ddmanager.drag(this, event);
                }

                //Call callbacks
                this._trigger("sort", event, this._uiHash());

                this.lastPositionAbs = this.positionAbs;
                return false;
            },

            _mouseStop: function _mouseStop(event, noPropagation) {

                if (!event) {
                    return;
                }

                //If we are using droppables, inform the manager about the drop
                if ($.ui.ddmanager && !this.options.dropBehaviour) {
                    $.ui.ddmanager.drop(this, event);
                }

                if (this.options.revert) {
                    var that = this,
                        cur = this.placeholder.offset(),
                        axis = this.options.axis,
                        animation = {};

                    if (!axis || axis === "x") {
                        animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft);
                    }
                    if (!axis || axis === "y") {
                        animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop);
                    }
                    this.reverting = true;
                    $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function () {
                        that._clear(event);
                    });
                } else {
                    this._clear(event, noPropagation);
                }

                return false;
            },

            cancel: function cancel() {

                if (this.dragging) {

                    this._mouseUp({ target: null });

                    if (this.options.helper === "original") {
                        this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
                    } else {
                        this.currentItem.show();
                    }

                    //Post deactivating events to containers
                    for (var i = this.containers.length - 1; i >= 0; i--) {
                        this.containers[i]._trigger("deactivate", null, this._uiHash(this));
                        if (this.containers[i].containerCache.over) {
                            this.containers[i]._trigger("out", null, this._uiHash(this));
                            this.containers[i].containerCache.over = 0;
                        }
                    }
                }

                if (this.placeholder) {
                    //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
                    if (this.placeholder[0].parentNode) {
                        this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                    }
                    if (this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
                        this.helper.remove();
                    }

                    $.extend(this, {
                        helper: null,
                        dragging: false,
                        reverting: false,
                        _noFinalSort: null
                    });

                    if (this.domPosition.prev) {
                        $(this.domPosition.prev).after(this.currentItem);
                    } else {
                        $(this.domPosition.parent).prepend(this.currentItem);
                    }
                }

                return this;
            },

            serialize: function serialize(o) {

                var items = this._getItemsAsjQuery(o && o.connected),
                    str = [];
                o = o || {};

                $(items).each(function () {
                    var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || /(.+)[\-=_](.+)/);
                    if (res) {
                        str.push((o.key || res[1] + "[]") + "=" + (o.key && o.expression ? res[1] : res[2]));
                    }
                });

                if (!str.length && o.key) {
                    str.push(o.key + "=");
                }

                return str.join("&");
            },

            toArray: function toArray(o) {

                var items = this._getItemsAsjQuery(o && o.connected),
                    ret = [];

                o = o || {};

                items.each(function () {
                    ret.push($(o.item || this).attr(o.attribute || "id") || "");
                });
                return ret;
            },

            /* Be careful with the following core functions */
            _intersectsWith: function _intersectsWith(item) {

                var x1 = this.positionAbs.left,
                    x2 = x1 + this.helperProportions.width,
                    y1 = this.positionAbs.top,
                    y2 = y1 + this.helperProportions.height,
                    l = item.left,
                    r = l + item.width,
                    t = item.top,
                    b = t + item.height,
                    dyClick = this.offset.click.top,
                    dxClick = this.offset.click.left,
                    isOverElementHeight = this.options.axis === "x" || y1 + dyClick > t && y1 + dyClick < b,
                    isOverElementWidth = this.options.axis === "y" || x1 + dxClick > l && x1 + dxClick < r,
                    isOverElement = isOverElementHeight && isOverElementWidth;

                if (this.options.tolerance === "pointer" || this.options.forcePointerForContainers || this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"]) {
                    return isOverElement;
                } else {

                    return l < x1 + this.helperProportions.width / 2 && // Right Half
                    x2 - this.helperProportions.width / 2 < r && // Left Half
                    t < y1 + this.helperProportions.height / 2 && // Bottom Half
                    y2 - this.helperProportions.height / 2 < b; // Top Half
                }
            },

            _intersectsWithPointer: function _intersectsWithPointer(item) {

                var isOverElementHeight = this.options.axis === "x" || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
                    isOverElementWidth = this.options.axis === "y" || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
                    isOverElement = isOverElementHeight && isOverElementWidth,
                    verticalDirection = this._getDragVerticalDirection(),
                    horizontalDirection = this._getDragHorizontalDirection();

                if (!isOverElement) {
                    return false;
                }

                return this.floating ? horizontalDirection && horizontalDirection === "right" || verticalDirection === "down" ? 2 : 1 : verticalDirection && (verticalDirection === "down" ? 2 : 1);
            },

            _intersectsWithSides: function _intersectsWithSides(item) {

                var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height),
                    isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width),
                    verticalDirection = this._getDragVerticalDirection(),
                    horizontalDirection = this._getDragHorizontalDirection();

                if (this.floating && horizontalDirection) {
                    return horizontalDirection === "right" && isOverRightHalf || horizontalDirection === "left" && !isOverRightHalf;
                } else {
                    return verticalDirection && (verticalDirection === "down" && isOverBottomHalf || verticalDirection === "up" && !isOverBottomHalf);
                }
            },

            _getDragVerticalDirection: function _getDragVerticalDirection() {
                var delta = this.positionAbs.top - this.lastPositionAbs.top;
                return delta !== 0 && (delta > 0 ? "down" : "up");
            },

            _getDragHorizontalDirection: function _getDragHorizontalDirection() {
                var delta = this.positionAbs.left - this.lastPositionAbs.left;
                return delta !== 0 && (delta > 0 ? "right" : "left");
            },

            refresh: function refresh(event) {
                this._refreshItems(event);
                this._setHandleClassName();
                this.refreshPositions();
                return this;
            },

            _connectWith: function _connectWith() {
                var options = this.options;
                return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
            },

            _getItemsAsjQuery: function _getItemsAsjQuery(connected) {

                var i,
                    j,
                    cur,
                    inst,
                    items = [],
                    queries = [],
                    connectWith = this._connectWith();

                if (connectWith && connected) {
                    for (i = connectWith.length - 1; i >= 0; i--) {
                        cur = $(connectWith[i], this.document[0]);
                        for (j = cur.length - 1; j >= 0; j--) {
                            inst = $.data(cur[j], this.widgetFullName);
                            if (inst && inst !== this && !inst.options.disabled) {
                                queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
                            }
                        }
                    }
                }

                queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);

                function addItems() {
                    items.push(this);
                }
                for (i = queries.length - 1; i >= 0; i--) {
                    queries[i][0].each(addItems);
                }

                return $(items);
            },

            _removeCurrentsFromItems: function _removeCurrentsFromItems() {

                var list = this.currentItem.find(":data(" + this.widgetName + "-item)");

                this.items = $.grep(this.items, function (item) {
                    for (var j = 0; j < list.length; j++) {
                        if (list[j] === item.item[0]) {
                            return false;
                        }
                    }
                    return true;
                });
            },

            _refreshItems: function _refreshItems(event) {

                this.items = [];
                this.containers = [this];

                var i,
                    j,
                    cur,
                    inst,
                    targetData,
                    _queries,
                    item,
                    queriesLength,
                    items = this.items,
                    queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
                    connectWith = this._connectWith();

                if (connectWith && this.ready) {
                    //Shouldn't be run the first time through due to massive slow-down
                    for (i = connectWith.length - 1; i >= 0; i--) {
                        cur = $(connectWith[i], this.document[0]);
                        for (j = cur.length - 1; j >= 0; j--) {
                            inst = $.data(cur[j], this.widgetFullName);
                            if (inst && inst !== this && !inst.options.disabled) {
                                queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
                                this.containers.push(inst);
                            }
                        }
                    }
                }

                for (i = queries.length - 1; i >= 0; i--) {
                    targetData = queries[i][1];
                    _queries = queries[i][0];

                    for (j = 0, queriesLength = _queries.length; j < queriesLength; j++) {
                        item = $(_queries[j]);

                        item.data(this.widgetName + "-item", targetData); // Data for target checking (mouse manager)

                        items.push({
                            item: item,
                            instance: targetData,
                            width: 0, height: 0,
                            left: 0, top: 0
                        });
                    }
                }
            },

            refreshPositions: function refreshPositions(fast) {

                // Determine whether items are being displayed horizontally
                this.floating = this.items.length ? this.options.axis === "x" || this._isFloating(this.items[0].item) : false;

                //This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
                if (this.offsetParent && this.helper) {
                    this.offset.parent = this._getParentOffset();
                }

                var i, item, t, p;

                for (i = this.items.length - 1; i >= 0; i--) {
                    item = this.items[i];

                    //We ignore calculating positions of all connected containers when we're not over them
                    if (item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
                        continue;
                    }

                    t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

                    if (!fast) {
                        item.width = t.outerWidth();
                        item.height = t.outerHeight();
                    }

                    p = t.offset();
                    item.left = p.left;
                    item.top = p.top;
                }

                if (this.options.custom && this.options.custom.refreshContainers) {
                    this.options.custom.refreshContainers.call(this);
                } else {
                    for (i = this.containers.length - 1; i >= 0; i--) {
                        p = this.containers[i].element.offset();
                        this.containers[i].containerCache.left = p.left;
                        this.containers[i].containerCache.top = p.top;
                        this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
                        this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
                    }
                }

                return this;
            },

            _createPlaceholder: function _createPlaceholder(that) {
                that = that || this;
                var className,
                    o = that.options;

                if (!o.placeholder || o.placeholder.constructor === String) {
                    className = o.placeholder;
                    o.placeholder = {
                        element: function element() {

                            var nodeName = that.currentItem[0].nodeName.toLowerCase(),
                                element = $("<" + nodeName + ">", that.document[0]).addClass(className || that.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper");

                            if (nodeName === "tbody") {
                                that._createTrPlaceholder(that.currentItem.find("tr").eq(0), $("<tr>", that.document[0]).appendTo(element));
                            } else if (nodeName === "tr") {
                                that._createTrPlaceholder(that.currentItem, element);
                            } else if (nodeName === "img") {
                                element.attr("src", that.currentItem.attr("src"));
                            }

                            if (!className) {
                                element.css("visibility", "hidden");
                            }

                            return element;
                        },
                        update: function update(container, p) {

                            // 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
                            // 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
                            if (className && !o.forcePlaceholderSize) {
                                return;
                            }

                            //If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
                            if (!p.height()) {
                                p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop") || 0, 10) - parseInt(that.currentItem.css("paddingBottom") || 0, 10));
                            }
                            if (!p.width()) {
                                p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft") || 0, 10) - parseInt(that.currentItem.css("paddingRight") || 0, 10));
                            }
                        }
                    };
                }

                //Create the placeholder
                that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));

                //Append it after the actual current item
                that.currentItem.after(that.placeholder);

                //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
                o.placeholder.update(that, that.placeholder);
            },

            _createTrPlaceholder: function _createTrPlaceholder(sourceTr, targetTr) {
                var that = this;

                sourceTr.children().each(function () {
                    $("<td>&#160;</td>", that.document[0]).attr("colspan", $(this).attr("colspan") || 1).appendTo(targetTr);
                });
            },

            _contactContainers: function _contactContainers(event) {
                var i,
                    j,
                    dist,
                    itemWithLeastDistance,
                    posProperty,
                    sizeProperty,
                    cur,
                    nearBottom,
                    floating,
                    axis,
                    innermostContainer = null,
                    innermostIndex = null;

                // get innermost container that intersects with item
                for (i = this.containers.length - 1; i >= 0; i--) {

                    // never consider a container that's located within the item itself
                    if ($.contains(this.currentItem[0], this.containers[i].element[0])) {
                        continue;
                    }

                    if (this._intersectsWith(this.containers[i].containerCache)) {

                        // if we've already found a container and it's more "inner" than this, then continue
                        if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
                            continue;
                        }

                        innermostContainer = this.containers[i];
                        innermostIndex = i;
                    } else {
                        // container doesn't intersect. trigger "out" event if necessary
                        if (this.containers[i].containerCache.over) {
                            this.containers[i]._trigger("out", event, this._uiHash(this));
                            this.containers[i].containerCache.over = 0;
                        }
                    }
                }

                // if no intersecting containers found, return
                if (!innermostContainer) {
                    return;
                }

                // move the item into the container if it's not there already
                if (this.containers.length === 1) {
                    if (!this.containers[innermostIndex].containerCache.over) {
                        this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                        this.containers[innermostIndex].containerCache.over = 1;
                    }
                } else {

                    //When entering a new container, we will find the item with the least distance and append our item near it
                    dist = 10000;
                    itemWithLeastDistance = null;
                    floating = innermostContainer.floating || this._isFloating(this.currentItem);
                    posProperty = floating ? "left" : "top";
                    sizeProperty = floating ? "width" : "height";
                    axis = floating ? "clientX" : "clientY";

                    for (j = this.items.length - 1; j >= 0; j--) {
                        if (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
                            continue;
                        }
                        if (this.items[j].item[0] === this.currentItem[0]) {
                            continue;
                        }

                        cur = this.items[j].item.offset()[posProperty];
                        nearBottom = false;
                        if (event[axis] - cur > this.items[j][sizeProperty] / 2) {
                            nearBottom = true;
                        }

                        if (Math.abs(event[axis] - cur) < dist) {
                            dist = Math.abs(event[axis] - cur);
                            itemWithLeastDistance = this.items[j];
                            this.direction = nearBottom ? "up" : "down";
                        }
                    }

                    //Check if dropOnEmpty is enabled
                    if (!itemWithLeastDistance && !this.options.dropOnEmpty) {
                        return;
                    }

                    if (this.currentContainer === this.containers[innermostIndex]) {
                        if (!this.currentContainer.containerCache.over) {
                            this.containers[innermostIndex]._trigger("over", event, this._uiHash());
                            this.currentContainer.containerCache.over = 1;
                        }
                        return;
                    }

                    itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
                    this._trigger("change", event, this._uiHash());
                    this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
                    this.currentContainer = this.containers[innermostIndex];

                    //Update the placeholder
                    this.options.placeholder.update(this.currentContainer, this.placeholder);

                    this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                    this.containers[innermostIndex].containerCache.over = 1;
                }
            },

            _createHelper: function _createHelper(event) {

                var o = this.options,
                    helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : o.helper === "clone" ? this.currentItem.clone() : this.currentItem;

                //Add the helper to the DOM if that didn't happen already
                if (!helper.parents("body").length) {
                    $(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
                }

                if (helper[0] === this.currentItem[0]) {
                    this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
                }

                if (!helper[0].style.width || o.forceHelperSize) {
                    helper.width(this.currentItem.width());
                }
                if (!helper[0].style.height || o.forceHelperSize) {
                    helper.height(this.currentItem.height());
                }

                return helper;
            },

            _adjustOffsetFromHelper: function _adjustOffsetFromHelper(obj) {
                if (typeof obj === "string") {
                    obj = obj.split(" ");
                }
                if ($.isArray(obj)) {
                    obj = { left: +obj[0], top: +obj[1] || 0 };
                }
                if ("left" in obj) {
                    this.offset.click.left = obj.left + this.margins.left;
                }
                if ("right" in obj) {
                    this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
                }
                if ("top" in obj) {
                    this.offset.click.top = obj.top + this.margins.top;
                }
                if ("bottom" in obj) {
                    this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
                }
            },

            _getParentOffset: function _getParentOffset() {

                //Get the offsetParent and cache its position
                this.offsetParent = this.helper.offsetParent();
                var po = this.offsetParent.offset();

                // This is a special case where we need to modify a offset calculated on start, since the following happened:
                // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
                // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
                //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
                if (this.cssPosition === "absolute" && this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                    po.left += this.scrollParent.scrollLeft();
                    po.top += this.scrollParent.scrollTop();
                }

                // This needs to be actually done for all browsers, since pageX/pageY includes this information
                // with an ugly IE fix
                if (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie) {
                    po = { top: 0, left: 0 };
                }

                return {
                    top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                    left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
                };
            },

            _getRelativeOffset: function _getRelativeOffset() {

                if (this.cssPosition === "relative") {
                    var p = this.currentItem.position();
                    return {
                        top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                        left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                    };
                } else {
                    return { top: 0, left: 0 };
                }
            },

            _cacheMargins: function _cacheMargins() {
                this.margins = {
                    left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
                    top: parseInt(this.currentItem.css("marginTop"), 10) || 0
                };
            },

            _cacheHelperProportions: function _cacheHelperProportions() {
                this.helperProportions = {
                    width: this.helper.outerWidth(),
                    height: this.helper.outerHeight()
                };
            },

            _setContainment: function _setContainment() {

                var ce,
                    co,
                    over,
                    o = this.options;
                if (o.containment === "parent") {
                    o.containment = this.helper[0].parentNode;
                }
                if (o.containment === "document" || o.containment === "window") {
                    this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, o.containment === "document" ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, (o.containment === "document" ? this.document.width() : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                }

                if (!/^(document|window|parent)$/.test(o.containment)) {
                    ce = $(o.containment)[0];
                    co = $(o.containment).offset();
                    over = $(ce).css("overflow") !== "hidden";

                    this.containment = [co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top];
                }
            },

            _convertPositionTo: function _convertPositionTo(d, pos) {

                if (!pos) {
                    pos = this.position;
                }
                var mod = d === "absolute" ? 1 : -1,
                    scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                    scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);

                return {
                    top: pos.top + // The absolute mouse position
                    this.offset.relative.top * mod + // Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.parent.top * mod - // The offsetParent's offset without borders (offset + border)
                    (this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,
                    left: pos.left + // The absolute mouse position
                    this.offset.relative.left * mod + // Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.parent.left * mod - // The offsetParent's offset without borders (offset + border)
                    (this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod
                };
            },

            _generatePosition: function _generatePosition(event) {

                var top,
                    left,
                    o = this.options,
                    pageX = event.pageX,
                    pageY = event.pageY,
                    scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                    scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);

                // This is another very weird special case that only happens for relative elements:
                // 1. If the css position is relative
                // 2. and the scroll parent is the document or similar to the offset parent
                // we have to refresh the relative offset during the scroll so there are no jumps
                if (this.cssPosition === "relative" && !(this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0])) {
                    this.offset.relative = this._getRelativeOffset();
                }

                /*
                 * - Position constraining -
                 * Constrain the position to a mix of grid, containment.
                 */

                if (this.originalPosition) {
                    //If we are not dragging yet, we won't check for options

                    if (this.containment) {
                        if (event.pageX - this.offset.click.left < this.containment[0]) {
                            pageX = this.containment[0] + this.offset.click.left;
                        }
                        if (event.pageY - this.offset.click.top < this.containment[1]) {
                            pageY = this.containment[1] + this.offset.click.top;
                        }
                        if (event.pageX - this.offset.click.left > this.containment[2]) {
                            pageX = this.containment[2] + this.offset.click.left;
                        }
                        if (event.pageY - this.offset.click.top > this.containment[3]) {
                            pageY = this.containment[3] + this.offset.click.top;
                        }
                    }

                    if (o.grid) {
                        top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                        pageY = this.containment ? top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3] ? top : top - this.offset.click.top >= this.containment[1] ? top - o.grid[1] : top + o.grid[1] : top;

                        left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                        pageX = this.containment ? left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2] ? left : left - this.offset.click.left >= this.containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
                    }
                }

                return {
                    top: pageY - // The absolute mouse position
                    this.offset.click.top - // Click offset (relative to the element)
                    this.offset.relative.top - // Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.parent.top + ( // The offsetParent's offset without borders (offset + border)
                    this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),
                    left: pageX - // The absolute mouse position
                    this.offset.click.left - // Click offset (relative to the element)
                    this.offset.relative.left - // Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.parent.left + ( // The offsetParent's offset without borders (offset + border)
                    this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())
                };
            },

            _rearrange: function _rearrange(event, i, a, hardRefresh) {

                a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], this.direction === "down" ? i.item[0] : i.item[0].nextSibling);

                //Various things done here to improve the performance:
                // 1. we create a setTimeout, that calls refreshPositions
                // 2. on the instance, we have a counter variable, that get's higher after every append
                // 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
                // 4. this lets only the last addition to the timeout stack through
                this.counter = this.counter ? ++this.counter : 1;
                var counter = this.counter;

                this._delay(function () {
                    if (counter === this.counter) {
                        this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
                    }
                });
            },

            _clear: function _clear(event, noPropagation) {

                this.reverting = false;
                // We delay all events that have to be triggered to after the point where the placeholder has been removed and
                // everything else normalized again
                var i,
                    delayedTriggers = [];

                // We first have to update the dom position of the actual currentItem
                // Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
                if (!this._noFinalSort && this.currentItem.parent().length) {
                    this.placeholder.before(this.currentItem);
                }
                this._noFinalSort = null;

                if (this.helper[0] === this.currentItem[0]) {
                    for (i in this._storedCSS) {
                        if (this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
                            this._storedCSS[i] = "";
                        }
                    }
                    this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
                } else {
                    this.currentItem.show();
                }

                if (this.fromOutside && !noPropagation) {
                    delayedTriggers.push(function (event) {
                        this._trigger("receive", event, this._uiHash(this.fromOutside));
                    });
                }
                if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
                    delayedTriggers.push(function (event) {
                        this._trigger("update", event, this._uiHash());
                    }); //Trigger update callback if the DOM position has changed
                }

                // Check if the items Container has Changed and trigger appropriate
                // events.
                if (this !== this.currentContainer) {
                    if (!noPropagation) {
                        delayedTriggers.push(function (event) {
                            this._trigger("remove", event, this._uiHash());
                        });
                        delayedTriggers.push(function (c) {
                            return function (event) {
                                c._trigger("receive", event, this._uiHash(this));
                            };
                        }.call(this, this.currentContainer));
                        delayedTriggers.push(function (c) {
                            return function (event) {
                                c._trigger("update", event, this._uiHash(this));
                            };
                        }.call(this, this.currentContainer));
                    }
                }

                //Post events to containers
                function delayEvent(type, instance, container) {
                    return function (event) {
                        container._trigger(type, event, instance._uiHash(instance));
                    };
                }
                for (i = this.containers.length - 1; i >= 0; i--) {
                    if (!noPropagation) {
                        delayedTriggers.push(delayEvent("deactivate", this, this.containers[i]));
                    }
                    if (this.containers[i].containerCache.over) {
                        delayedTriggers.push(delayEvent("out", this, this.containers[i]));
                        this.containers[i].containerCache.over = 0;
                    }
                }

                //Do what was originally in plugins
                if (this.storedCursor) {
                    this.document.find("body").css("cursor", this.storedCursor);
                    this.storedStylesheet.remove();
                }
                if (this._storedOpacity) {
                    this.helper.css("opacity", this._storedOpacity);
                }
                if (this._storedZIndex) {
                    this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
                }

                this.dragging = false;

                if (!noPropagation) {
                    this._trigger("beforeStop", event, this._uiHash());
                }

                //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
                this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

                if (!this.cancelHelperRemoval) {
                    if (this.helper[0] !== this.currentItem[0]) {
                        this.helper.remove();
                    }
                    this.helper = null;
                }

                if (!noPropagation) {
                    for (i = 0; i < delayedTriggers.length; i++) {
                        delayedTriggers[i].call(this, event);
                    } //Trigger all delayed events
                    this._trigger("stop", event, this._uiHash());
                }

                this.fromOutside = false;
                return !this.cancelHelperRemoval;
            },

            _trigger: function _trigger() {
                if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
                    this.cancel();
                }
            },

            _uiHash: function _uiHash(_inst) {
                var inst = _inst || this;
                return {
                    helper: inst.helper,
                    placeholder: inst.placeholder || $([]),
                    position: inst.position,
                    originalPosition: inst.originalPosition,
                    offset: inst.positionAbs,
                    item: inst.currentItem,
                    sender: _inst ? _inst.element : null
                };
            }

        });

        /*!
         * jQuery UI Spinner 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/spinner/
         */

        function spinner_modifier(fn) {
            return function () {
                var previous = this.element.val();
                fn.apply(this, arguments);
                this._refresh();
                if (previous !== this.element.val()) {
                    this._trigger("change");
                }
            };
        }

        var spinner = $.widget("ui.spinner", {
            version: "1.11.4",
            defaultElement: "<input>",
            widgetEventPrefix: "spin",
            options: {
                culture: null,
                icons: {
                    down: "ui-icon-triangle-1-s",
                    up: "ui-icon-triangle-1-n"
                },
                incremental: true,
                max: null,
                min: null,
                numberFormat: null,
                page: 10,
                step: 1,

                change: null,
                spin: null,
                start: null,
                stop: null
            },

            _create: function _create() {
                // handle string values that need to be parsed
                this._setOption("max", this.options.max);
                this._setOption("min", this.options.min);
                this._setOption("step", this.options.step);

                // Only format if there is a value, prevents the field from being marked
                // as invalid in Firefox, see #9573.
                if (this.value() !== "") {
                    // Format the value, but don't constrain.
                    this._value(this.element.val(), true);
                }

                this._draw();
                this._on(this._events);
                this._refresh();

                // turning off autocomplete prevents the browser from remembering the
                // value when navigating through history, so we re-enable autocomplete
                // if the page is unloaded before the widget is destroyed. #7790
                this._on(this.window, {
                    beforeunload: function beforeunload() {
                        this.element.removeAttr("autocomplete");
                    }
                });
            },

            _getCreateOptions: function _getCreateOptions() {
                var options = {},
                    element = this.element;

                $.each(["min", "max", "step"], function (i, option) {
                    var value = element.attr(option);
                    if (value !== undefined && value.length) {
                        options[option] = value;
                    }
                });

                return options;
            },

            _events: {
                keydown: function keydown(event) {
                    if (this._start(event) && this._keydown(event)) {
                        event.preventDefault();
                    }
                },
                keyup: "_stop",
                focus: function focus() {
                    this.previous = this.element.val();
                },
                blur: function blur(event) {
                    if (this.cancelBlur) {
                        delete this.cancelBlur;
                        return;
                    }

                    this._stop();
                    this._refresh();
                    if (this.previous !== this.element.val()) {
                        this._trigger("change", event);
                    }
                },
                mousewheel: function mousewheel(event, delta) {
                    if (!delta) {
                        return;
                    }
                    if (!this.spinning && !this._start(event)) {
                        return false;
                    }

                    this._spin((delta > 0 ? 1 : -1) * this.options.step, event);
                    clearTimeout(this.mousewheelTimer);
                    this.mousewheelTimer = this._delay(function () {
                        if (this.spinning) {
                            this._stop(event);
                        }
                    }, 100);
                    event.preventDefault();
                },
                "mousedown .ui-spinner-button": function mousedownUiSpinnerButton(event) {
                    var previous;

                    // We never want the buttons to have focus; whenever the user is
                    // interacting with the spinner, the focus should be on the input.
                    // If the input is focused then this.previous is properly set from
                    // when the input first received focus. If the input is not focused
                    // then we need to set this.previous based on the value before spinning.
                    previous = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val();
                    function checkFocus() {
                        var isActive = this.element[0] === this.document[0].activeElement;
                        if (!isActive) {
                            this.element.focus();
                            this.previous = previous;
                            // support: IE
                            // IE sets focus asynchronously, so we need to check if focus
                            // moved off of the input because the user clicked on the button.
                            this._delay(function () {
                                this.previous = previous;
                            });
                        }
                    }

                    // ensure focus is on (or stays on) the text field
                    event.preventDefault();
                    checkFocus.call(this);

                    // support: IE
                    // IE doesn't prevent moving focus even with event.preventDefault()
                    // so we set a flag to know when we should ignore the blur event
                    // and check (again) if focus moved off of the input.
                    this.cancelBlur = true;
                    this._delay(function () {
                        delete this.cancelBlur;
                        checkFocus.call(this);
                    });

                    if (this._start(event) === false) {
                        return;
                    }

                    this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
                },
                "mouseup .ui-spinner-button": "_stop",
                "mouseenter .ui-spinner-button": function mouseenterUiSpinnerButton(event) {
                    // button will add ui-state-active if mouse was down while mouseleave and kept down
                    if (!$(event.currentTarget).hasClass("ui-state-active")) {
                        return;
                    }

                    if (this._start(event) === false) {
                        return false;
                    }
                    this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
                },
                // TODO: do we really want to consider this a stop?
                // shouldn't we just stop the repeater and wait until mouseup before
                // we trigger the stop event?
                "mouseleave .ui-spinner-button": "_stop"
            },

            _draw: function _draw() {
                var uiSpinner = this.uiSpinner = this.element.addClass("ui-spinner-input").attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent()
                // add buttons
                .append(this._buttonHtml());

                this.element.attr("role", "spinbutton");

                // button bindings
                this.buttons = uiSpinner.find(".ui-spinner-button").attr("tabIndex", -1).button().removeClass("ui-corner-all");

                // IE 6 doesn't understand height: 50% for the buttons
                // unless the wrapper has an explicit height
                if (this.buttons.height() > Math.ceil(uiSpinner.height() * 0.5) && uiSpinner.height() > 0) {
                    uiSpinner.height(uiSpinner.height());
                }

                // disable spinner if element was already disabled
                if (this.options.disabled) {
                    this.disable();
                }
            },

            _keydown: function _keydown(event) {
                var options = this.options,
                    keyCode = $.ui.keyCode;

                switch (event.keyCode) {
                    case keyCode.UP:
                        this._repeat(null, 1, event);
                        return true;
                    case keyCode.DOWN:
                        this._repeat(null, -1, event);
                        return true;
                    case keyCode.PAGE_UP:
                        this._repeat(null, options.page, event);
                        return true;
                    case keyCode.PAGE_DOWN:
                        this._repeat(null, -options.page, event);
                        return true;
                }

                return false;
            },

            _uiSpinnerHtml: function _uiSpinnerHtml() {
                return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
            },

            _buttonHtml: function _buttonHtml() {
                return "" + "<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" + "<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" + "</a>" + "<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" + "<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" + "</a>";
            },

            _start: function _start(event) {
                if (!this.spinning && this._trigger("start", event) === false) {
                    return false;
                }

                if (!this.counter) {
                    this.counter = 1;
                }
                this.spinning = true;
                return true;
            },

            _repeat: function _repeat(i, steps, event) {
                i = i || 500;

                clearTimeout(this.timer);
                this.timer = this._delay(function () {
                    this._repeat(40, steps, event);
                }, i);

                this._spin(steps * this.options.step, event);
            },

            _spin: function _spin(step, event) {
                var value = this.value() || 0;

                if (!this.counter) {
                    this.counter = 1;
                }

                value = this._adjustValue(value + step * this._increment(this.counter));

                if (!this.spinning || this._trigger("spin", event, { value: value }) !== false) {
                    this._value(value);
                    this.counter++;
                }
            },

            _increment: function _increment(i) {
                var incremental = this.options.incremental;

                if (incremental) {
                    return $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1);
                }

                return 1;
            },

            _precision: function _precision() {
                var precision = this._precisionOf(this.options.step);
                if (this.options.min !== null) {
                    precision = Math.max(precision, this._precisionOf(this.options.min));
                }
                return precision;
            },

            _precisionOf: function _precisionOf(num) {
                var str = num.toString(),
                    decimal = str.indexOf(".");
                return decimal === -1 ? 0 : str.length - decimal - 1;
            },

            _adjustValue: function _adjustValue(value) {
                var base,
                    aboveMin,
                    options = this.options;

                // make sure we're at a valid step
                // - find out where we are relative to the base (min or 0)
                base = options.min !== null ? options.min : 0;
                aboveMin = value - base;
                // - round to the nearest step
                aboveMin = Math.round(aboveMin / options.step) * options.step;
                // - rounding is based on 0, so adjust back to our base
                value = base + aboveMin;

                // fix precision from bad JS floating point math
                value = parseFloat(value.toFixed(this._precision()));

                // clamp the value
                if (options.max !== null && value > options.max) {
                    return options.max;
                }
                if (options.min !== null && value < options.min) {
                    return options.min;
                }

                return value;
            },

            _stop: function _stop(event) {
                if (!this.spinning) {
                    return;
                }

                clearTimeout(this.timer);
                clearTimeout(this.mousewheelTimer);
                this.counter = 0;
                this.spinning = false;
                this._trigger("stop", event);
            },

            _setOption: function _setOption(key, value) {
                if (key === "culture" || key === "numberFormat") {
                    var prevValue = this._parse(this.element.val());
                    this.options[key] = value;
                    this.element.val(this._format(prevValue));
                    return;
                }

                if (key === "max" || key === "min" || key === "step") {
                    if (typeof value === "string") {
                        value = this._parse(value);
                    }
                }
                if (key === "icons") {
                    this.buttons.first().find(".ui-icon").removeClass(this.options.icons.up).addClass(value.up);
                    this.buttons.last().find(".ui-icon").removeClass(this.options.icons.down).addClass(value.down);
                }

                this._super(key, value);

                if (key === "disabled") {
                    this.widget().toggleClass("ui-state-disabled", !!value);
                    this.element.prop("disabled", !!value);
                    this.buttons.button(value ? "disable" : "enable");
                }
            },

            _setOptions: spinner_modifier(function (options) {
                this._super(options);
            }),

            _parse: function _parse(val) {
                if (typeof val === "string" && val !== "") {
                    val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val;
                }
                return val === "" || isNaN(val) ? null : val;
            },

            _format: function _format(value) {
                if (value === "") {
                    return "";
                }
                return window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;
            },

            _refresh: function _refresh() {
                this.element.attr({
                    "aria-valuemin": this.options.min,
                    "aria-valuemax": this.options.max,
                    // TODO: what should we do with values that can't be parsed?
                    "aria-valuenow": this._parse(this.element.val())
                });
            },

            isValid: function isValid() {
                var value = this.value();

                // null is invalid
                if (value === null) {
                    return false;
                }

                // if value gets adjusted, it's invalid
                return value === this._adjustValue(value);
            },

            // update the value without triggering change
            _value: function _value(value, allowAny) {
                var parsed;
                if (value !== "") {
                    parsed = this._parse(value);
                    if (parsed !== null) {
                        if (!allowAny) {
                            parsed = this._adjustValue(parsed);
                        }
                        value = this._format(parsed);
                    }
                }
                this.element.val(value);
                this._refresh();
            },

            _destroy: function _destroy() {
                this.element.removeClass("ui-spinner-input").prop("disabled", false).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
                this.uiSpinner.replaceWith(this.element);
            },

            stepUp: spinner_modifier(function (steps) {
                this._stepUp(steps);
            }),
            _stepUp: function _stepUp(steps) {
                if (this._start()) {
                    this._spin((steps || 1) * this.options.step);
                    this._stop();
                }
            },

            stepDown: spinner_modifier(function (steps) {
                this._stepDown(steps);
            }),
            _stepDown: function _stepDown(steps) {
                if (this._start()) {
                    this._spin((steps || 1) * -this.options.step);
                    this._stop();
                }
            },

            pageUp: spinner_modifier(function (pages) {
                this._stepUp((pages || 1) * this.options.page);
            }),

            pageDown: spinner_modifier(function (pages) {
                this._stepDown((pages || 1) * this.options.page);
            }),

            value: function value(newVal) {
                if (!arguments.length) {
                    return this._parse(this.element.val());
                }
                spinner_modifier(this._value).call(this, newVal);
            },

            widget: function widget() {
                return this.uiSpinner;
            }
        });

        /*!
         * jQuery UI Tabs 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/tabs/
         */

        var tabs = $.widget("ui.tabs", {
            version: "1.11.4",
            delay: 300,
            options: {
                active: null,
                collapsible: false,
                event: "click",
                heightStyle: "content",
                hide: null,
                show: null,

                // callbacks
                activate: null,
                beforeActivate: null,
                beforeLoad: null,
                load: null
            },

            _isLocal: function () {
                var rhash = /#.*$/;

                return function (anchor) {
                    var anchorUrl, locationUrl;

                    // support: IE7
                    // IE7 doesn't normalize the href property when set via script (#9317)
                    anchor = anchor.cloneNode(false);

                    anchorUrl = anchor.href.replace(rhash, "");
                    locationUrl = location.href.replace(rhash, "");

                    // decoding may throw an error if the URL isn't UTF-8 (#9518)
                    try {
                        anchorUrl = decodeURIComponent(anchorUrl);
                    } catch (error) {}
                    try {
                        locationUrl = decodeURIComponent(locationUrl);
                    } catch (error) {}

                    return anchor.hash.length > 1 && anchorUrl === locationUrl;
                };
            }(),

            _create: function _create() {
                var that = this,
                    options = this.options;

                this.running = false;

                this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible", options.collapsible);

                this._processTabs();
                options.active = this._initialActive();

                // Take disabling tabs via class attribute from HTML
                // into account and update option properly.
                if ($.isArray(options.disabled)) {
                    options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"), function (li) {
                        return that.tabs.index(li);
                    }))).sort();
                }

                // check for length avoids error when initializing empty list
                if (this.options.active !== false && this.anchors.length) {
                    this.active = this._findActive(options.active);
                } else {
                    this.active = $();
                }

                this._refresh();

                if (this.active.length) {
                    this.load(options.active);
                }
            },

            _initialActive: function _initialActive() {
                var active = this.options.active,
                    collapsible = this.options.collapsible,
                    locationHash = location.hash.substring(1);

                if (active === null) {
                    // check the fragment identifier in the URL
                    if (locationHash) {
                        this.tabs.each(function (i, tab) {
                            if ($(tab).attr("aria-controls") === locationHash) {
                                active = i;
                                return false;
                            }
                        });
                    }

                    // check for a tab marked active via a class
                    if (active === null) {
                        active = this.tabs.index(this.tabs.filter(".ui-tabs-active"));
                    }

                    // no active tab, set to false
                    if (active === null || active === -1) {
                        active = this.tabs.length ? 0 : false;
                    }
                }

                // handle numbers: negative, out of range
                if (active !== false) {
                    active = this.tabs.index(this.tabs.eq(active));
                    if (active === -1) {
                        active = collapsible ? false : 0;
                    }
                }

                // don't allow collapsible: false and active: false
                if (!collapsible && active === false && this.anchors.length) {
                    active = 0;
                }

                return active;
            },

            _getCreateEventData: function _getCreateEventData() {
                return {
                    tab: this.active,
                    panel: !this.active.length ? $() : this._getPanelForTab(this.active)
                };
            },

            _tabKeydown: function _tabKeydown(event) {
                var focusedTab = $(this.document[0].activeElement).closest("li"),
                    selectedIndex = this.tabs.index(focusedTab),
                    goingForward = true;

                if (this._handlePageNav(event)) {
                    return;
                }

                switch (event.keyCode) {
                    case $.ui.keyCode.RIGHT:
                    case $.ui.keyCode.DOWN:
                        selectedIndex++;
                        break;
                    case $.ui.keyCode.UP:
                    case $.ui.keyCode.LEFT:
                        goingForward = false;
                        selectedIndex--;
                        break;
                    case $.ui.keyCode.END:
                        selectedIndex = this.anchors.length - 1;
                        break;
                    case $.ui.keyCode.HOME:
                        selectedIndex = 0;
                        break;
                    case $.ui.keyCode.SPACE:
                        // Activate only, no collapsing
                        event.preventDefault();
                        clearTimeout(this.activating);
                        this._activate(selectedIndex);
                        return;
                    case $.ui.keyCode.ENTER:
                        // Toggle (cancel delayed activation, allow collapsing)
                        event.preventDefault();
                        clearTimeout(this.activating);
                        // Determine if we should collapse or activate
                        this._activate(selectedIndex === this.options.active ? false : selectedIndex);
                        return;
                    default:
                        return;
                }

                // Focus the appropriate tab, based on which key was pressed
                event.preventDefault();
                clearTimeout(this.activating);
                selectedIndex = this._focusNextTab(selectedIndex, goingForward);

                // Navigating with control/command key will prevent automatic activation
                if (!event.ctrlKey && !event.metaKey) {

                    // Update aria-selected immediately so that AT think the tab is already selected.
                    // Otherwise AT may confuse the user by stating that they need to activate the tab,
                    // but the tab will already be activated by the time the announcement finishes.
                    focusedTab.attr("aria-selected", "false");
                    this.tabs.eq(selectedIndex).attr("aria-selected", "true");

                    this.activating = this._delay(function () {
                        this.option("active", selectedIndex);
                    }, this.delay);
                }
            },

            _panelKeydown: function _panelKeydown(event) {
                if (this._handlePageNav(event)) {
                    return;
                }

                // Ctrl+up moves focus to the current tab
                if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {
                    event.preventDefault();
                    this.active.focus();
                }
            },

            // Alt+page up/down moves focus to the previous/next tab (and activates)
            _handlePageNav: function _handlePageNav(event) {
                if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {
                    this._activate(this._focusNextTab(this.options.active - 1, false));
                    return true;
                }
                if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {
                    this._activate(this._focusNextTab(this.options.active + 1, true));
                    return true;
                }
            },

            _findNextTab: function _findNextTab(index, goingForward) {
                var lastTabIndex = this.tabs.length - 1;

                function constrain() {
                    if (index > lastTabIndex) {
                        index = 0;
                    }
                    if (index < 0) {
                        index = lastTabIndex;
                    }
                    return index;
                }

                while ($.inArray(constrain(), this.options.disabled) !== -1) {
                    index = goingForward ? index + 1 : index - 1;
                }

                return index;
            },

            _focusNextTab: function _focusNextTab(index, goingForward) {
                index = this._findNextTab(index, goingForward);
                this.tabs.eq(index).focus();
                return index;
            },

            _setOption: function _setOption(key, value) {
                if (key === "active") {
                    // _activate() will handle invalid values and update this.options
                    this._activate(value);
                    return;
                }

                if (key === "disabled") {
                    // don't use the widget factory's disabled handling
                    this._setupDisabled(value);
                    return;
                }

                this._super(key, value);

                if (key === "collapsible") {
                    this.element.toggleClass("ui-tabs-collapsible", value);
                    // Setting collapsible: false while collapsed; open first panel
                    if (!value && this.options.active === false) {
                        this._activate(0);
                    }
                }

                if (key === "event") {
                    this._setupEvents(value);
                }

                if (key === "heightStyle") {
                    this._setupHeightStyle(value);
                }
            },

            _sanitizeSelector: function _sanitizeSelector(hash) {
                return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
            },

            refresh: function refresh() {
                var options = this.options,
                    lis = this.tablist.children(":has(a[href])");

                // get disabled tabs from class attribute from HTML
                // this will get converted to a boolean if needed in _refresh()
                options.disabled = $.map(lis.filter(".ui-state-disabled"), function (tab) {
                    return lis.index(tab);
                });

                this._processTabs();

                // was collapsed or no tabs
                if (options.active === false || !this.anchors.length) {
                    options.active = false;
                    this.active = $();
                    // was active, but active tab is gone
                } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {
                    // all remaining tabs are disabled
                    if (this.tabs.length === options.disabled.length) {
                        options.active = false;
                        this.active = $();
                        // activate previous tab
                    } else {
                        this._activate(this._findNextTab(Math.max(0, options.active - 1), false));
                    }
                    // was active, active tab still exists
                } else {
                    // make sure active index is correct
                    options.active = this.tabs.index(this.active);
                }

                this._refresh();
            },

            _refresh: function _refresh() {
                this._setupDisabled(this.options.disabled);
                this._setupEvents(this.options.event);
                this._setupHeightStyle(this.options.heightStyle);

                this.tabs.not(this.active).attr({
                    "aria-selected": "false",
                    "aria-expanded": "false",
                    tabIndex: -1
                });
                this.panels.not(this._getPanelForTab(this.active)).hide().attr({
                    "aria-hidden": "true"
                });

                // Make sure one tab is in the tab order
                if (!this.active.length) {
                    this.tabs.eq(0).attr("tabIndex", 0);
                } else {
                    this.active.addClass("ui-tabs-active ui-state-active").attr({
                        "aria-selected": "true",
                        "aria-expanded": "true",
                        tabIndex: 0
                    });
                    this._getPanelForTab(this.active).show().attr({
                        "aria-hidden": "false"
                    });
                }
            },

            _processTabs: function _processTabs() {
                var that = this,
                    prevTabs = this.tabs,
                    prevAnchors = this.anchors,
                    prevPanels = this.panels;

                this.tablist = this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role", "tablist")

                // Prevent users from focusing disabled tabs via click
                .delegate("> li", "mousedown" + this.eventNamespace, function (event) {
                    if ($(this).is(".ui-state-disabled")) {
                        event.preventDefault();
                    }
                })

                // support: IE <9
                // Preventing the default action in mousedown doesn't prevent IE
                // from focusing the element, so if the anchor gets focused, blur.
                // We don't have to worry about focusing the previously focused
                // element since clicking on a non-focusable element should focus
                // the body anyway.
                .delegate(".ui-tabs-anchor", "focus" + this.eventNamespace, function () {
                    if ($(this).closest("li").is(".ui-state-disabled")) {
                        this.blur();
                    }
                });

                this.tabs = this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({
                    role: "tab",
                    tabIndex: -1
                });

                this.anchors = this.tabs.map(function () {
                    return $("a", this)[0];
                }).addClass("ui-tabs-anchor").attr({
                    role: "presentation",
                    tabIndex: -1
                });

                this.panels = $();

                this.anchors.each(function (i, anchor) {
                    var selector,
                        panel,
                        panelId,
                        anchorId = $(anchor).uniqueId().attr("id"),
                        tab = $(anchor).closest("li"),
                        originalAriaControls = tab.attr("aria-controls");

                    // inline tab
                    if (that._isLocal(anchor)) {
                        selector = anchor.hash;
                        panelId = selector.substring(1);
                        panel = that.element.find(that._sanitizeSelector(selector));
                        // remote tab
                    } else {
                        // If the tab doesn't already have aria-controls,
                        // generate an id by using a throw-away element
                        panelId = tab.attr("aria-controls") || $({}).uniqueId()[0].id;
                        selector = "#" + panelId;
                        panel = that.element.find(selector);
                        if (!panel.length) {
                            panel = that._createPanel(panelId);
                            panel.insertAfter(that.panels[i - 1] || that.tablist);
                        }
                        panel.attr("aria-live", "polite");
                    }

                    if (panel.length) {
                        that.panels = that.panels.add(panel);
                    }
                    if (originalAriaControls) {
                        tab.data("ui-tabs-aria-controls", originalAriaControls);
                    }
                    tab.attr({
                        "aria-controls": panelId,
                        "aria-labelledby": anchorId
                    });
                    panel.attr("aria-labelledby", anchorId);
                });

                this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role", "tabpanel");

                // Avoid memory leaks (#10056)
                if (prevTabs) {
                    this._off(prevTabs.not(this.tabs));
                    this._off(prevAnchors.not(this.anchors));
                    this._off(prevPanels.not(this.panels));
                }
            },

            // allow overriding how to find the list for rare usage scenarios (#7715)
            _getList: function _getList() {
                return this.tablist || this.element.find("ol,ul").eq(0);
            },

            _createPanel: function _createPanel(id) {
                return $("<div>").attr("id", id).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", true);
            },

            _setupDisabled: function _setupDisabled(disabled) {
                if ($.isArray(disabled)) {
                    if (!disabled.length) {
                        disabled = false;
                    } else if (disabled.length === this.anchors.length) {
                        disabled = true;
                    }
                }

                // disable tabs
                for (var i = 0, li; li = this.tabs[i]; i++) {
                    if (disabled === true || $.inArray(i, disabled) !== -1) {
                        $(li).addClass("ui-state-disabled").attr("aria-disabled", "true");
                    } else {
                        $(li).removeClass("ui-state-disabled").removeAttr("aria-disabled");
                    }
                }

                this.options.disabled = disabled;
            },

            _setupEvents: function _setupEvents(event) {
                var events = {};
                if (event) {
                    $.each(event.split(" "), function (index, eventName) {
                        events[eventName] = "_eventHandler";
                    });
                }

                this._off(this.anchors.add(this.tabs).add(this.panels));
                // Always prevent the default action, even when disabled
                this._on(true, this.anchors, {
                    click: function click(event) {
                        event.preventDefault();
                    }
                });
                this._on(this.anchors, events);
                this._on(this.tabs, { keydown: "_tabKeydown" });
                this._on(this.panels, { keydown: "_panelKeydown" });

                this._focusable(this.tabs);
                this._hoverable(this.tabs);
            },

            _setupHeightStyle: function _setupHeightStyle(heightStyle) {
                var maxHeight,
                    parent = this.element.parent();

                if (heightStyle === "fill") {
                    maxHeight = parent.height();
                    maxHeight -= this.element.outerHeight() - this.element.height();

                    this.element.siblings(":visible").each(function () {
                        var elem = $(this),
                            position = elem.css("position");

                        if (position === "absolute" || position === "fixed") {
                            return;
                        }
                        maxHeight -= elem.outerHeight(true);
                    });

                    this.element.children().not(this.panels).each(function () {
                        maxHeight -= $(this).outerHeight(true);
                    });

                    this.panels.each(function () {
                        $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
                    }).css("overflow", "auto");
                } else if (heightStyle === "auto") {
                    maxHeight = 0;
                    this.panels.each(function () {
                        maxHeight = Math.max(maxHeight, $(this).height("").height());
                    }).height(maxHeight);
                }
            },

            _eventHandler: function _eventHandler(event) {
                var options = this.options,
                    active = this.active,
                    anchor = $(event.currentTarget),
                    tab = anchor.closest("li"),
                    clickedIsActive = tab[0] === active[0],
                    collapsing = clickedIsActive && options.collapsible,
                    toShow = collapsing ? $() : this._getPanelForTab(tab),
                    toHide = !active.length ? $() : this._getPanelForTab(active),
                    eventData = {
                    oldTab: active,
                    oldPanel: toHide,
                    newTab: collapsing ? $() : tab,
                    newPanel: toShow
                };

                event.preventDefault();

                if (tab.hasClass("ui-state-disabled") ||
                // tab is already loading
                tab.hasClass("ui-tabs-loading") ||
                // can't switch durning an animation
                this.running ||
                // click on active header, but not collapsible
                clickedIsActive && !options.collapsible ||
                // allow canceling activation
                this._trigger("beforeActivate", event, eventData) === false) {
                    return;
                }

                options.active = collapsing ? false : this.tabs.index(tab);

                this.active = clickedIsActive ? $() : tab;
                if (this.xhr) {
                    this.xhr.abort();
                }

                if (!toHide.length && !toShow.length) {
                    $.error("jQuery UI Tabs: Mismatching fragment identifier.");
                }

                if (toShow.length) {
                    this.load(this.tabs.index(tab), event);
                }
                this._toggle(event, eventData);
            },

            // handles show/hide for selecting tabs
            _toggle: function _toggle(event, eventData) {
                var that = this,
                    toShow = eventData.newPanel,
                    toHide = eventData.oldPanel;

                this.running = true;

                function complete() {
                    that.running = false;
                    that._trigger("activate", event, eventData);
                }

                function show() {
                    eventData.newTab.closest("li").addClass("ui-tabs-active ui-state-active");

                    if (toShow.length && that.options.show) {
                        that._show(toShow, that.options.show, complete);
                    } else {
                        toShow.show();
                        complete();
                    }
                }

                // start out by hiding, then showing, then completing
                if (toHide.length && this.options.hide) {
                    this._hide(toHide, this.options.hide, function () {
                        eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                        show();
                    });
                } else {
                    eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                    toHide.hide();
                    show();
                }

                toHide.attr("aria-hidden", "true");
                eventData.oldTab.attr({
                    "aria-selected": "false",
                    "aria-expanded": "false"
                });
                // If we're switching tabs, remove the old tab from the tab order.
                // If we're opening from collapsed state, remove the previous tab from the tab order.
                // If we're collapsing, then keep the collapsing tab in the tab order.
                if (toShow.length && toHide.length) {
                    eventData.oldTab.attr("tabIndex", -1);
                } else if (toShow.length) {
                    this.tabs.filter(function () {
                        return $(this).attr("tabIndex") === 0;
                    }).attr("tabIndex", -1);
                }

                toShow.attr("aria-hidden", "false");
                eventData.newTab.attr({
                    "aria-selected": "true",
                    "aria-expanded": "true",
                    tabIndex: 0
                });
            },

            _activate: function _activate(index) {
                var anchor,
                    active = this._findActive(index);

                // trying to activate the already active panel
                if (active[0] === this.active[0]) {
                    return;
                }

                // trying to collapse, simulate a click on the current active header
                if (!active.length) {
                    active = this.active;
                }

                anchor = active.find(".ui-tabs-anchor")[0];
                this._eventHandler({
                    target: anchor,
                    currentTarget: anchor,
                    preventDefault: $.noop
                });
            },

            _findActive: function _findActive(index) {
                return index === false ? $() : this.tabs.eq(index);
            },

            _getIndex: function _getIndex(index) {
                // meta-function to give users option to provide a href string instead of a numerical index.
                if (typeof index === "string") {
                    index = this.anchors.index(this.anchors.filter("[href$='" + index + "']"));
                }

                return index;
            },

            _destroy: function _destroy() {
                if (this.xhr) {
                    this.xhr.abort();
                }

                this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible");

                this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role");

                this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId();

                this.tablist.unbind(this.eventNamespace);

                this.tabs.add(this.panels).each(function () {
                    if ($.data(this, "ui-tabs-destroy")) {
                        $(this).remove();
                    } else {
                        $(this).removeClass("ui-state-default ui-state-active ui-state-disabled " + "ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role");
                    }
                });

                this.tabs.each(function () {
                    var li = $(this),
                        prev = li.data("ui-tabs-aria-controls");
                    if (prev) {
                        li.attr("aria-controls", prev).removeData("ui-tabs-aria-controls");
                    } else {
                        li.removeAttr("aria-controls");
                    }
                });

                this.panels.show();

                if (this.options.heightStyle !== "content") {
                    this.panels.css("height", "");
                }
            },

            enable: function enable(index) {
                var disabled = this.options.disabled;
                if (disabled === false) {
                    return;
                }

                if (index === undefined) {
                    disabled = false;
                } else {
                    index = this._getIndex(index);
                    if ($.isArray(disabled)) {
                        disabled = $.map(disabled, function (num) {
                            return num !== index ? num : null;
                        });
                    } else {
                        disabled = $.map(this.tabs, function (li, num) {
                            return num !== index ? num : null;
                        });
                    }
                }
                this._setupDisabled(disabled);
            },

            disable: function disable(index) {
                var disabled = this.options.disabled;
                if (disabled === true) {
                    return;
                }

                if (index === undefined) {
                    disabled = true;
                } else {
                    index = this._getIndex(index);
                    if ($.inArray(index, disabled) !== -1) {
                        return;
                    }
                    if ($.isArray(disabled)) {
                        disabled = $.merge([index], disabled).sort();
                    } else {
                        disabled = [index];
                    }
                }
                this._setupDisabled(disabled);
            },

            load: function load(index, event) {
                index = this._getIndex(index);
                var that = this,
                    tab = this.tabs.eq(index),
                    anchor = tab.find(".ui-tabs-anchor"),
                    panel = this._getPanelForTab(tab),
                    eventData = {
                    tab: tab,
                    panel: panel
                },
                    complete = function complete(jqXHR, status) {
                    if (status === "abort") {
                        that.panels.stop(false, true);
                    }

                    tab.removeClass("ui-tabs-loading");
                    panel.removeAttr("aria-busy");

                    if (jqXHR === that.xhr) {
                        delete that.xhr;
                    }
                };

                // not remote
                if (this._isLocal(anchor[0])) {
                    return;
                }

                this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));

                // support: jQuery <1.8
                // jQuery <1.8 returns false if the request is canceled in beforeSend,
                // but as of 1.8, $.ajax() always returns a jqXHR object.
                if (this.xhr && this.xhr.statusText !== "canceled") {
                    tab.addClass("ui-tabs-loading");
                    panel.attr("aria-busy", "true");

                    this.xhr.done(function (response, status, jqXHR) {
                        // support: jQuery <1.8
                        // http://bugs.jquery.com/ticket/11778
                        setTimeout(function () {
                            panel.html(response);
                            that._trigger("load", event, eventData);

                            complete(jqXHR, status);
                        }, 1);
                    }).fail(function (jqXHR, status) {
                        // support: jQuery <1.8
                        // http://bugs.jquery.com/ticket/11778
                        setTimeout(function () {
                            complete(jqXHR, status);
                        }, 1);
                    });
                }
            },

            _ajaxSettings: function _ajaxSettings(anchor, event, eventData) {
                var that = this;
                return {
                    url: anchor.attr("href"),
                    beforeSend: function beforeSend(jqXHR, settings) {
                        return that._trigger("beforeLoad", event, $.extend({ jqXHR: jqXHR, ajaxSettings: settings }, eventData));
                    }
                };
            },

            _getPanelForTab: function _getPanelForTab(tab) {
                var id = $(tab).attr("aria-controls");
                return this.element.find(this._sanitizeSelector("#" + id));
            }
        });

        /*!
         * jQuery UI Tooltip 1.11.4
         * http://jqueryui.com
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license.
         * http://jquery.org/license
         *
         * http://api.jqueryui.com/tooltip/
         */

        var tooltip = $.widget("ui.tooltip", {
            version: "1.11.4",
            options: {
                content: function content() {
                    // support: IE<9, Opera in jQuery <1.7
                    // .text() can't accept undefined, so coerce to a string
                    var title = $(this).attr("title") || "";
                    // Escape title, since we're going from an attribute to raw HTML
                    return $("<a>").text(title).html();
                },
                hide: true,
                // Disabled elements have inconsistent behavior across browsers (#8661)
                items: "[title]:not([disabled])",
                position: {
                    my: "left top+15",
                    at: "left bottom",
                    collision: "flipfit flip"
                },
                show: true,
                tooltipClass: null,
                track: false,

                // callbacks
                close: null,
                open: null
            },

            _addDescribedBy: function _addDescribedBy(elem, id) {
                var describedby = (elem.attr("aria-describedby") || "").split(/\s+/);
                describedby.push(id);
                elem.data("ui-tooltip-id", id).attr("aria-describedby", $.trim(describedby.join(" ")));
            },

            _removeDescribedBy: function _removeDescribedBy(elem) {
                var id = elem.data("ui-tooltip-id"),
                    describedby = (elem.attr("aria-describedby") || "").split(/\s+/),
                    index = $.inArray(id, describedby);

                if (index !== -1) {
                    describedby.splice(index, 1);
                }

                elem.removeData("ui-tooltip-id");
                describedby = $.trim(describedby.join(" "));
                if (describedby) {
                    elem.attr("aria-describedby", describedby);
                } else {
                    elem.removeAttr("aria-describedby");
                }
            },

            _create: function _create() {
                this._on({
                    mouseover: "open",
                    focusin: "open"
                });

                // IDs of generated tooltips, needed for destroy
                this.tooltips = {};

                // IDs of parent tooltips where we removed the title attribute
                this.parents = {};

                if (this.options.disabled) {
                    this._disable();
                }

                // Append the aria-live region so tooltips announce correctly
                this.liveRegion = $("<div>").attr({
                    role: "log",
                    "aria-live": "assertive",
                    "aria-relevant": "additions"
                }).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body);
            },

            _setOption: function _setOption(key, value) {
                var that = this;

                if (key === "disabled") {
                    this[value ? "_disable" : "_enable"]();
                    this.options[key] = value;
                    // disable element style changes
                    return;
                }

                this._super(key, value);

                if (key === "content") {
                    $.each(this.tooltips, function (id, tooltipData) {
                        that._updateContent(tooltipData.element);
                    });
                }
            },

            _disable: function _disable() {
                var that = this;

                // close open tooltips
                $.each(this.tooltips, function (id, tooltipData) {
                    var event = $.Event("blur");
                    event.target = event.currentTarget = tooltipData.element[0];
                    that.close(event, true);
                });

                // remove title attributes to prevent native tooltips
                this.element.find(this.options.items).addBack().each(function () {
                    var element = $(this);
                    if (element.is("[title]")) {
                        element.data("ui-tooltip-title", element.attr("title")).removeAttr("title");
                    }
                });
            },

            _enable: function _enable() {
                // restore title attributes
                this.element.find(this.options.items).addBack().each(function () {
                    var element = $(this);
                    if (element.data("ui-tooltip-title")) {
                        element.attr("title", element.data("ui-tooltip-title"));
                    }
                });
            },

            open: function open(event) {
                var that = this,
                    target = $(event ? event.target : this.element)
                // we need closest here due to mouseover bubbling,
                // but always pointing at the same event target
                .closest(this.options.items);

                // No element to show a tooltip for or the tooltip is already open
                if (!target.length || target.data("ui-tooltip-id")) {
                    return;
                }

                if (target.attr("title")) {
                    target.data("ui-tooltip-title", target.attr("title"));
                }

                target.data("ui-tooltip-open", true);

                // kill parent tooltips, custom or native, for hover
                if (event && event.type === "mouseover") {
                    target.parents().each(function () {
                        var parent = $(this),
                            blurEvent;
                        if (parent.data("ui-tooltip-open")) {
                            blurEvent = $.Event("blur");
                            blurEvent.target = blurEvent.currentTarget = this;
                            that.close(blurEvent, true);
                        }
                        if (parent.attr("title")) {
                            parent.uniqueId();
                            that.parents[this.id] = {
                                element: this,
                                title: parent.attr("title")
                            };
                            parent.attr("title", "");
                        }
                    });
                }

                this._registerCloseHandlers(event, target);
                this._updateContent(target, event);
            },

            _updateContent: function _updateContent(target, event) {
                var content,
                    contentOption = this.options.content,
                    that = this,
                    eventType = event ? event.type : null;

                if (typeof contentOption === "string") {
                    return this._open(event, target, contentOption);
                }

                content = contentOption.call(target[0], function (response) {

                    // IE may instantly serve a cached response for ajax requests
                    // delay this call to _open so the other call to _open runs first
                    that._delay(function () {

                        // Ignore async response if tooltip was closed already
                        if (!target.data("ui-tooltip-open")) {
                            return;
                        }

                        // jQuery creates a special event for focusin when it doesn't
                        // exist natively. To improve performance, the native event
                        // object is reused and the type is changed. Therefore, we can't
                        // rely on the type being correct after the event finished
                        // bubbling, so we set it back to the previous value. (#8740)
                        if (event) {
                            event.type = eventType;
                        }
                        this._open(event, target, response);
                    });
                });
                if (content) {
                    this._open(event, target, content);
                }
            },

            _open: function _open(event, target, content) {
                var tooltipData,
                    tooltip,
                    delayedShow,
                    a11yContent,
                    positionOption = $.extend({}, this.options.position);

                if (!content) {
                    return;
                }

                // Content can be updated multiple times. If the tooltip already
                // exists, then just update the content and bail.
                tooltipData = this._find(target);
                if (tooltipData) {
                    tooltipData.tooltip.find(".ui-tooltip-content").html(content);
                    return;
                }

                // if we have a title, clear it to prevent the native tooltip
                // we have to check first to avoid defining a title if none exists
                // (we don't want to cause an element to start matching [title])
                //
                // We use removeAttr only for key events, to allow IE to export the correct
                // accessible attributes. For mouse events, set to empty string to avoid
                // native tooltip showing up (happens only when removing inside mouseover).
                if (target.is("[title]")) {
                    if (event && event.type === "mouseover") {
                        target.attr("title", "");
                    } else {
                        target.removeAttr("title");
                    }
                }

                tooltipData = this._tooltip(target);
                tooltip = tooltipData.tooltip;
                this._addDescribedBy(target, tooltip.attr("id"));
                tooltip.find(".ui-tooltip-content").html(content);

                // Support: Voiceover on OS X, JAWS on IE <= 9
                // JAWS announces deletions even when aria-relevant="additions"
                // Voiceover will sometimes re-read the entire log region's contents from the beginning
                this.liveRegion.children().hide();
                if (content.clone) {
                    a11yContent = content.clone();
                    a11yContent.removeAttr("id").find("[id]").removeAttr("id");
                } else {
                    a11yContent = content;
                }
                $("<div>").html(a11yContent).appendTo(this.liveRegion);

                function position(event) {
                    positionOption.of = event;
                    if (tooltip.is(":hidden")) {
                        return;
                    }
                    tooltip.position(positionOption);
                }
                if (this.options.track && event && /^mouse/.test(event.type)) {
                    this._on(this.document, {
                        mousemove: position
                    });
                    // trigger once to override element-relative positioning
                    position(event);
                } else {
                    tooltip.position($.extend({
                        of: target
                    }, this.options.position));
                }

                tooltip.hide();

                this._show(tooltip, this.options.show);
                // Handle tracking tooltips that are shown with a delay (#8644). As soon
                // as the tooltip is visible, position the tooltip using the most recent
                // event.
                if (this.options.show && this.options.show.delay) {
                    delayedShow = this.delayedShow = setInterval(function () {
                        if (tooltip.is(":visible")) {
                            position(positionOption.of);
                            clearInterval(delayedShow);
                        }
                    }, $.fx.interval);
                }

                this._trigger("open", event, { tooltip: tooltip });
            },

            _registerCloseHandlers: function _registerCloseHandlers(event, target) {
                var events = {
                    keyup: function keyup(event) {
                        if (event.keyCode === $.ui.keyCode.ESCAPE) {
                            var fakeEvent = $.Event(event);
                            fakeEvent.currentTarget = target[0];
                            this.close(fakeEvent, true);
                        }
                    }
                };

                // Only bind remove handler for delegated targets. Non-delegated
                // tooltips will handle this in destroy.
                if (target[0] !== this.element[0]) {
                    events.remove = function () {
                        this._removeTooltip(this._find(target).tooltip);
                    };
                }

                if (!event || event.type === "mouseover") {
                    events.mouseleave = "close";
                }
                if (!event || event.type === "focusin") {
                    events.focusout = "close";
                }
                this._on(true, target, events);
            },

            close: function close(event) {
                var tooltip,
                    that = this,
                    target = $(event ? event.currentTarget : this.element),
                    tooltipData = this._find(target);

                // The tooltip may already be closed
                if (!tooltipData) {

                    // We set ui-tooltip-open immediately upon open (in open()), but only set the
                    // additional data once there's actually content to show (in _open()). So even if the
                    // tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in
                    // the period between open() and _open().
                    target.removeData("ui-tooltip-open");
                    return;
                }

                tooltip = tooltipData.tooltip;

                // disabling closes the tooltip, so we need to track when we're closing
                // to avoid an infinite loop in case the tooltip becomes disabled on close
                if (tooltipData.closing) {
                    return;
                }

                // Clear the interval for delayed tracking tooltips
                clearInterval(this.delayedShow);

                // only set title if we had one before (see comment in _open())
                // If the title attribute has changed since open(), don't restore
                if (target.data("ui-tooltip-title") && !target.attr("title")) {
                    target.attr("title", target.data("ui-tooltip-title"));
                }

                this._removeDescribedBy(target);

                tooltipData.hiding = true;
                tooltip.stop(true);
                this._hide(tooltip, this.options.hide, function () {
                    that._removeTooltip($(this));
                });

                target.removeData("ui-tooltip-open");
                this._off(target, "mouseleave focusout keyup");

                // Remove 'remove' binding only on delegated targets
                if (target[0] !== this.element[0]) {
                    this._off(target, "remove");
                }
                this._off(this.document, "mousemove");

                if (event && event.type === "mouseleave") {
                    $.each(this.parents, function (id, parent) {
                        $(parent.element).attr("title", parent.title);
                        delete that.parents[id];
                    });
                }

                tooltipData.closing = true;
                this._trigger("close", event, { tooltip: tooltip });
                if (!tooltipData.hiding) {
                    tooltipData.closing = false;
                }
            },

            _tooltip: function _tooltip(element) {
                var tooltip = $("<div>").attr("role", "tooltip").addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content " + (this.options.tooltipClass || "")),
                    id = tooltip.uniqueId().attr("id");

                $("<div>").addClass("ui-tooltip-content").appendTo(tooltip);

                tooltip.appendTo(this.document[0].body);

                return this.tooltips[id] = {
                    element: element,
                    tooltip: tooltip
                };
            },

            _find: function _find(target) {
                var id = target.data("ui-tooltip-id");
                return id ? this.tooltips[id] : null;
            },

            _removeTooltip: function _removeTooltip(tooltip) {
                tooltip.remove();
                delete this.tooltips[tooltip.attr("id")];
            },

            _destroy: function _destroy() {
                var that = this;

                // close open tooltips
                $.each(this.tooltips, function (id, tooltipData) {
                    // Delegate to close method to handle common cleanup
                    var event = $.Event("blur"),
                        element = tooltipData.element;
                    event.target = event.currentTarget = element[0];
                    that.close(event, true);

                    // Remove immediately; destroying an open tooltip doesn't use the
                    // hide animation
                    $("#" + id).remove();

                    // Restore the title
                    if (element.data("ui-tooltip-title")) {
                        // If the title attribute has changed since open(), don't restore
                        if (!element.attr("title")) {
                            element.attr("title", element.data("ui-tooltip-title"));
                        }
                        element.removeData("ui-tooltip-title");
                    }
                });
                this.liveRegion.remove();
            }
        });
    });
    /*
    == malihu jquery custom scrollbar plugin == 
    Version: 3.1.3 
    Plugin URI: http://manos.malihu.gr/jquery-custom-content-scroller 
    Author: malihu
    Author URI: http://manos.malihu.gr
    License: MIT License (MIT)
    */

    /*
    Copyright Manos Malihutsakis (email: manos@malihu.gr)
      Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
      The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
    */

    /*
    The code below is fairly long, fully commented and should be normally used in development. 
    For production, use either the minified jquery.mCustomScrollbar.min.js script or 
    the production-ready jquery.mCustomScrollbar.concat.min.js which contains the plugin 
    and dependencies (minified). 
    */

    (function (factory) {
        if (typeof module !== "undefined" && module.exports) {
            module.exports = factory;
        } else {
            factory(jQuery, window, document);
        }
    })(function ($) {
        (function (init) {
            var _rjs = typeof define === "function" && define.amd,
                /* RequireJS */
            _njs = typeof module !== "undefined" && module.exports,
                /* NodeJS */
            _dlp = "https:" == document.location.protocol ? "https:" : "http:",
                /* location protocol */
            _url = "cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js";
            if (!_rjs) {
                if (_njs) {
                    require("jquery-mousewheel")($);
                } else {
                    /* load jquery-mousewheel plugin (via CDN) if it's not present or not loaded via RequireJS 
                    (works when mCustomScrollbar fn is called on window load) */
                    $.event.special.mousewheel || $("head").append(decodeURI("%3Cscript src=" + _dlp + "//" + _url + "%3E%3C/script%3E"));
                }
            }
            init();
        })(function () {

            /* 
            ----------------------------------------
            PLUGIN NAMESPACE, PREFIX, DEFAULT SELECTOR(S) 
            ----------------------------------------
            */

            var pluginNS = "mCustomScrollbar",
                pluginPfx = "mCS",
                defaultSelector = ".mCustomScrollbar",


            /* 
            ----------------------------------------
            DEFAULT OPTIONS 
            ----------------------------------------
            */

            defaults = {
                /*
                set element/content width/height programmatically 
                values: boolean, pixels, percentage 
                    option                      default
                    -------------------------------------
                    setWidth                    false
                    setHeight                   false
                */
                /*
                set the initial css top property of content  
                values: string (e.g. "-100px", "10%" etc.)
                */
                setTop: 0,
                /*
                set the initial css left property of content  
                values: string (e.g. "-100px", "10%" etc.)
                */
                setLeft: 0,
                /* 
                scrollbar axis (vertical and/or horizontal scrollbars) 
                values (string): "y", "x", "yx"
                */
                axis: "y",
                /*
                position of scrollbar relative to content  
                values (string): "inside", "outside" ("outside" requires elements with position:relative)
                */
                scrollbarPosition: "inside",
                /*
                scrolling inertia
                values: integer (milliseconds)
                */
                scrollInertia: 950,
                /* 
                auto-adjust scrollbar dragger length
                values: boolean
                */
                autoDraggerLength: true,
                /*
                auto-hide scrollbar when idle 
                values: boolean
                    option                      default
                    -------------------------------------
                    autoHideScrollbar           false
                */
                /*
                auto-expands scrollbar on mouse-over and dragging
                values: boolean
                    option                      default
                    -------------------------------------
                    autoExpandScrollbar         false
                */
                /*
                always show scrollbar, even when there's nothing to scroll 
                values: integer (0=disable, 1=always show dragger rail and buttons, 2=always show dragger rail, dragger and buttons), boolean
                */
                alwaysShowScrollbar: 0,
                /*
                scrolling always snaps to a multiple of this number in pixels
                values: integer, array ([y,x])
                    option                      default
                    -------------------------------------
                    snapAmount                  null
                */
                /*
                when snapping, snap with this number in pixels as an offset 
                values: integer
                */
                snapOffset: 0,
                /* 
                mouse-wheel scrolling
                */
                mouseWheel: {
                    /* 
                    enable mouse-wheel scrolling
                    values: boolean
                    */
                    enable: true,
                    /* 
                    scrolling amount in pixels
                    values: "auto", integer 
                    */
                    scrollAmount: "auto",
                    /* 
                    mouse-wheel scrolling axis 
                    the default scrolling direction when both vertical and horizontal scrollbars are present 
                    values (string): "y", "x" 
                    */
                    axis: "y",
                    /* 
                    prevent the default behaviour which automatically scrolls the parent element(s) when end of scrolling is reached 
                    values: boolean
                        option                      default
                        -------------------------------------
                        preventDefault              null
                    */
                    /*
                    the reported mouse-wheel delta value. The number of lines (translated to pixels) one wheel notch scrolls.  
                    values: "auto", integer 
                    "auto" uses the default OS/browser value 
                    */
                    deltaFactor: "auto",
                    /*
                    normalize mouse-wheel delta to -1 or 1 (disables mouse-wheel acceleration) 
                    values: boolean
                        option                      default
                        -------------------------------------
                        normalizeDelta              null
                    */
                    /*
                    invert mouse-wheel scrolling direction 
                    values: boolean
                        option                      default
                        -------------------------------------
                        invert                      null
                    */
                    /*
                    the tags that disable mouse-wheel when cursor is over them
                    */
                    disableOver: ["select", "option", "keygen", "datalist", "textarea"]
                },
                /* 
                scrollbar buttons
                */
                scrollButtons: {
                    /*
                    enable scrollbar buttons
                    values: boolean
                        option                      default
                        -------------------------------------
                        enable                      null
                    */
                    /*
                    scrollbar buttons scrolling type 
                    values (string): "stepless", "stepped"
                    */
                    scrollType: "stepless",
                    /*
                    scrolling amount in pixels
                    values: "auto", integer 
                    */
                    scrollAmount: "auto"
                    /*
                    tabindex of the scrollbar buttons
                    values: false, integer
                        option                      default
                        -------------------------------------
                        tabindex                    null
                    */
                },
                /* 
                keyboard scrolling
                */
                keyboard: {
                    /*
                    enable scrolling via keyboard
                    values: boolean
                    */
                    enable: true,
                    /*
                    keyboard scrolling type 
                    values (string): "stepless", "stepped"
                    */
                    scrollType: "stepless",
                    /*
                    scrolling amount in pixels
                    values: "auto", integer 
                    */
                    scrollAmount: "auto"
                },
                /*
                enable content touch-swipe scrolling 
                values: boolean, integer, string (number)
                integer values define the axis-specific minimum amount required for scrolling momentum
                */
                contentTouchScroll: 25,
                /*
                enable/disable document (default) touch-swipe scrolling 
                */
                documentTouchScroll: true,
                /*
                advanced option parameters
                */
                advanced: {
                    /*
                    auto-expand content horizontally (for "x" or "yx" axis) 
                    values: boolean, integer (the value 2 forces the non scrollHeight/scrollWidth method, the value 3 forces the scrollHeight/scrollWidth method)
                        option                      default
                        -------------------------------------
                        autoExpandHorizontalScroll  null
                    */
                    /*
                    auto-scroll to elements with focus
                    */
                    autoScrollOnFocus: "input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",
                    /*
                    auto-update scrollbars on content, element or viewport resize 
                    should be true for fluid layouts/elements, adding/removing content dynamically, hiding/showing elements, content with images etc. 
                    values: boolean
                    */
                    updateOnContentResize: true,
                    /*
                    auto-update scrollbars each time each image inside the element is fully loaded 
                    values: "auto", boolean
                    */
                    updateOnImageLoad: "auto",
                    /*
                    auto-update scrollbars based on the amount and size changes of specific selectors 
                    useful when you need to update the scrollbar(s) automatically, each time a type of element is added, removed or changes its size 
                    values: boolean, string (e.g. "ul li" will auto-update scrollbars each time list-items inside the element are changed) 
                    a value of true (boolean) will auto-update scrollbars each time any element is changed
                        option                      default
                        -------------------------------------
                        updateOnSelectorChange      null
                    */
                    /*
                    extra selectors that'll allow scrollbar dragging upon mousemove/up, pointermove/up, touchend etc. (e.g. "selector-1, selector-2")
                        option                      default
                        -------------------------------------
                        extraDraggableSelectors     null
                    */
                    /*
                    extra selectors that'll release scrollbar dragging upon mouseup, pointerup, touchend etc. (e.g. "selector-1, selector-2")
                        option                      default
                        -------------------------------------
                        releaseDraggableSelectors   null
                    */
                    /*
                    auto-update timeout 
                    values: integer (milliseconds)
                    */
                    autoUpdateTimeout: 60
                },
                /* 
                scrollbar theme 
                values: string (see CSS/plugin URI for a list of ready-to-use themes)
                */
                theme: "light",
                /*
                user defined callback functions
                */
                callbacks: {
                    /*
                    Available callbacks: 
                        callback                    default
                        -------------------------------------
                        onCreate                    null
                        onInit                      null
                        onScrollStart               null
                        onScroll                    null
                        onTotalScroll               null
                        onTotalScrollBack           null
                        whileScrolling              null
                        onOverflowY                 null
                        onOverflowX                 null
                        onOverflowYNone             null
                        onOverflowXNone             null
                        onImageLoad                 null
                        onSelectorChange            null
                        onBeforeUpdate              null
                        onUpdate                    null
                    */
                    onTotalScrollOffset: 0,
                    onTotalScrollBackOffset: 0,
                    alwaysTriggerOffsets: true
                }
                /*
                add scrollbar(s) on all elements matching the current selector, now and in the future 
                values: boolean, string 
                string values: "on" (enable), "once" (disable after first invocation), "off" (disable)
                liveSelector values: string (selector)
                    option                      default
                    -------------------------------------
                    live                        false
                    liveSelector                null
                */
            },


            /* 
            ----------------------------------------
            VARS, CONSTANTS 
            ----------------------------------------
            */

            totalInstances = 0,
                /* plugin instances amount */
            liveTimers = {},
                /* live option timers */
            oldIE = window.attachEvent && !window.addEventListener ? 1 : 0,
                /* detect IE < 9 */
            touchActive = false,
                touchable,
                /* global touch vars (for touch and pointer events) */
            /* general plugin classes */
            classes = ["mCSB_dragger_onDrag", "mCSB_scrollTools_onDrag", "mCS_img_loaded", "mCS_disabled", "mCS_destroyed", "mCS_no_scrollbar", "mCS-autoHide", "mCS-dir-rtl", "mCS_no_scrollbar_y", "mCS_no_scrollbar_x", "mCS_y_hidden", "mCS_x_hidden", "mCSB_draggerContainer", "mCSB_buttonUp", "mCSB_buttonDown", "mCSB_buttonLeft", "mCSB_buttonRight"],


            /* 
            ----------------------------------------
            METHODS 
            ----------------------------------------
            */

            methods = {

                /* 
                plugin initialization method 
                creates the scrollbar(s), plugin data object and options
                ----------------------------------------
                */

                init: function init(options) {

                    var options = $.extend(true, {}, defaults, options),
                        selector = _selector.call(this); /* validate selector */

                    /* 
                    if live option is enabled, monitor for elements matching the current selector and 
                    apply scrollbar(s) when found (now and in the future) 
                    */
                    if (options.live) {
                        var liveSelector = options.liveSelector || this.selector || defaultSelector,
                            /* live selector(s) */
                        $liveSelector = $(liveSelector); /* live selector(s) as jquery object */
                        if (options.live === "off") {
                            /* 
                            disable live if requested 
                            usage: $(selector).mCustomScrollbar({live:"off"}); 
                            */
                            removeLiveTimers(liveSelector);
                            return;
                        }
                        liveTimers[liveSelector] = setTimeout(function () {
                            /* call mCustomScrollbar fn on live selector(s) every half-second */
                            $liveSelector.mCustomScrollbar(options);
                            if (options.live === "once" && $liveSelector.length) {
                                /* disable live after first invocation */
                                removeLiveTimers(liveSelector);
                            }
                        }, 500);
                    } else {
                        removeLiveTimers(liveSelector);
                    }

                    /* options backward compatibility (for versions < 3.0.0) and normalization */
                    options.setWidth = options.set_width ? options.set_width : options.setWidth;
                    options.setHeight = options.set_height ? options.set_height : options.setHeight;
                    options.axis = options.horizontalScroll ? "x" : _findAxis(options.axis);
                    options.scrollInertia = options.scrollInertia > 0 && options.scrollInertia < 17 ? 17 : options.scrollInertia;
                    if (_typeof(options.mouseWheel) !== "object" && options.mouseWheel == true) {
                        /* old school mouseWheel option (non-object) */
                        options.mouseWheel = { enable: true, scrollAmount: "auto", axis: "y", preventDefault: false, deltaFactor: "auto", normalizeDelta: false, invert: false };
                    }
                    options.mouseWheel.scrollAmount = !options.mouseWheelPixels ? options.mouseWheel.scrollAmount : options.mouseWheelPixels;
                    options.mouseWheel.normalizeDelta = !options.advanced.normalizeMouseWheelDelta ? options.mouseWheel.normalizeDelta : options.advanced.normalizeMouseWheelDelta;
                    options.scrollButtons.scrollType = _findScrollButtonsType(options.scrollButtons.scrollType);

                    _theme(options); /* theme-specific options */

                    /* plugin constructor */
                    return $(selector).each(function () {

                        var $this = $(this);

                        if (!$this.data(pluginPfx)) {
                            /* prevent multiple instantiations */

                            /* store options and create objects in jquery data */
                            $this.data(pluginPfx, {
                                idx: ++totalInstances, /* instance index */
                                opt: options, /* options */
                                scrollRatio: { y: null, x: null }, /* scrollbar to content ratio */
                                overflowed: null, /* overflowed axis */
                                contentReset: { y: null, x: null }, /* object to check when content resets */
                                bindEvents: false, /* object to check if events are bound */
                                tweenRunning: false, /* object to check if tween is running */
                                sequential: {}, /* sequential scrolling object */
                                langDir: $this.css("direction"), /* detect/store direction (ltr or rtl) */
                                cbOffsets: null, /* object to check whether callback offsets always trigger */
                                /* 
                                object to check how scrolling events where last triggered 
                                "internal" (default - triggered by this script), "external" (triggered by other scripts, e.g. via scrollTo method) 
                                usage: object.data("mCS").trigger
                                */
                                trigger: null,
                                /* 
                                object to check for changes in elements in order to call the update method automatically 
                                */
                                poll: { size: { o: 0, n: 0 }, img: { o: 0, n: 0 }, change: { o: 0, n: 0 } }
                            });

                            var d = $this.data(pluginPfx),
                                o = d.opt,

                            /* HTML data attributes */
                            htmlDataAxis = $this.data("mcs-axis"),
                                htmlDataSbPos = $this.data("mcs-scrollbar-position"),
                                htmlDataTheme = $this.data("mcs-theme");

                            if (htmlDataAxis) {
                                o.axis = htmlDataAxis;
                            } /* usage example: data-mcs-axis="y" */
                            if (htmlDataSbPos) {
                                o.scrollbarPosition = htmlDataSbPos;
                            } /* usage example: data-mcs-scrollbar-position="outside" */
                            if (htmlDataTheme) {
                                /* usage example: data-mcs-theme="minimal" */
                                o.theme = htmlDataTheme;
                                _theme(o); /* theme-specific options */
                            }

                            _pluginMarkup.call(this); /* add plugin markup */

                            if (d && o.callbacks.onCreate && typeof o.callbacks.onCreate === "function") {
                                o.callbacks.onCreate.call(this);
                            } /* callbacks: onCreate */

                            $("#mCSB_" + d.idx + "_container img:not(." + classes[2] + ")").addClass(classes[2]); /* flag loaded images */

                            methods.update.call(null, $this); /* call the update method */
                        }
                    });
                },
                /* ---------------------------------------- */

                /* 
                plugin update method 
                updates content and scrollbar(s) values, events and status 
                ----------------------------------------
                usage: $(selector).mCustomScrollbar("update");
                */

                update: function update(el, cb) {

                    var selector = el || _selector.call(this); /* validate selector */

                    return $(selector).each(function () {

                        var $this = $(this);

                        if ($this.data(pluginPfx)) {
                            /* check if plugin has initialized */

                            var d = $this.data(pluginPfx),
                                o = d.opt,
                                mCSB_container = $("#mCSB_" + d.idx + "_container"),
                                mCustomScrollBox = $("#mCSB_" + d.idx),
                                mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")];

                            if (!mCSB_container.length) {
                                return;
                            }

                            if (d.tweenRunning) {
                                _stop($this);
                            } /* stop any running tweens while updating */

                            if (cb && d && o.callbacks.onBeforeUpdate && typeof o.callbacks.onBeforeUpdate === "function") {
                                o.callbacks.onBeforeUpdate.call(this);
                            } /* callbacks: onBeforeUpdate */

                            /* if element was disabled or destroyed, remove class(es) */
                            if ($this.hasClass(classes[3])) {
                                $this.removeClass(classes[3]);
                            }
                            if ($this.hasClass(classes[4])) {
                                $this.removeClass(classes[4]);
                            }

                            /* css flexbox fix, detect/set max-height */
                            mCustomScrollBox.css("max-height", "none");
                            if (mCustomScrollBox.height() !== $this.height()) {
                                mCustomScrollBox.css("max-height", $this.height());
                            }

                            _expandContentHorizontally.call(this); /* expand content horizontally */

                            if (o.axis !== "y" && !o.advanced.autoExpandHorizontalScroll) {
                                mCSB_container.css("width", _contentWidth(mCSB_container));
                            }

                            d.overflowed = _overflowed.call(this); /* determine if scrolling is required */

                            _scrollbarVisibility.call(this); /* show/hide scrollbar(s) */

                            /* auto-adjust scrollbar dragger length analogous to content */
                            if (o.autoDraggerLength) {
                                _setDraggerLength.call(this);
                            }

                            _scrollRatio.call(this); /* calculate and store scrollbar to content ratio */

                            _bindEvents.call(this); /* bind scrollbar events */

                            /* reset scrolling position and/or events */
                            var to = [Math.abs(mCSB_container[0].offsetTop), Math.abs(mCSB_container[0].offsetLeft)];
                            if (o.axis !== "x") {
                                /* y/yx axis */
                                if (!d.overflowed[0]) {
                                    /* y scrolling is not required */
                                    _resetContentPosition.call(this); /* reset content position */
                                    if (o.axis === "y") {
                                        _unbindEvents.call(this);
                                    } else if (o.axis === "yx" && d.overflowed[1]) {
                                        _scrollTo($this, to[1].toString(), { dir: "x", dur: 0, overwrite: "none" });
                                    }
                                } else if (mCSB_dragger[0].height() > mCSB_dragger[0].parent().height()) {
                                    _resetContentPosition.call(this); /* reset content position */
                                } else {
                                    /* y scrolling is required */
                                    _scrollTo($this, to[0].toString(), { dir: "y", dur: 0, overwrite: "none" });
                                    d.contentReset.y = null;
                                }
                            }
                            if (o.axis !== "y") {
                                /* x/yx axis */
                                if (!d.overflowed[1]) {
                                    /* x scrolling is not required */
                                    _resetContentPosition.call(this); /* reset content position */
                                    if (o.axis === "x") {
                                        _unbindEvents.call(this);
                                    } else if (o.axis === "yx" && d.overflowed[0]) {
                                        _scrollTo($this, to[0].toString(), { dir: "y", dur: 0, overwrite: "none" });
                                    }
                                } else if (mCSB_dragger[1].width() > mCSB_dragger[1].parent().width()) {
                                    _resetContentPosition.call(this); /* reset content position */
                                } else {
                                    /* x scrolling is required */
                                    _scrollTo($this, to[1].toString(), { dir: "x", dur: 0, overwrite: "none" });
                                    d.contentReset.x = null;
                                }
                            }

                            /* callbacks: onImageLoad, onSelectorChange, onUpdate */
                            if (cb && d) {
                                if (cb === 2 && o.callbacks.onImageLoad && typeof o.callbacks.onImageLoad === "function") {
                                    o.callbacks.onImageLoad.call(this);
                                } else if (cb === 3 && o.callbacks.onSelectorChange && typeof o.callbacks.onSelectorChange === "function") {
                                    o.callbacks.onSelectorChange.call(this);
                                } else if (o.callbacks.onUpdate && typeof o.callbacks.onUpdate === "function") {
                                    o.callbacks.onUpdate.call(this);
                                }
                            }

                            _autoUpdate.call(this); /* initialize automatic updating (for dynamic content, fluid layouts etc.) */
                        }
                    });
                },
                /* ---------------------------------------- */

                /* 
                plugin scrollTo method 
                triggers a scrolling event to a specific value
                ----------------------------------------
                usage: $(selector).mCustomScrollbar("scrollTo",value,options);
                */

                scrollTo: function scrollTo(val, options) {

                    /* prevent silly things like $(selector).mCustomScrollbar("scrollTo",undefined); */
                    if (typeof val == "undefined" || val == null) {
                        return;
                    }

                    var selector = _selector.call(this); /* validate selector */

                    return $(selector).each(function () {

                        var $this = $(this);

                        if ($this.data(pluginPfx)) {
                            /* check if plugin has initialized */

                            var d = $this.data(pluginPfx),
                                o = d.opt,

                            /* method default options */
                            methodDefaults = {
                                trigger: "external", /* method is by default triggered externally (e.g. from other scripts) */
                                scrollInertia: o.scrollInertia, /* scrolling inertia (animation duration) */
                                scrollEasing: "mcsEaseInOut", /* animation easing */
                                moveDragger: false, /* move dragger instead of content */
                                timeout: 60, /* scroll-to delay */
                                callbacks: true, /* enable/disable callbacks */
                                onStart: true,
                                onUpdate: true,
                                onComplete: true
                            },
                                methodOptions = $.extend(true, {}, methodDefaults, options),
                                to = _arr.call(this, val),
                                dur = methodOptions.scrollInertia > 0 && methodOptions.scrollInertia < 17 ? 17 : methodOptions.scrollInertia;

                            /* translate yx values to actual scroll-to positions */
                            to[0] = _to.call(this, to[0], "y");
                            to[1] = _to.call(this, to[1], "x");

                            /* 
                            check if scroll-to value moves the dragger instead of content. 
                            Only pixel values apply on dragger (e.g. 100, "100px", "-=100" etc.) 
                            */
                            if (methodOptions.moveDragger) {
                                to[0] *= d.scrollRatio.y;
                                to[1] *= d.scrollRatio.x;
                            }

                            methodOptions.dur = _isTabHidden() ? 0 : dur; //skip animations if browser tab is hidden

                            setTimeout(function () {
                                /* do the scrolling */
                                if (to[0] !== null && typeof to[0] !== "undefined" && o.axis !== "x" && d.overflowed[0]) {
                                    /* scroll y */
                                    methodOptions.dir = "y";
                                    methodOptions.overwrite = "all";
                                    _scrollTo($this, to[0].toString(), methodOptions);
                                }
                                if (to[1] !== null && typeof to[1] !== "undefined" && o.axis !== "y" && d.overflowed[1]) {
                                    /* scroll x */
                                    methodOptions.dir = "x";
                                    methodOptions.overwrite = "none";
                                    _scrollTo($this, to[1].toString(), methodOptions);
                                }
                            }, methodOptions.timeout);
                        }
                    });
                },
                /* ---------------------------------------- */

                /*
                plugin stop method 
                stops scrolling animation
                ----------------------------------------
                usage: $(selector).mCustomScrollbar("stop");
                */
                stop: function stop() {

                    var selector = _selector.call(this); /* validate selector */

                    return $(selector).each(function () {

                        var $this = $(this);

                        if ($this.data(pluginPfx)) {
                            /* check if plugin has initialized */

                            _stop($this);
                        }
                    });
                },
                /* ---------------------------------------- */

                /*
                plugin disable method 
                temporarily disables the scrollbar(s) 
                ----------------------------------------
                usage: $(selector).mCustomScrollbar("disable",reset); 
                reset (boolean): resets content position to 0 
                */
                disable: function disable(r) {

                    var selector = _selector.call(this); /* validate selector */

                    return $(selector).each(function () {

                        var $this = $(this);

                        if ($this.data(pluginPfx)) {
                            /* check if plugin has initialized */

                            var d = $this.data(pluginPfx);

                            _autoUpdate.call(this, "remove"); /* remove automatic updating */

                            _unbindEvents.call(this); /* unbind events */

                            if (r) {
                                _resetContentPosition.call(this);
                            } /* reset content position */

                            _scrollbarVisibility.call(this, true); /* show/hide scrollbar(s) */

                            $this.addClass(classes[3]); /* add disable class */
                        }
                    });
                },
                /* ---------------------------------------- */

                /*
                plugin destroy method 
                completely removes the scrollbar(s) and returns the element to its original state
                ----------------------------------------
                usage: $(selector).mCustomScrollbar("destroy"); 
                */
                destroy: function destroy() {

                    var selector = _selector.call(this); /* validate selector */

                    return $(selector).each(function () {

                        var $this = $(this);

                        if ($this.data(pluginPfx)) {
                            /* check if plugin has initialized */

                            var d = $this.data(pluginPfx),
                                o = d.opt,
                                mCustomScrollBox = $("#mCSB_" + d.idx),
                                mCSB_container = $("#mCSB_" + d.idx + "_container"),
                                scrollbar = $(".mCSB_" + d.idx + "_scrollbar");

                            if (o.live) {
                                removeLiveTimers(o.liveSelector || $(selector).selector);
                            } /* remove live timers */

                            _autoUpdate.call(this, "remove"); /* remove automatic updating */

                            _unbindEvents.call(this); /* unbind events */

                            _resetContentPosition.call(this); /* reset content position */

                            $this.removeData(pluginPfx); /* remove plugin data object */

                            _delete(this, "mcs"); /* delete callbacks object */

                            /* remove plugin markup */
                            scrollbar.remove(); /* remove scrollbar(s) first (those can be either inside or outside plugin's inner wrapper) */
                            mCSB_container.find("img." + classes[2]).removeClass(classes[2]); /* remove loaded images flag */
                            mCustomScrollBox.replaceWith(mCSB_container.contents()); /* replace plugin's inner wrapper with the original content */
                            /* remove plugin classes from the element and add destroy class */
                            $this.removeClass(pluginNS + " _" + pluginPfx + "_" + d.idx + " " + classes[6] + " " + classes[7] + " " + classes[5] + " " + classes[3]).addClass(classes[4]);
                        }
                    });
                }
                /* ---------------------------------------- */

            },


            /* 
            ----------------------------------------
            FUNCTIONS
            ----------------------------------------
            */

            /* validates selector (if selector is invalid or undefined uses the default one) */
            _selector = function _selector() {
                return _typeof($(this)) !== "object" || $(this).length < 1 ? defaultSelector : this;
            },

            /* -------------------- */

            /* changes options according to theme */
            _theme = function _theme(obj) {
                var fixedSizeScrollbarThemes = ["rounded", "rounded-dark", "rounded-dots", "rounded-dots-dark"],
                    nonExpandedScrollbarThemes = ["rounded-dots", "rounded-dots-dark", "3d", "3d-dark", "3d-thick", "3d-thick-dark", "inset", "inset-dark", "inset-2", "inset-2-dark", "inset-3", "inset-3-dark"],
                    disabledScrollButtonsThemes = ["minimal", "minimal-dark"],
                    enabledAutoHideScrollbarThemes = ["minimal", "minimal-dark"],
                    scrollbarPositionOutsideThemes = ["minimal", "minimal-dark"];
                obj.autoDraggerLength = $.inArray(obj.theme, fixedSizeScrollbarThemes) > -1 ? false : obj.autoDraggerLength;
                obj.autoExpandScrollbar = $.inArray(obj.theme, nonExpandedScrollbarThemes) > -1 ? false : obj.autoExpandScrollbar;
                obj.scrollButtons.enable = $.inArray(obj.theme, disabledScrollButtonsThemes) > -1 ? false : obj.scrollButtons.enable;
                obj.autoHideScrollbar = $.inArray(obj.theme, enabledAutoHideScrollbarThemes) > -1 ? true : obj.autoHideScrollbar;
                obj.scrollbarPosition = $.inArray(obj.theme, scrollbarPositionOutsideThemes) > -1 ? "outside" : obj.scrollbarPosition;
            },

            /* -------------------- */

            /* live option timers removal */
            removeLiveTimers = function removeLiveTimers(selector) {
                if (liveTimers[selector]) {
                    clearTimeout(liveTimers[selector]);
                    _delete(liveTimers, selector);
                }
            },

            /* -------------------- */

            /* normalizes axis option to valid values: "y", "x", "yx" */
            _findAxis = function _findAxis(val) {
                return val === "yx" || val === "xy" || val === "auto" ? "yx" : val === "x" || val === "horizontal" ? "x" : "y";
            },

            /* -------------------- */

            /* normalizes scrollButtons.scrollType option to valid values: "stepless", "stepped" */
            _findScrollButtonsType = function _findScrollButtonsType(val) {
                return val === "stepped" || val === "pixels" || val === "step" || val === "click" ? "stepped" : "stepless";
            },

            /* -------------------- */

            /* generates plugin markup */
            _pluginMarkup = function _pluginMarkup() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    expandClass = o.autoExpandScrollbar ? " " + classes[1] + "_expand" : "",
                    scrollbar = ["<div id='mCSB_" + d.idx + "_scrollbar_vertical' class='mCSB_scrollTools mCSB_" + d.idx + "_scrollbar mCS-" + o.theme + " mCSB_scrollTools_vertical" + expandClass + "'><div class='" + classes[12] + "'><div id='mCSB_" + d.idx + "_dragger_vertical' class='mCSB_dragger' style='position:absolute;' oncontextmenu='return false;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>", "<div id='mCSB_" + d.idx + "_scrollbar_horizontal' class='mCSB_scrollTools mCSB_" + d.idx + "_scrollbar mCS-" + o.theme + " mCSB_scrollTools_horizontal" + expandClass + "'><div class='" + classes[12] + "'><div id='mCSB_" + d.idx + "_dragger_horizontal' class='mCSB_dragger' style='position:absolute;' oncontextmenu='return false;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>"],
                    wrapperClass = o.axis === "yx" ? "mCSB_vertical_horizontal" : o.axis === "x" ? "mCSB_horizontal" : "mCSB_vertical",
                    scrollbars = o.axis === "yx" ? scrollbar[0] + scrollbar[1] : o.axis === "x" ? scrollbar[1] : scrollbar[0],
                    contentWrapper = o.axis === "yx" ? "<div id='mCSB_" + d.idx + "_container_wrapper' class='mCSB_container_wrapper' />" : "",
                    autoHideClass = o.autoHideScrollbar ? " " + classes[6] : "",
                    scrollbarDirClass = o.axis !== "x" && d.langDir === "rtl" ? " " + classes[7] : "";
                if (o.setWidth) {
                    $this.css("width", o.setWidth);
                } /* set element width */
                if (o.setHeight) {
                    $this.css("height", o.setHeight);
                } /* set element height */
                o.setLeft = o.axis !== "y" && d.langDir === "rtl" ? "989999px" : o.setLeft; /* adjust left position for rtl direction */
                $this.addClass(pluginNS + " _" + pluginPfx + "_" + d.idx + autoHideClass + scrollbarDirClass).wrapInner("<div id='mCSB_" + d.idx + "' class='mCustomScrollBox mCS-" + o.theme + " " + wrapperClass + "'><div id='mCSB_" + d.idx + "_container' class='mCSB_container' style='position:relative; top:" + o.setTop + "; left:" + o.setLeft + ";' dir=" + d.langDir + " /></div>");
                var mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container");
                if (o.axis !== "y" && !o.advanced.autoExpandHorizontalScroll) {
                    mCSB_container.css("width", _contentWidth(mCSB_container));
                }
                if (o.scrollbarPosition === "outside") {
                    if ($this.css("position") === "static") {
                        /* requires elements with non-static position */
                        $this.css("position", "relative");
                    }
                    $this.css("overflow", "visible");
                    mCustomScrollBox.addClass("mCSB_outside").after(scrollbars);
                } else {
                    mCustomScrollBox.addClass("mCSB_inside").append(scrollbars);
                    mCSB_container.wrap(contentWrapper);
                }
                _scrollButtons.call(this); /* add scrollbar buttons */
                /* minimum dragger length */
                var mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")];
                mCSB_dragger[0].css("min-height", mCSB_dragger[0].height());
                mCSB_dragger[1].css("min-width", mCSB_dragger[1].width());
            },

            /* -------------------- */

            /* calculates content width */
            _contentWidth = function _contentWidth(el) {
                var val = [el[0].scrollWidth, Math.max.apply(Math, el.children().map(function () {
                    return $(this).outerWidth(true);
                }).get())],
                    w = el.parent().width();
                return val[0] > w ? val[0] : val[1] > w ? val[1] : "100%";
            },

            /* -------------------- */

            /* expands content horizontally */
            _expandContentHorizontally = function _expandContentHorizontally() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    mCSB_container = $("#mCSB_" + d.idx + "_container");
                if (o.advanced.autoExpandHorizontalScroll && o.axis !== "y") {
                    /* calculate scrollWidth */
                    mCSB_container.css({ "width": "auto", "min-width": 0, "overflow-x": "scroll" });
                    var w = Math.ceil(mCSB_container[0].scrollWidth);
                    if (o.advanced.autoExpandHorizontalScroll === 3 || o.advanced.autoExpandHorizontalScroll !== 2 && w > mCSB_container.parent().width()) {
                        mCSB_container.css({ "width": w, "min-width": "100%", "overflow-x": "inherit" });
                    } else {
                        /* 
                        wrap content with an infinite width div and set its position to absolute and width to auto. 
                        Setting width to auto before calculating the actual width is important! 
                        We must let the browser set the width as browser zoom values are impossible to calculate.
                        */
                        mCSB_container.css({ "overflow-x": "inherit", "position": "absolute" }).wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />").css({ /* set actual width, original position and un-wrap */
                            /* 
                            get the exact width (with decimals) and then round-up. 
                            Using jquery outerWidth() will round the width value which will mess up with inner elements that have non-integer width
                            */
                            "width": Math.ceil(mCSB_container[0].getBoundingClientRect().right + 0.4) - Math.floor(mCSB_container[0].getBoundingClientRect().left),
                            "min-width": "100%",
                            "position": "relative"
                        }).unwrap();
                    }
                }
            },

            /* -------------------- */

            /* adds scrollbar buttons */
            _scrollButtons = function _scrollButtons() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    mCSB_scrollTools = $(".mCSB_" + d.idx + "_scrollbar:first"),
                    tabindex = !_isNumeric(o.scrollButtons.tabindex) ? "" : "tabindex='" + o.scrollButtons.tabindex + "'",
                    btnHTML = ["<a href='#' class='" + classes[13] + "' oncontextmenu='return false;' " + tabindex + " />", "<a href='#' class='" + classes[14] + "' oncontextmenu='return false;' " + tabindex + " />", "<a href='#' class='" + classes[15] + "' oncontextmenu='return false;' " + tabindex + " />", "<a href='#' class='" + classes[16] + "' oncontextmenu='return false;' " + tabindex + " />"],
                    btn = [o.axis === "x" ? btnHTML[2] : btnHTML[0], o.axis === "x" ? btnHTML[3] : btnHTML[1], btnHTML[2], btnHTML[3]];
                if (o.scrollButtons.enable) {
                    mCSB_scrollTools.prepend(btn[0]).append(btn[1]).next(".mCSB_scrollTools").prepend(btn[2]).append(btn[3]);
                }
            },

            /* -------------------- */

            /* auto-adjusts scrollbar dragger length */
            _setDraggerLength = function _setDraggerLength() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")],
                    ratio = [mCustomScrollBox.height() / mCSB_container.outerHeight(false), mCustomScrollBox.width() / mCSB_container.outerWidth(false)],
                    l = [parseInt(mCSB_dragger[0].css("min-height")), Math.round(ratio[0] * mCSB_dragger[0].parent().height()), parseInt(mCSB_dragger[1].css("min-width")), Math.round(ratio[1] * mCSB_dragger[1].parent().width())],
                    h = oldIE && l[1] < l[0] ? l[0] : l[1],
                    w = oldIE && l[3] < l[2] ? l[2] : l[3];
                mCSB_dragger[0].css({
                    "height": h, "max-height": mCSB_dragger[0].parent().height() - 10
                }).find(".mCSB_dragger_bar").css({ "line-height": l[0] + "px" });
                mCSB_dragger[1].css({
                    "width": w, "max-width": mCSB_dragger[1].parent().width() - 10
                });
            },

            /* -------------------- */

            /* calculates scrollbar to content ratio */
            _scrollRatio = function _scrollRatio() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")],
                    scrollAmount = [mCSB_container.outerHeight(false) - mCustomScrollBox.height(), mCSB_container.outerWidth(false) - mCustomScrollBox.width()],
                    ratio = [scrollAmount[0] / (mCSB_dragger[0].parent().height() - mCSB_dragger[0].height()), scrollAmount[1] / (mCSB_dragger[1].parent().width() - mCSB_dragger[1].width())];
                d.scrollRatio = { y: ratio[0], x: ratio[1] };
            },

            /* -------------------- */

            /* toggles scrolling classes */
            _onDragClasses = function _onDragClasses(el, action, xpnd) {
                var expandClass = xpnd ? classes[0] + "_expanded" : "",
                    scrollbar = el.closest(".mCSB_scrollTools");
                if (action === "active") {
                    el.toggleClass(classes[0] + " " + expandClass);scrollbar.toggleClass(classes[1]);
                    el[0]._draggable = el[0]._draggable ? 0 : 1;
                } else {
                    if (!el[0]._draggable) {
                        if (action === "hide") {
                            el.removeClass(classes[0]);scrollbar.removeClass(classes[1]);
                        } else {
                            el.addClass(classes[0]);scrollbar.addClass(classes[1]);
                        }
                    }
                }
            },

            /* -------------------- */

            /* checks if content overflows its container to determine if scrolling is required */
            _overflowed = function _overflowed() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    contentHeight = d.overflowed == null ? mCSB_container.height() : mCSB_container.outerHeight(false),
                    contentWidth = d.overflowed == null ? mCSB_container.width() : mCSB_container.outerWidth(false),
                    h = mCSB_container[0].scrollHeight,
                    w = mCSB_container[0].scrollWidth;
                if (h > contentHeight) {
                    contentHeight = h;
                }
                if (w > contentWidth) {
                    contentWidth = w;
                }
                return [contentHeight > mCustomScrollBox.height(), contentWidth > mCustomScrollBox.width()];
            },

            /* -------------------- */

            /* resets content position to 0 */
            _resetContentPosition = function _resetContentPosition() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")];
                _stop($this); /* stop any current scrolling before resetting */
                if (o.axis !== "x" && !d.overflowed[0] || o.axis === "y" && d.overflowed[0]) {
                    /* reset y */
                    mCSB_dragger[0].add(mCSB_container).css("top", 0);
                    _scrollTo($this, "_resetY");
                }
                if (o.axis !== "y" && !d.overflowed[1] || o.axis === "x" && d.overflowed[1]) {
                    /* reset x */
                    var cx = dx = 0;
                    if (d.langDir === "rtl") {
                        /* adjust left position for rtl direction */
                        cx = mCustomScrollBox.width() - mCSB_container.outerWidth(false);
                        dx = Math.abs(cx / d.scrollRatio.x);
                    }
                    mCSB_container.css("left", cx);
                    mCSB_dragger[1].css("left", dx);
                    _scrollTo($this, "_resetX");
                }
            },

            /* -------------------- */

            /* binds scrollbar events */
            _bindEvents = function _bindEvents() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt;
                if (!d.bindEvents) {
                    /* check if events are already bound */
                    _draggable.call(this);
                    if (o.contentTouchScroll) {
                        _contentDraggable.call(this);
                    }
                    _selectable.call(this);
                    if (o.mouseWheel.enable) {
                        var mousewheelTimeout;

                        (function () {
                            /* bind mousewheel fn when plugin is available */
                            var _mwt = function _mwt() {
                                mousewheelTimeout = setTimeout(function () {
                                    if (!$.event.special.mousewheel) {
                                        _mwt();
                                    } else {
                                        clearTimeout(mousewheelTimeout);
                                        _mousewheel.call($this[0]);
                                    }
                                }, 100);
                            };

                            _mwt();
                        })();
                    }
                    _draggerRail.call(this);
                    _wrapperScroll.call(this);
                    if (o.advanced.autoScrollOnFocus) {
                        _focus.call(this);
                    }
                    if (o.scrollButtons.enable) {
                        _buttons.call(this);
                    }
                    if (o.keyboard.enable) {
                        _keyboard.call(this);
                    }
                    d.bindEvents = true;
                }
            },

            /* -------------------- */

            /* unbinds scrollbar events */
            _unbindEvents = function _unbindEvents() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    namespace = pluginPfx + "_" + d.idx,
                    sb = ".mCSB_" + d.idx + "_scrollbar",
                    sel = $("#mCSB_" + d.idx + ",#mCSB_" + d.idx + "_container,#mCSB_" + d.idx + "_container_wrapper," + sb + " ." + classes[12] + ",#mCSB_" + d.idx + "_dragger_vertical,#mCSB_" + d.idx + "_dragger_horizontal," + sb + ">a"),
                    mCSB_container = $("#mCSB_" + d.idx + "_container");
                if (o.advanced.releaseDraggableSelectors) {
                    sel.add($(o.advanced.releaseDraggableSelectors));
                }
                if (o.advanced.extraDraggableSelectors) {
                    sel.add($(o.advanced.extraDraggableSelectors));
                }
                if (d.bindEvents) {
                    /* check if events are bound */
                    /* unbind namespaced events from document/selectors */
                    $(document).add($(!_canAccessIFrame() || top.document)).unbind("." + namespace);
                    sel.each(function () {
                        $(this).unbind("." + namespace);
                    });
                    /* clear and delete timeouts/objects */
                    clearTimeout($this[0]._focusTimeout);_delete($this[0], "_focusTimeout");
                    clearTimeout(d.sequential.step);_delete(d.sequential, "step");
                    clearTimeout(mCSB_container[0].onCompleteTimeout);_delete(mCSB_container[0], "onCompleteTimeout");
                    d.bindEvents = false;
                }
            },

            /* -------------------- */

            /* toggles scrollbar visibility */
            _scrollbarVisibility = function _scrollbarVisibility(disabled) {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    contentWrapper = $("#mCSB_" + d.idx + "_container_wrapper"),
                    content = contentWrapper.length ? contentWrapper : $("#mCSB_" + d.idx + "_container"),
                    scrollbar = [$("#mCSB_" + d.idx + "_scrollbar_vertical"), $("#mCSB_" + d.idx + "_scrollbar_horizontal")],
                    mCSB_dragger = [scrollbar[0].find(".mCSB_dragger"), scrollbar[1].find(".mCSB_dragger")];
                if (o.axis !== "x") {
                    if (d.overflowed[0] && !disabled) {
                        scrollbar[0].add(mCSB_dragger[0]).add(scrollbar[0].children("a")).css("display", "block");
                        content.removeClass(classes[8] + " " + classes[10]);
                    } else {
                        if (o.alwaysShowScrollbar) {
                            if (o.alwaysShowScrollbar !== 2) {
                                mCSB_dragger[0].css("display", "none");
                            }
                            content.removeClass(classes[10]);
                        } else {
                            scrollbar[0].css("display", "none");
                            content.addClass(classes[10]);
                        }
                        content.addClass(classes[8]);
                    }
                }
                if (o.axis !== "y") {
                    if (d.overflowed[1] && !disabled) {
                        scrollbar[1].add(mCSB_dragger[1]).add(scrollbar[1].children("a")).css("display", "block");
                        content.removeClass(classes[9] + " " + classes[11]);
                    } else {
                        if (o.alwaysShowScrollbar) {
                            if (o.alwaysShowScrollbar !== 2) {
                                mCSB_dragger[1].css("display", "none");
                            }
                            content.removeClass(classes[11]);
                        } else {
                            scrollbar[1].css("display", "none");
                            content.addClass(classes[11]);
                        }
                        content.addClass(classes[9]);
                    }
                }
                if (!d.overflowed[0] && !d.overflowed[1]) {
                    $this.addClass(classes[5]);
                } else {
                    $this.removeClass(classes[5]);
                }
            },

            /* -------------------- */

            /* returns input coordinates of pointer, touch and mouse events (relative to document) */
            _coordinates = function _coordinates(e) {
                var t = e.type,
                    o = e.target.ownerDocument !== document ? [$(frameElement).offset().top, $(frameElement).offset().left] : null,
                    io = _canAccessIFrame() && e.target.ownerDocument !== top.document ? [$(e.view.frameElement).offset().top, $(e.view.frameElement).offset().left] : [0, 0];
                switch (t) {
                    case "pointerdown":case "MSPointerDown":case "pointermove":case "MSPointerMove":case "pointerup":case "MSPointerUp":
                        return o ? [e.originalEvent.pageY - o[0] + io[0], e.originalEvent.pageX - o[1] + io[1], false] : [e.originalEvent.pageY, e.originalEvent.pageX, false];
                        break;
                    case "touchstart":case "touchmove":case "touchend":
                        var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0],
                            touches = e.originalEvent.touches.length || e.originalEvent.changedTouches.length;
                        return e.target.ownerDocument !== document ? [touch.screenY, touch.screenX, touches > 1] : [touch.pageY, touch.pageX, touches > 1];
                        break;
                    default:
                        return o ? [e.pageY - o[0] + io[0], e.pageX - o[1] + io[1], false] : [e.pageY, e.pageX, false];
                }
            },

            /* -------------------- */

            /* 
            SCROLLBAR DRAG EVENTS
            scrolls content via scrollbar dragging 
            */
            _draggable = function _draggable() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    namespace = pluginPfx + "_" + d.idx,
                    draggerId = ["mCSB_" + d.idx + "_dragger_vertical", "mCSB_" + d.idx + "_dragger_horizontal"],
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    mCSB_dragger = $("#" + draggerId[0] + ",#" + draggerId[1]),
                    draggable,
                    dragY,
                    dragX,
                    rds = o.advanced.releaseDraggableSelectors ? mCSB_dragger.add($(o.advanced.releaseDraggableSelectors)) : mCSB_dragger,
                    eds = o.advanced.extraDraggableSelectors ? $(!_canAccessIFrame() || top.document).add($(o.advanced.extraDraggableSelectors)) : $(!_canAccessIFrame() || top.document);
                mCSB_dragger.bind("mousedown." + namespace + " touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace, function (e) {
                    e.stopImmediatePropagation();
                    e.preventDefault();
                    if (!_mouseBtnLeft(e)) {
                        return;
                    } /* left mouse button only */
                    touchActive = true;
                    if (oldIE) {
                        document.onselectstart = function () {
                            return false;
                        };
                    } /* disable text selection for IE < 9 */
                    _iframe(false); /* enable scrollbar dragging over iframes by disabling their events */
                    _stop($this);
                    draggable = $(this);
                    var offset = draggable.offset(),
                        y = _coordinates(e)[0] - offset.top,
                        x = _coordinates(e)[1] - offset.left,
                        h = draggable.height() + offset.top,
                        w = draggable.width() + offset.left;
                    if (y < h && y > 0 && x < w && x > 0) {
                        dragY = y;
                        dragX = x;
                    }
                    _onDragClasses(draggable, "active", o.autoExpandScrollbar);
                }).bind("touchmove." + namespace, function (e) {
                    e.stopImmediatePropagation();
                    e.preventDefault();
                    var offset = draggable.offset(),
                        y = _coordinates(e)[0] - offset.top,
                        x = _coordinates(e)[1] - offset.left;
                    _drag(dragY, dragX, y, x);
                });
                $(document).add(eds).bind("mousemove." + namespace + " pointermove." + namespace + " MSPointerMove." + namespace, function (e) {
                    if (draggable) {
                        var offset = draggable.offset(),
                            y = _coordinates(e)[0] - offset.top,
                            x = _coordinates(e)[1] - offset.left;
                        if (dragY === y && dragX === x) {
                            return;
                        } /* has it really moved? */
                        _drag(dragY, dragX, y, x);
                    }
                }).add(rds).bind("mouseup." + namespace + " touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace, function (e) {
                    if (draggable) {
                        _onDragClasses(draggable, "active", o.autoExpandScrollbar);
                        draggable = null;
                    }
                    touchActive = false;
                    if (oldIE) {
                        document.onselectstart = null;
                    } /* enable text selection for IE < 9 */
                    _iframe(true); /* enable iframes events */
                });
                function _iframe(evt) {
                    var el = mCSB_container.find("iframe");
                    if (!el.length) {
                        return;
                    } /* check if content contains iframes */
                    var val = !evt ? "none" : "auto";
                    el.css("pointer-events", val); /* for IE11, iframe's display property should not be "block" */
                }
                function _drag(dragY, dragX, y, x) {
                    mCSB_container[0].idleTimer = o.scrollInertia < 233 ? 250 : 0;
                    if (draggable.attr("id") === draggerId[1]) {
                        var dir = "x",
                            to = (draggable[0].offsetLeft - dragX + x) * d.scrollRatio.x;
                    } else {
                        var dir = "y",
                            to = (draggable[0].offsetTop - dragY + y) * d.scrollRatio.y;
                    }
                    _scrollTo($this, to.toString(), { dir: dir, drag: true });
                }
            },

            /* -------------------- */

            /* 
            TOUCH SWIPE EVENTS
            scrolls content via touch swipe 
            Emulates the native touch-swipe scrolling with momentum found in iOS, Android and WP devices 
            */
            _contentDraggable = function _contentDraggable() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    namespace = pluginPfx + "_" + d.idx,
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")],
                    draggable,
                    dragY,
                    dragX,
                    touchStartY,
                    touchStartX,
                    touchMoveY = [],
                    touchMoveX = [],
                    startTime,
                    runningTime,
                    endTime,
                    distance,
                    speed,
                    amount,
                    durA = 0,
                    durB,
                    overwrite = o.axis === "yx" ? "none" : "all",
                    touchIntent = [],
                    touchDrag,
                    docDrag,
                    iframe = mCSB_container.find("iframe"),
                    events = ["touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace, //start
                "touchmove." + namespace + " pointermove." + namespace + " MSPointerMove." + namespace, //move
                "touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace //end
                ],
                    touchAction = document.body.style.touchAction !== undefined;
                mCSB_container.bind(events[0], function (e) {
                    _onTouchstart(e);
                }).bind(events[1], function (e) {
                    _onTouchmove(e);
                });
                mCustomScrollBox.bind(events[0], function (e) {
                    _onTouchstart2(e);
                }).bind(events[2], function (e) {
                    _onTouchend(e);
                });
                if (iframe.length) {
                    iframe.each(function () {
                        $(this).load(function () {
                            /* bind events on accessible iframes */
                            if (_canAccessIFrame(this)) {
                                $(this.contentDocument || this.contentWindow.document).bind(events[0], function (e) {
                                    _onTouchstart(e);
                                    _onTouchstart2(e);
                                }).bind(events[1], function (e) {
                                    _onTouchmove(e);
                                }).bind(events[2], function (e) {
                                    _onTouchend(e);
                                });
                            }
                        });
                    });
                }
                function _onTouchstart(e) {
                    if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
                        touchable = 0;return;
                    }
                    touchable = 1;touchDrag = 0;docDrag = 0;draggable = 1;
                    $this.removeClass("mCS_touch_action");
                    var offset = mCSB_container.offset();
                    dragY = _coordinates(e)[0] - offset.top;
                    dragX = _coordinates(e)[1] - offset.left;
                    touchIntent = [_coordinates(e)[0], _coordinates(e)[1]];
                }
                function _onTouchmove(e) {
                    if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
                        return;
                    }
                    if (!o.documentTouchScroll) {
                        e.preventDefault();
                    }
                    e.stopImmediatePropagation();
                    if (docDrag && !touchDrag) {
                        return;
                    }
                    if (draggable) {
                        runningTime = _getTime();
                        var offset = mCustomScrollBox.offset(),
                            y = _coordinates(e)[0] - offset.top,
                            x = _coordinates(e)[1] - offset.left,
                            easing = "mcsLinearOut";
                        touchMoveY.push(y);
                        touchMoveX.push(x);
                        touchIntent[2] = Math.abs(_coordinates(e)[0] - touchIntent[0]);touchIntent[3] = Math.abs(_coordinates(e)[1] - touchIntent[1]);
                        if (d.overflowed[0]) {
                            var limit = mCSB_dragger[0].parent().height() - mCSB_dragger[0].height(),
                                prevent = dragY - y > 0 && y - dragY > -(limit * d.scrollRatio.y) && (touchIntent[3] * 2 < touchIntent[2] || o.axis === "yx");
                        }
                        if (d.overflowed[1]) {
                            var limitX = mCSB_dragger[1].parent().width() - mCSB_dragger[1].width(),
                                preventX = dragX - x > 0 && x - dragX > -(limitX * d.scrollRatio.x) && (touchIntent[2] * 2 < touchIntent[3] || o.axis === "yx");
                        }
                        if (prevent || preventX) {
                            /* prevent native document scrolling */
                            if (!touchAction) {
                                e.preventDefault();
                            }
                            touchDrag = 1;
                        } else {
                            docDrag = 1;
                            $this.addClass("mCS_touch_action");
                        }
                        if (touchAction) {
                            e.preventDefault();
                        }
                        amount = o.axis === "yx" ? [dragY - y, dragX - x] : o.axis === "x" ? [null, dragX - x] : [dragY - y, null];
                        mCSB_container[0].idleTimer = 250;
                        if (d.overflowed[0]) {
                            _drag(amount[0], durA, easing, "y", "all", true);
                        }
                        if (d.overflowed[1]) {
                            _drag(amount[1], durA, easing, "x", overwrite, true);
                        }
                    }
                }
                function _onTouchstart2(e) {
                    if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
                        touchable = 0;return;
                    }
                    touchable = 1;
                    e.stopImmediatePropagation();
                    _stop($this);
                    startTime = _getTime();
                    var offset = mCustomScrollBox.offset();
                    touchStartY = _coordinates(e)[0] - offset.top;
                    touchStartX = _coordinates(e)[1] - offset.left;
                    touchMoveY = [];touchMoveX = [];
                }
                function _onTouchend(e) {
                    if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
                        return;
                    }
                    draggable = 0;
                    e.stopImmediatePropagation();
                    touchDrag = 0;docDrag = 0;
                    endTime = _getTime();
                    var offset = mCustomScrollBox.offset(),
                        y = _coordinates(e)[0] - offset.top,
                        x = _coordinates(e)[1] - offset.left;
                    if (endTime - runningTime > 30) {
                        return;
                    }
                    speed = 1000 / (endTime - startTime);
                    var easing = "mcsEaseOut",
                        slow = speed < 2.5,
                        diff = slow ? [touchMoveY[touchMoveY.length - 2], touchMoveX[touchMoveX.length - 2]] : [0, 0];
                    distance = slow ? [y - diff[0], x - diff[1]] : [y - touchStartY, x - touchStartX];
                    var absDistance = [Math.abs(distance[0]), Math.abs(distance[1])];
                    speed = slow ? [Math.abs(distance[0] / 4), Math.abs(distance[1] / 4)] : [speed, speed];
                    var a = [Math.abs(mCSB_container[0].offsetTop) - distance[0] * _m(absDistance[0] / speed[0], speed[0]), Math.abs(mCSB_container[0].offsetLeft) - distance[1] * _m(absDistance[1] / speed[1], speed[1])];
                    amount = o.axis === "yx" ? [a[0], a[1]] : o.axis === "x" ? [null, a[1]] : [a[0], null];
                    durB = [absDistance[0] * 4 + o.scrollInertia, absDistance[1] * 4 + o.scrollInertia];
                    var md = parseInt(o.contentTouchScroll) || 0; /* absolute minimum distance required */
                    amount[0] = absDistance[0] > md ? amount[0] : 0;
                    amount[1] = absDistance[1] > md ? amount[1] : 0;
                    if (d.overflowed[0]) {
                        _drag(amount[0], durB[0], easing, "y", overwrite, false);
                    }
                    if (d.overflowed[1]) {
                        _drag(amount[1], durB[1], easing, "x", overwrite, false);
                    }
                }
                function _m(ds, s) {
                    var r = [s * 1.5, s * 2, s / 1.5, s / 2];
                    if (ds > 90) {
                        return s > 4 ? r[0] : r[3];
                    } else if (ds > 60) {
                        return s > 3 ? r[3] : r[2];
                    } else if (ds > 30) {
                        return s > 8 ? r[1] : s > 6 ? r[0] : s > 4 ? s : r[2];
                    } else {
                        return s > 8 ? s : r[3];
                    }
                }
                function _drag(amount, dur, easing, dir, overwrite, drag) {
                    if (!amount) {
                        return;
                    }
                    _scrollTo($this, amount.toString(), { dur: dur, scrollEasing: easing, dir: dir, overwrite: overwrite, drag: drag });
                }
            },

            /* -------------------- */

            /* 
            SELECT TEXT EVENTS 
            scrolls content when text is selected 
            */
            _selectable = function _selectable() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    seq = d.sequential,
                    namespace = pluginPfx + "_" + d.idx,
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    wrapper = mCSB_container.parent(),
                    action;
                mCSB_container.bind("mousedown." + namespace, function (e) {
                    if (touchable) {
                        return;
                    }
                    if (!action) {
                        action = 1;touchActive = true;
                    }
                }).add(document).bind("mousemove." + namespace, function (e) {
                    if (!touchable && action && _sel()) {
                        var offset = mCSB_container.offset(),
                            y = _coordinates(e)[0] - offset.top + mCSB_container[0].offsetTop,
                            x = _coordinates(e)[1] - offset.left + mCSB_container[0].offsetLeft;
                        if (y > 0 && y < wrapper.height() && x > 0 && x < wrapper.width()) {
                            if (seq.step) {
                                _seq("off", null, "stepped");
                            }
                        } else {
                            if (o.axis !== "x" && d.overflowed[0]) {
                                if (y < 0) {
                                    _seq("on", 38);
                                } else if (y > wrapper.height()) {
                                    _seq("on", 40);
                                }
                            }
                            if (o.axis !== "y" && d.overflowed[1]) {
                                if (x < 0) {
                                    _seq("on", 37);
                                } else if (x > wrapper.width()) {
                                    _seq("on", 39);
                                }
                            }
                        }
                    }
                }).bind("mouseup." + namespace + " dragend." + namespace, function (e) {
                    if (touchable) {
                        return;
                    }
                    if (action) {
                        action = 0;_seq("off", null);
                    }
                    touchActive = false;
                });
                function _sel() {
                    return window.getSelection ? window.getSelection().toString() : document.selection && document.selection.type != "Control" ? document.selection.createRange().text : 0;
                }
                function _seq(a, c, s) {
                    seq.type = s && action ? "stepped" : "stepless";
                    seq.scrollAmount = 10;
                    _sequentialScroll($this, a, c, "mcsLinearOut", s ? 60 : null);
                }
            },

            /* -------------------- */

            /* 
            MOUSE WHEEL EVENT
            scrolls content via mouse-wheel 
            via mouse-wheel plugin (https://github.com/brandonaaron/jquery-mousewheel)
            */
            _mousewheel = function _mousewheel() {
                if (!$(this).data(pluginPfx)) {
                    return;
                } /* Check if the scrollbar is ready to use mousewheel events (issue: #185) */
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    namespace = pluginPfx + "_" + d.idx,
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")],
                    iframe = $("#mCSB_" + d.idx + "_container").find("iframe");
                if (iframe.length) {
                    iframe.each(function () {
                        $(this).load(function () {
                            /* bind events on accessible iframes */
                            if (_canAccessIFrame(this)) {
                                $(this.contentDocument || this.contentWindow.document).bind("mousewheel." + namespace, function (e, delta) {
                                    _onMousewheel(e, delta);
                                });
                            }
                        });
                    });
                }
                mCustomScrollBox.bind("mousewheel." + namespace, function (e, delta) {
                    _onMousewheel(e, delta);
                });
                function _onMousewheel(e, delta) {
                    _stop($this);
                    if (_disableMousewheel($this, e.target)) {
                        return;
                    } /* disables mouse-wheel when hovering specific elements */
                    var deltaFactor = o.mouseWheel.deltaFactor !== "auto" ? parseInt(o.mouseWheel.deltaFactor) : oldIE && e.deltaFactor < 100 ? 100 : e.deltaFactor || 100,
                        dur = o.scrollInertia;
                    if (o.axis === "x" || o.mouseWheel.axis === "x") {
                        var dir = "x",
                            px = [Math.round(deltaFactor * d.scrollRatio.x), parseInt(o.mouseWheel.scrollAmount)],
                            amount = o.mouseWheel.scrollAmount !== "auto" ? px[1] : px[0] >= mCustomScrollBox.width() ? mCustomScrollBox.width() * 0.9 : px[0],
                            contentPos = Math.abs($("#mCSB_" + d.idx + "_container")[0].offsetLeft),
                            draggerPos = mCSB_dragger[1][0].offsetLeft,
                            limit = mCSB_dragger[1].parent().width() - mCSB_dragger[1].width(),
                            dlt = e.deltaX || e.deltaY || delta;
                    } else {
                        var dir = "y",
                            px = [Math.round(deltaFactor * d.scrollRatio.y), parseInt(o.mouseWheel.scrollAmount)],
                            amount = o.mouseWheel.scrollAmount !== "auto" ? px[1] : px[0] >= mCustomScrollBox.height() ? mCustomScrollBox.height() * 0.9 : px[0],
                            contentPos = Math.abs($("#mCSB_" + d.idx + "_container")[0].offsetTop),
                            draggerPos = mCSB_dragger[0][0].offsetTop,
                            limit = mCSB_dragger[0].parent().height() - mCSB_dragger[0].height(),
                            dlt = e.deltaY || delta;
                    }
                    if (dir === "y" && !d.overflowed[0] || dir === "x" && !d.overflowed[1]) {
                        return;
                    }
                    if (o.mouseWheel.invert || e.webkitDirectionInvertedFromDevice) {
                        dlt = -dlt;
                    }
                    if (o.mouseWheel.normalizeDelta) {
                        dlt = dlt < 0 ? -1 : 1;
                    }
                    if (dlt > 0 && draggerPos !== 0 || dlt < 0 && draggerPos !== limit || o.mouseWheel.preventDefault) {
                        e.stopImmediatePropagation();
                        e.preventDefault();
                    }
                    if (e.deltaFactor < 2 && !o.mouseWheel.normalizeDelta) {
                        //very low deltaFactor values mean some kind of delta acceleration (e.g. osx trackpad), so adjusting scrolling accordingly
                        amount = e.deltaFactor;dur = 17;
                    }
                    _scrollTo($this, (contentPos - dlt * amount).toString(), { dir: dir, dur: dur });
                }
            },

            /* -------------------- */

            /* checks if iframe can be accessed */
            _canAccessIFrame = function _canAccessIFrame(iframe) {
                var html = null;
                if (!iframe) {
                    try {
                        var doc = top.document;
                        html = doc.body.innerHTML;
                    } catch (err) {/* do nothing */}
                    return html !== null;
                } else {
                    try {
                        var doc = iframe.contentDocument || iframe.contentWindow.document;
                        html = doc.body.innerHTML;
                    } catch (err) {/* do nothing */}
                    return html !== null;
                }
            },

            /* -------------------- */

            /* disables mouse-wheel when hovering specific elements like select, datalist etc. */
            _disableMousewheel = function _disableMousewheel(el, target) {
                var tag = target.nodeName.toLowerCase(),
                    tags = el.data(pluginPfx).opt.mouseWheel.disableOver,

                /* elements that require focus */
                focusTags = ["select", "textarea"];
                return $.inArray(tag, tags) > -1 && !($.inArray(tag, focusTags) > -1 && !$(target).is(":focus"));
            },

            /* -------------------- */

            /* 
            DRAGGER RAIL CLICK EVENT
            scrolls content via dragger rail 
            */
            _draggerRail = function _draggerRail() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    namespace = pluginPfx + "_" + d.idx,
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    wrapper = mCSB_container.parent(),
                    mCSB_draggerContainer = $(".mCSB_" + d.idx + "_scrollbar ." + classes[12]),
                    clickable;
                mCSB_draggerContainer.bind("mousedown." + namespace + " touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace, function (e) {
                    touchActive = true;
                    if (!$(e.target).hasClass("mCSB_dragger")) {
                        clickable = 1;
                    }
                }).bind("touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace, function (e) {
                    touchActive = false;
                }).bind("click." + namespace, function (e) {
                    if (!clickable) {
                        return;
                    }
                    clickable = 0;
                    if ($(e.target).hasClass(classes[12]) || $(e.target).hasClass("mCSB_draggerRail")) {
                        _stop($this);
                        var el = $(this),
                            mCSB_dragger = el.find(".mCSB_dragger");
                        if (el.parent(".mCSB_scrollTools_horizontal").length > 0) {
                            if (!d.overflowed[1]) {
                                return;
                            }
                            var dir = "x",
                                clickDir = e.pageX > mCSB_dragger.offset().left ? -1 : 1,
                                to = Math.abs(mCSB_container[0].offsetLeft) - clickDir * (wrapper.width() * 0.9);
                        } else {
                            if (!d.overflowed[0]) {
                                return;
                            }
                            var dir = "y",
                                clickDir = e.pageY > mCSB_dragger.offset().top ? -1 : 1,
                                to = Math.abs(mCSB_container[0].offsetTop) - clickDir * (wrapper.height() * 0.9);
                        }
                        _scrollTo($this, to.toString(), { dir: dir, scrollEasing: "mcsEaseInOut" });
                    }
                });
            },

            /* -------------------- */

            /* 
            FOCUS EVENT
            scrolls content via element focus (e.g. clicking an input, pressing TAB key etc.)
            */
            _focus = function _focus() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    namespace = pluginPfx + "_" + d.idx,
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    wrapper = mCSB_container.parent();
                mCSB_container.bind("focusin." + namespace, function (e) {
                    var el = $(document.activeElement),
                        nested = mCSB_container.find(".mCustomScrollBox").length,
                        dur = 0;
                    if (!el.is(o.advanced.autoScrollOnFocus)) {
                        return;
                    }
                    _stop($this);
                    clearTimeout($this[0]._focusTimeout);
                    $this[0]._focusTimer = nested ? (dur + 17) * nested : 0;
                    $this[0]._focusTimeout = setTimeout(function () {
                        var to = [_childPos(el)[0], _childPos(el)[1]],
                            contentPos = [mCSB_container[0].offsetTop, mCSB_container[0].offsetLeft],
                            isVisible = [contentPos[0] + to[0] >= 0 && contentPos[0] + to[0] < wrapper.height() - el.outerHeight(false), contentPos[1] + to[1] >= 0 && contentPos[0] + to[1] < wrapper.width() - el.outerWidth(false)],
                            overwrite = o.axis === "yx" && !isVisible[0] && !isVisible[1] ? "none" : "all";
                        if (o.axis !== "x" && !isVisible[0]) {
                            _scrollTo($this, to[0].toString(), { dir: "y", scrollEasing: "mcsEaseInOut", overwrite: overwrite, dur: dur });
                        }
                        if (o.axis !== "y" && !isVisible[1]) {
                            _scrollTo($this, to[1].toString(), { dir: "x", scrollEasing: "mcsEaseInOut", overwrite: overwrite, dur: dur });
                        }
                    }, $this[0]._focusTimer);
                });
            },

            /* -------------------- */

            /* sets content wrapper scrollTop/scrollLeft always to 0 */
            _wrapperScroll = function _wrapperScroll() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    namespace = pluginPfx + "_" + d.idx,
                    wrapper = $("#mCSB_" + d.idx + "_container").parent();
                wrapper.bind("scroll." + namespace, function (e) {
                    if (wrapper.scrollTop() !== 0 || wrapper.scrollLeft() !== 0) {
                        $(".mCSB_" + d.idx + "_scrollbar").css("visibility", "hidden"); /* hide scrollbar(s) */
                    }
                });
            },

            /* -------------------- */

            /* 
            BUTTONS EVENTS
            scrolls content via up, down, left and right buttons 
            */
            _buttons = function _buttons() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    seq = d.sequential,
                    namespace = pluginPfx + "_" + d.idx,
                    sel = ".mCSB_" + d.idx + "_scrollbar",
                    btn = $(sel + ">a");
                btn.bind("mousedown." + namespace + " touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace + " mouseup." + namespace + " touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace + " mouseout." + namespace + " pointerout." + namespace + " MSPointerOut." + namespace + " click." + namespace, function (e) {
                    e.preventDefault();
                    if (!_mouseBtnLeft(e)) {
                        return;
                    } /* left mouse button only */
                    var btnClass = $(this).attr("class");
                    seq.type = o.scrollButtons.scrollType;
                    switch (e.type) {
                        case "mousedown":case "touchstart":case "pointerdown":case "MSPointerDown":
                            if (seq.type === "stepped") {
                                return;
                            }
                            touchActive = true;
                            d.tweenRunning = false;
                            _seq("on", btnClass);
                            break;
                        case "mouseup":case "touchend":case "pointerup":case "MSPointerUp":
                        case "mouseout":case "pointerout":case "MSPointerOut":
                            if (seq.type === "stepped") {
                                return;
                            }
                            touchActive = false;
                            if (seq.dir) {
                                _seq("off", btnClass);
                            }
                            break;
                        case "click":
                            if (seq.type !== "stepped" || d.tweenRunning) {
                                return;
                            }
                            _seq("on", btnClass);
                            break;
                    }
                    function _seq(a, c) {
                        seq.scrollAmount = o.scrollButtons.scrollAmount;
                        _sequentialScroll($this, a, c);
                    }
                });
            },

            /* -------------------- */

            /* 
            KEYBOARD EVENTS
            scrolls content via keyboard 
            Keys: up arrow, down arrow, left arrow, right arrow, PgUp, PgDn, Home, End
            */
            _keyboard = function _keyboard() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    seq = d.sequential,
                    namespace = pluginPfx + "_" + d.idx,
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    wrapper = mCSB_container.parent(),
                    editables = "input,textarea,select,datalist,keygen,[contenteditable='true']",
                    iframe = mCSB_container.find("iframe"),
                    events = ["blur." + namespace + " keydown." + namespace + " keyup." + namespace];
                if (iframe.length) {
                    iframe.each(function () {
                        $(this).load(function () {
                            /* bind events on accessible iframes */
                            if (_canAccessIFrame(this)) {
                                $(this.contentDocument || this.contentWindow.document).bind(events[0], function (e) {
                                    _onKeyboard(e);
                                });
                            }
                        });
                    });
                }
                mCustomScrollBox.attr("tabindex", "0").bind(events[0], function (e) {
                    _onKeyboard(e);
                });
                function _onKeyboard(e) {
                    switch (e.type) {
                        case "blur":
                            if (d.tweenRunning && seq.dir) {
                                _seq("off", null);
                            }
                            break;
                        case "keydown":case "keyup":
                            var code = e.keyCode ? e.keyCode : e.which,
                                action = "on";
                            if (o.axis !== "x" && (code === 38 || code === 40) || o.axis !== "y" && (code === 37 || code === 39)) {
                                /* up (38), down (40), left (37), right (39) arrows */
                                if ((code === 38 || code === 40) && !d.overflowed[0] || (code === 37 || code === 39) && !d.overflowed[1]) {
                                    return;
                                }
                                if (e.type === "keyup") {
                                    action = "off";
                                }
                                if (!$(document.activeElement).is(editables)) {
                                    e.preventDefault();
                                    e.stopImmediatePropagation();
                                    _seq(action, code);
                                }
                            } else if (code === 33 || code === 34) {
                                /* PgUp (33), PgDn (34) */
                                if (d.overflowed[0] || d.overflowed[1]) {
                                    e.preventDefault();
                                    e.stopImmediatePropagation();
                                }
                                if (e.type === "keyup") {
                                    _stop($this);
                                    var keyboardDir = code === 34 ? -1 : 1;
                                    if (o.axis === "x" || o.axis === "yx" && d.overflowed[1] && !d.overflowed[0]) {
                                        var dir = "x",
                                            to = Math.abs(mCSB_container[0].offsetLeft) - keyboardDir * (wrapper.width() * 0.9);
                                    } else {
                                        var dir = "y",
                                            to = Math.abs(mCSB_container[0].offsetTop) - keyboardDir * (wrapper.height() * 0.9);
                                    }
                                    _scrollTo($this, to.toString(), { dir: dir, scrollEasing: "mcsEaseInOut" });
                                }
                            } else if (code === 35 || code === 36) {
                                /* End (35), Home (36) */
                                if (!$(document.activeElement).is(editables)) {
                                    if (d.overflowed[0] || d.overflowed[1]) {
                                        e.preventDefault();
                                        e.stopImmediatePropagation();
                                    }
                                    if (e.type === "keyup") {
                                        if (o.axis === "x" || o.axis === "yx" && d.overflowed[1] && !d.overflowed[0]) {
                                            var dir = "x",
                                                to = code === 35 ? Math.abs(wrapper.width() - mCSB_container.outerWidth(false)) : 0;
                                        } else {
                                            var dir = "y",
                                                to = code === 35 ? Math.abs(wrapper.height() - mCSB_container.outerHeight(false)) : 0;
                                        }
                                        _scrollTo($this, to.toString(), { dir: dir, scrollEasing: "mcsEaseInOut" });
                                    }
                                }
                            }
                            break;
                    }
                    function _seq(a, c) {
                        seq.type = o.keyboard.scrollType;
                        seq.scrollAmount = o.keyboard.scrollAmount;
                        if (seq.type === "stepped" && d.tweenRunning) {
                            return;
                        }
                        _sequentialScroll($this, a, c);
                    }
                }
            },

            /* -------------------- */

            /* scrolls content sequentially (used when scrolling via buttons, keyboard arrows etc.) */
            _sequentialScroll = function _sequentialScroll(el, action, trigger, e, s) {
                var d = el.data(pluginPfx),
                    o = d.opt,
                    seq = d.sequential,
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    once = seq.type === "stepped" ? true : false,
                    steplessSpeed = o.scrollInertia < 26 ? 26 : o.scrollInertia,
                    /* 26/1.5=17 */
                steppedSpeed = o.scrollInertia < 1 ? 17 : o.scrollInertia;
                switch (action) {
                    case "on":
                        seq.dir = [trigger === classes[16] || trigger === classes[15] || trigger === 39 || trigger === 37 ? "x" : "y", trigger === classes[13] || trigger === classes[15] || trigger === 38 || trigger === 37 ? -1 : 1];
                        _stop(el);
                        if (_isNumeric(trigger) && seq.type === "stepped") {
                            return;
                        }
                        _on(once);
                        break;
                    case "off":
                        _off();
                        if (once || d.tweenRunning && seq.dir) {
                            _on(true);
                        }
                        break;
                }

                /* starts sequence */
                function _on(once) {
                    if (o.snapAmount) {
                        seq.scrollAmount = !(o.snapAmount instanceof Array) ? o.snapAmount : seq.dir[0] === "x" ? o.snapAmount[1] : o.snapAmount[0];
                    } /* scrolling snapping */
                    var c = seq.type !== "stepped",
                        /* continuous scrolling */
                    t = s ? s : !once ? 1000 / 60 : c ? steplessSpeed / 1.5 : steppedSpeed,
                        /* timer */
                    m = !once ? 2.5 : c ? 7.5 : 40,
                        /* multiplier */
                    contentPos = [Math.abs(mCSB_container[0].offsetTop), Math.abs(mCSB_container[0].offsetLeft)],
                        ratio = [d.scrollRatio.y > 10 ? 10 : d.scrollRatio.y, d.scrollRatio.x > 10 ? 10 : d.scrollRatio.x],
                        amount = seq.dir[0] === "x" ? contentPos[1] + seq.dir[1] * (ratio[1] * m) : contentPos[0] + seq.dir[1] * (ratio[0] * m),
                        px = seq.dir[0] === "x" ? contentPos[1] + seq.dir[1] * parseInt(seq.scrollAmount) : contentPos[0] + seq.dir[1] * parseInt(seq.scrollAmount),
                        to = seq.scrollAmount !== "auto" ? px : amount,
                        easing = e ? e : !once ? "mcsLinear" : c ? "mcsLinearOut" : "mcsEaseInOut",
                        onComplete = !once ? false : true;
                    if (once && t < 17) {
                        to = seq.dir[0] === "x" ? contentPos[1] : contentPos[0];
                    }
                    _scrollTo(el, to.toString(), { dir: seq.dir[0], scrollEasing: easing, dur: t, onComplete: onComplete });
                    if (once) {
                        seq.dir = false;
                        return;
                    }
                    clearTimeout(seq.step);
                    seq.step = setTimeout(function () {
                        _on();
                    }, t);
                }
                /* stops sequence */
                function _off() {
                    clearTimeout(seq.step);
                    _delete(seq, "step");
                    _stop(el);
                }
            },

            /* -------------------- */

            /* returns a yx array from value */
            _arr = function _arr(val) {
                var o = $(this).data(pluginPfx).opt,
                    vals = [];
                if (typeof val === "function") {
                    val = val();
                } /* check if the value is a single anonymous function */
                /* check if value is object or array, its length and create an array with yx values */
                if (!(val instanceof Array)) {
                    /* object value (e.g. {y:"100",x:"100"}, 100 etc.) */
                    vals[0] = val.y ? val.y : val.x || o.axis === "x" ? null : val;
                    vals[1] = val.x ? val.x : val.y || o.axis === "y" ? null : val;
                } else {
                    /* array value (e.g. [100,100]) */
                    vals = val.length > 1 ? [val[0], val[1]] : o.axis === "x" ? [null, val[0]] : [val[0], null];
                }
                /* check if array values are anonymous functions */
                if (typeof vals[0] === "function") {
                    vals[0] = vals[0]();
                }
                if (typeof vals[1] === "function") {
                    vals[1] = vals[1]();
                }
                return vals;
            },

            /* -------------------- */

            /* translates values (e.g. "top", 100, "100px", "#id") to actual scroll-to positions */
            _to = function _to(val, dir) {
                if (val == null || typeof val == "undefined") {
                    return;
                }
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    wrapper = mCSB_container.parent(),
                    t = typeof val === "undefined" ? "undefined" : _typeof(val);
                if (!dir) {
                    dir = o.axis === "x" ? "x" : "y";
                }
                var contentLength = dir === "x" ? mCSB_container.outerWidth(false) : mCSB_container.outerHeight(false),
                    contentPos = dir === "x" ? mCSB_container[0].offsetLeft : mCSB_container[0].offsetTop,
                    cssProp = dir === "x" ? "left" : "top";
                switch (t) {
                    case "function":
                        /* this currently is not used. Consider removing it */
                        return val();
                        break;
                    case "object":
                        /* js/jquery object */
                        var obj = val.jquery ? val : $(val);
                        if (!obj.length) {
                            return;
                        }
                        return dir === "x" ? _childPos(obj)[1] : _childPos(obj)[0];
                        break;
                    case "string":case "number":
                        if (_isNumeric(val)) {
                            /* numeric value */
                            return Math.abs(val);
                        } else if (val.indexOf("%") !== -1) {
                            /* percentage value */
                            return Math.abs(contentLength * parseInt(val) / 100);
                        } else if (val.indexOf("-=") !== -1) {
                            /* decrease value */
                            return Math.abs(contentPos - parseInt(val.split("-=")[1]));
                        } else if (val.indexOf("+=") !== -1) {
                            /* inrease value */
                            var p = contentPos + parseInt(val.split("+=")[1]);
                            return p >= 0 ? 0 : Math.abs(p);
                        } else if (val.indexOf("px") !== -1 && _isNumeric(val.split("px")[0])) {
                            /* pixels string value (e.g. "100px") */
                            return Math.abs(val.split("px")[0]);
                        } else {
                            if (val === "top" || val === "left") {
                                /* special strings */
                                return 0;
                            } else if (val === "bottom") {
                                return Math.abs(wrapper.height() - mCSB_container.outerHeight(false));
                            } else if (val === "right") {
                                return Math.abs(wrapper.width() - mCSB_container.outerWidth(false));
                            } else if (val === "first" || val === "last") {
                                var obj = mCSB_container.find(":" + val);
                                return dir === "x" ? _childPos(obj)[1] : _childPos(obj)[0];
                            } else {
                                if ($(val).length) {
                                    /* jquery selector */
                                    return dir === "x" ? _childPos($(val))[1] : _childPos($(val))[0];
                                } else {
                                    /* other values (e.g. "100em") */
                                    mCSB_container.css(cssProp, val);
                                    methods.update.call(null, $this[0]);
                                    return;
                                }
                            }
                        }
                        break;
                }
            },

            /* -------------------- */

            /* calls the update method automatically */
            _autoUpdate = function _autoUpdate(rem) {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    mCSB_container = $("#mCSB_" + d.idx + "_container");
                if (rem) {
                    /* 
                    removes autoUpdate timer 
                    usage: _autoUpdate.call(this,"remove");
                    */
                    clearTimeout(mCSB_container[0].autoUpdate);
                    _delete(mCSB_container[0], "autoUpdate");
                    return;
                }
                upd();
                function upd() {
                    clearTimeout(mCSB_container[0].autoUpdate);
                    if ($this.parents("html").length === 0) {
                        /* check element in dom tree */
                        $this = null;
                        return;
                    }
                    mCSB_container[0].autoUpdate = setTimeout(function () {
                        /* update on specific selector(s) length and size change */
                        if (o.advanced.updateOnSelectorChange) {
                            d.poll.change.n = sizesSum();
                            if (d.poll.change.n !== d.poll.change.o) {
                                d.poll.change.o = d.poll.change.n;
                                doUpd(3);
                                return;
                            }
                        }
                        /* update on main element and scrollbar size changes */
                        if (o.advanced.updateOnContentResize) {
                            d.poll.size.n = $this[0].scrollHeight + $this[0].scrollWidth + mCSB_container[0].offsetHeight + $this[0].offsetHeight + $this[0].offsetWidth;
                            if (d.poll.size.n !== d.poll.size.o) {
                                d.poll.size.o = d.poll.size.n;
                                doUpd(1);
                                return;
                            }
                        }
                        /* update on image load */
                        if (o.advanced.updateOnImageLoad) {
                            if (!(o.advanced.updateOnImageLoad === "auto" && o.axis === "y")) {
                                //by default, it doesn't run on vertical content
                                d.poll.img.n = mCSB_container.find("img").length;
                                if (d.poll.img.n !== d.poll.img.o) {
                                    d.poll.img.o = d.poll.img.n;
                                    mCSB_container.find("img").each(function () {
                                        imgLoader(this);
                                    });
                                    return;
                                }
                            }
                        }
                        if (o.advanced.updateOnSelectorChange || o.advanced.updateOnContentResize || o.advanced.updateOnImageLoad) {
                            upd();
                        }
                    }, o.advanced.autoUpdateTimeout);
                }
                /* a tiny image loader */
                function imgLoader(el) {
                    if ($(el).hasClass(classes[2])) {
                        doUpd();return;
                    }
                    var img = new Image();
                    function createDelegate(contextObject, delegateMethod) {
                        return function () {
                            return delegateMethod.apply(contextObject, arguments);
                        };
                    }
                    function imgOnLoad() {
                        this.onload = null;
                        $(el).addClass(classes[2]);
                        doUpd(2);
                    }
                    img.onload = createDelegate(img, imgOnLoad);
                    img.src = el.src;
                }
                /* returns the total height and width sum of all elements matching the selector */
                function sizesSum() {
                    if (o.advanced.updateOnSelectorChange === true) {
                        o.advanced.updateOnSelectorChange = "*";
                    }
                    var total = 0,
                        sel = mCSB_container.find(o.advanced.updateOnSelectorChange);
                    if (o.advanced.updateOnSelectorChange && sel.length > 0) {
                        sel.each(function () {
                            total += this.offsetHeight + this.offsetWidth;
                        });
                    }
                    return total;
                }
                /* calls the update method */
                function doUpd(cb) {
                    clearTimeout(mCSB_container[0].autoUpdate);
                    methods.update.call(null, $this[0], cb);
                }
            },

            /* -------------------- */

            /* snaps scrolling to a multiple of a pixels number */
            _snapAmount = function _snapAmount(to, amount, offset) {
                return Math.round(to / amount) * amount - offset;
            },

            /* -------------------- */

            /* stops content and scrollbar animations */
            _stop = function _stop(el) {
                var d = el.data(pluginPfx),
                    sel = $("#mCSB_" + d.idx + "_container,#mCSB_" + d.idx + "_container_wrapper,#mCSB_" + d.idx + "_dragger_vertical,#mCSB_" + d.idx + "_dragger_horizontal");
                sel.each(function () {
                    _stopTween.call(this);
                });
            },

            /* -------------------- */

            /* 
            ANIMATES CONTENT 
            This is where the actual scrolling happens
            */
            _scrollTo = function _scrollTo(el, to, options) {
                var d = el.data(pluginPfx),
                    o = d.opt,
                    defaults = {
                    trigger: "internal",
                    dir: "y",
                    scrollEasing: "mcsEaseOut",
                    drag: false,
                    dur: o.scrollInertia,
                    overwrite: "all",
                    callbacks: true,
                    onStart: true,
                    onUpdate: true,
                    onComplete: true
                },
                    options = $.extend(defaults, options),
                    dur = [options.dur, options.drag ? 0 : options.dur],
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    wrapper = mCSB_container.parent(),
                    totalScrollOffsets = o.callbacks.onTotalScrollOffset ? _arr.call(el, o.callbacks.onTotalScrollOffset) : [0, 0],
                    totalScrollBackOffsets = o.callbacks.onTotalScrollBackOffset ? _arr.call(el, o.callbacks.onTotalScrollBackOffset) : [0, 0];
                d.trigger = options.trigger;
                if (wrapper.scrollTop() !== 0 || wrapper.scrollLeft() !== 0) {
                    /* always reset scrollTop/Left */
                    $(".mCSB_" + d.idx + "_scrollbar").css("visibility", "visible");
                    wrapper.scrollTop(0).scrollLeft(0);
                }
                if (to === "_resetY" && !d.contentReset.y) {
                    /* callbacks: onOverflowYNone */
                    if (_cb("onOverflowYNone")) {
                        o.callbacks.onOverflowYNone.call(el[0]);
                    }
                    d.contentReset.y = 1;
                }
                if (to === "_resetX" && !d.contentReset.x) {
                    /* callbacks: onOverflowXNone */
                    if (_cb("onOverflowXNone")) {
                        o.callbacks.onOverflowXNone.call(el[0]);
                    }
                    d.contentReset.x = 1;
                }
                if (to === "_resetY" || to === "_resetX") {
                    return;
                }
                if ((d.contentReset.y || !el[0].mcs) && d.overflowed[0]) {
                    /* callbacks: onOverflowY */
                    if (_cb("onOverflowY")) {
                        o.callbacks.onOverflowY.call(el[0]);
                    }
                    d.contentReset.x = null;
                }
                if ((d.contentReset.x || !el[0].mcs) && d.overflowed[1]) {
                    /* callbacks: onOverflowX */
                    if (_cb("onOverflowX")) {
                        o.callbacks.onOverflowX.call(el[0]);
                    }
                    d.contentReset.x = null;
                }
                if (o.snapAmount) {
                    /* scrolling snapping */
                    var snapAmount = !(o.snapAmount instanceof Array) ? o.snapAmount : options.dir === "x" ? o.snapAmount[1] : o.snapAmount[0];
                    to = _snapAmount(to, snapAmount, o.snapOffset);
                }
                switch (options.dir) {
                    case "x":
                        var mCSB_dragger = $("#mCSB_" + d.idx + "_dragger_horizontal"),
                            property = "left",
                            contentPos = mCSB_container[0].offsetLeft,
                            limit = [mCustomScrollBox.width() - mCSB_container.outerWidth(false), mCSB_dragger.parent().width() - mCSB_dragger.width()],
                            scrollTo = [to, to === 0 ? 0 : to / d.scrollRatio.x],
                            tso = totalScrollOffsets[1],
                            tsbo = totalScrollBackOffsets[1],
                            totalScrollOffset = tso > 0 ? tso / d.scrollRatio.x : 0,
                            totalScrollBackOffset = tsbo > 0 ? tsbo / d.scrollRatio.x : 0;
                        break;
                    case "y":
                        var mCSB_dragger = $("#mCSB_" + d.idx + "_dragger_vertical"),
                            property = "top",
                            contentPos = mCSB_container[0].offsetTop,
                            limit = [mCustomScrollBox.height() - mCSB_container.outerHeight(false), mCSB_dragger.parent().height() - mCSB_dragger.height()],
                            scrollTo = [to, to === 0 ? 0 : to / d.scrollRatio.y],
                            tso = totalScrollOffsets[0],
                            tsbo = totalScrollBackOffsets[0],
                            totalScrollOffset = tso > 0 ? tso / d.scrollRatio.y : 0,
                            totalScrollBackOffset = tsbo > 0 ? tsbo / d.scrollRatio.y : 0;
                        break;
                }
                if (scrollTo[1] < 0 || scrollTo[0] === 0 && scrollTo[1] === 0) {
                    scrollTo = [0, 0];
                } else if (scrollTo[1] >= limit[1]) {
                    scrollTo = [limit[0], limit[1]];
                } else {
                    scrollTo[0] = -scrollTo[0];
                }
                if (!el[0].mcs) {
                    _mcs(); /* init mcs object (once) to make it available before callbacks */
                    if (_cb("onInit")) {
                        o.callbacks.onInit.call(el[0]);
                    } /* callbacks: onInit */
                }
                clearTimeout(mCSB_container[0].onCompleteTimeout);
                _tweenTo(mCSB_dragger[0], property, Math.round(scrollTo[1]), dur[1], options.scrollEasing);
                if (!d.tweenRunning && (contentPos === 0 && scrollTo[0] >= 0 || contentPos === limit[0] && scrollTo[0] <= limit[0])) {
                    return;
                }
                _tweenTo(mCSB_container[0], property, Math.round(scrollTo[0]), dur[0], options.scrollEasing, options.overwrite, {
                    onStart: function onStart() {
                        if (options.callbacks && options.onStart && !d.tweenRunning) {
                            /* callbacks: onScrollStart */
                            if (_cb("onScrollStart")) {
                                _mcs();o.callbacks.onScrollStart.call(el[0]);
                            }
                            d.tweenRunning = true;
                            _onDragClasses(mCSB_dragger);
                            d.cbOffsets = _cbOffsets();
                        }
                    }, onUpdate: function onUpdate() {
                        if (options.callbacks && options.onUpdate) {
                            /* callbacks: whileScrolling */
                            if (_cb("whileScrolling")) {
                                _mcs();o.callbacks.whileScrolling.call(el[0]);
                            }
                        }
                    }, onComplete: function onComplete() {
                        if (options.callbacks && options.onComplete) {
                            if (o.axis === "yx") {
                                clearTimeout(mCSB_container[0].onCompleteTimeout);
                            }
                            var t = mCSB_container[0].idleTimer || 0;
                            mCSB_container[0].onCompleteTimeout = setTimeout(function () {
                                /* callbacks: onScroll, onTotalScroll, onTotalScrollBack */
                                if (_cb("onScroll")) {
                                    _mcs();o.callbacks.onScroll.call(el[0]);
                                }
                                if (_cb("onTotalScroll") && scrollTo[1] >= limit[1] - totalScrollOffset && d.cbOffsets[0]) {
                                    _mcs();o.callbacks.onTotalScroll.call(el[0]);
                                }
                                if (_cb("onTotalScrollBack") && scrollTo[1] <= totalScrollBackOffset && d.cbOffsets[1]) {
                                    _mcs();o.callbacks.onTotalScrollBack.call(el[0]);
                                }
                                d.tweenRunning = false;
                                mCSB_container[0].idleTimer = 0;
                                _onDragClasses(mCSB_dragger, "hide");
                            }, t);
                        }
                    }
                });
                /* checks if callback function exists */
                function _cb(cb) {
                    return d && o.callbacks[cb] && typeof o.callbacks[cb] === "function";
                }
                /* checks whether callback offsets always trigger */
                function _cbOffsets() {
                    return [o.callbacks.alwaysTriggerOffsets || contentPos >= limit[0] + tso, o.callbacks.alwaysTriggerOffsets || contentPos <= -tsbo];
                }
                /* 
                populates object with useful values for the user 
                values: 
                    content: this.mcs.content
                    content top position: this.mcs.top 
                    content left position: this.mcs.left 
                    dragger top position: this.mcs.draggerTop 
                    dragger left position: this.mcs.draggerLeft 
                    scrolling y percentage: this.mcs.topPct 
                    scrolling x percentage: this.mcs.leftPct 
                    scrolling direction: this.mcs.direction
                */
                function _mcs() {
                    var cp = [mCSB_container[0].offsetTop, mCSB_container[0].offsetLeft],
                        /* content position */
                    dp = [mCSB_dragger[0].offsetTop, mCSB_dragger[0].offsetLeft],
                        /* dragger position */
                    cl = [mCSB_container.outerHeight(false), mCSB_container.outerWidth(false)],
                        /* content length */
                    pl = [mCustomScrollBox.height(), mCustomScrollBox.width()]; /* content parent length */
                    el[0].mcs = {
                        content: mCSB_container, /* original content wrapper as jquery object */
                        top: cp[0], left: cp[1], draggerTop: dp[0], draggerLeft: dp[1],
                        topPct: Math.round(100 * Math.abs(cp[0]) / (Math.abs(cl[0]) - pl[0])), leftPct: Math.round(100 * Math.abs(cp[1]) / (Math.abs(cl[1]) - pl[1])),
                        direction: options.dir
                    };
                    /* 
                    this refers to the original element containing the scrollbar(s)
                    usage: this.mcs.top, this.mcs.leftPct etc. 
                    */
                }
            },

            /* -------------------- */

            /* 
            CUSTOM JAVASCRIPT ANIMATION TWEEN 
            Lighter and faster than jquery animate() and css transitions 
            Animates top/left properties and includes easings 
            */
            _tweenTo = function _tweenTo(el, prop, to, duration, easing, overwrite, callbacks) {
                if (!el._mTween) {
                    el._mTween = { top: {}, left: {} };
                }
                var callbacks = callbacks || {},
                    onStart = callbacks.onStart || function () {},
                    onUpdate = callbacks.onUpdate || function () {},
                    onComplete = callbacks.onComplete || function () {},
                    startTime = _getTime(),
                    _delay,
                    progress = 0,
                    from = el.offsetTop,
                    elStyle = el.style,
                    _request,
                    tobj = el._mTween[prop];
                if (prop === "left") {
                    from = el.offsetLeft;
                }
                var diff = to - from;
                tobj.stop = 0;
                if (overwrite !== "none") {
                    _cancelTween();
                }
                _startTween();
                function _step() {
                    if (tobj.stop) {
                        return;
                    }
                    if (!progress) {
                        onStart.call();
                    }
                    progress = _getTime() - startTime;
                    _tween();
                    if (progress >= tobj.time) {
                        tobj.time = progress > tobj.time ? progress + _delay - (progress - tobj.time) : progress + _delay - 1;
                        if (tobj.time < progress + 1) {
                            tobj.time = progress + 1;
                        }
                    }
                    if (tobj.time < duration) {
                        tobj.id = _request(_step);
                    } else {
                        onComplete.call();
                    }
                }
                function _tween() {
                    if (duration > 0) {
                        tobj.currVal = _ease(tobj.time, from, diff, duration, easing);
                        elStyle[prop] = Math.round(tobj.currVal) + "px";
                    } else {
                        elStyle[prop] = to + "px";
                    }
                    onUpdate.call();
                }
                function _startTween() {
                    _delay = 1000 / 60;
                    tobj.time = progress + _delay;
                    _request = !window.requestAnimationFrame ? function (f) {
                        _tween();return setTimeout(f, 0.01);
                    } : window.requestAnimationFrame;
                    tobj.id = _request(_step);
                }
                function _cancelTween() {
                    if (tobj.id == null) {
                        return;
                    }
                    if (!window.requestAnimationFrame) {
                        clearTimeout(tobj.id);
                    } else {
                        window.cancelAnimationFrame(tobj.id);
                    }
                    tobj.id = null;
                }
                function _ease(t, b, c, d, type) {
                    switch (type) {
                        case "linear":case "mcsLinear":
                            return c * t / d + b;
                            break;
                        case "mcsLinearOut":
                            t /= d;t--;return c * Math.sqrt(1 - t * t) + b;
                            break;
                        case "easeInOutSmooth":
                            t /= d / 2;
                            if (t < 1) return c / 2 * t * t + b;
                            t--;
                            return -c / 2 * (t * (t - 2) - 1) + b;
                            break;
                        case "easeInOutStrong":
                            t /= d / 2;
                            if (t < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
                            t--;
                            return c / 2 * (-Math.pow(2, -10 * t) + 2) + b;
                            break;
                        case "easeInOut":case "mcsEaseInOut":
                            t /= d / 2;
                            if (t < 1) return c / 2 * t * t * t + b;
                            t -= 2;
                            return c / 2 * (t * t * t + 2) + b;
                            break;
                        case "easeOutSmooth":
                            t /= d;t--;
                            return -c * (t * t * t * t - 1) + b;
                            break;
                        case "easeOutStrong":
                            return c * (-Math.pow(2, -10 * t / d) + 1) + b;
                            break;
                        case "easeOut":case "mcsEaseOut":default:
                            var ts = (t /= d) * t,
                                tc = ts * t;
                            return b + c * (0.499999999999997 * tc * ts + -2.5 * ts * ts + 5.5 * tc + -6.5 * ts + 4 * t);
                    }
                }
            },

            /* -------------------- */

            /* returns current time */
            _getTime = function _getTime() {
                if (window.performance && window.performance.now) {
                    return window.performance.now();
                } else {
                    if (window.performance && window.performance.webkitNow) {
                        return window.performance.webkitNow();
                    } else {
                        if (Date.now) {
                            return Date.now();
                        } else {
                            return new Date().getTime();
                        }
                    }
                }
            },

            /* -------------------- */

            /* stops a tween */
            _stopTween = function _stopTween() {
                var el = this;
                if (!el._mTween) {
                    el._mTween = { top: {}, left: {} };
                }
                var props = ["top", "left"];
                for (var i = 0; i < props.length; i++) {
                    var prop = props[i];
                    if (el._mTween[prop].id) {
                        if (!window.requestAnimationFrame) {
                            clearTimeout(el._mTween[prop].id);
                        } else {
                            window.cancelAnimationFrame(el._mTween[prop].id);
                        }
                        el._mTween[prop].id = null;
                        el._mTween[prop].stop = 1;
                    }
                }
            },

            /* -------------------- */

            /* deletes a property (avoiding the exception thrown by IE) */
            _delete = function _delete(c, m) {
                try {
                    delete c[m];
                } catch (e) {
                    c[m] = null;
                }
            },

            /* -------------------- */

            /* detects left mouse button */
            _mouseBtnLeft = function _mouseBtnLeft(e) {
                return !(e.which && e.which !== 1);
            },

            /* -------------------- */

            /* detects if pointer type event is touch */
            _pointerTouch = function _pointerTouch(e) {
                var t = e.originalEvent.pointerType;
                return !(t && t !== "touch" && t !== 2);
            },

            /* -------------------- */

            /* checks if value is numeric */
            _isNumeric = function _isNumeric(val) {
                return !isNaN(parseFloat(val)) && isFinite(val);
            },

            /* -------------------- */

            /* returns element position according to content */
            _childPos = function _childPos(el) {
                var p = el.parents(".mCSB_container");
                return [el.offset().top - p.offset().top, el.offset().left - p.offset().left];
            },

            /* -------------------- */

            /* checks if browser tab is hidden/inactive via Page Visibility API */
            _isTabHidden = function _isTabHidden() {
                var prop = _getHiddenProp();
                if (!prop) return false;
                return document[prop];
                function _getHiddenProp() {
                    var pfx = ["webkit", "moz", "ms", "o"];
                    if ("hidden" in document) return "hidden"; //natively supported
                    for (var i = 0; i < pfx.length; i++) {
                        //prefixed
                        if (pfx[i] + "Hidden" in document) return pfx[i] + "Hidden";
                    }
                    return null; //not supported
                }
            };
            /* -------------------- */

            /* 
            ----------------------------------------
            PLUGIN SETUP 
            ----------------------------------------
            */

            /* plugin constructor functions */
            $.fn[pluginNS] = function (method) {
                /* usage: $(selector).mCustomScrollbar(); */
                if (methods[method]) {
                    return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
                } else if ((typeof method === "undefined" ? "undefined" : _typeof(method)) === "object" || !method) {
                    return methods.init.apply(this, arguments);
                } else {
                    $.error("Method " + method + " does not exist");
                }
            };
            $[pluginNS] = function (method) {
                /* usage: $.mCustomScrollbar(); */
                if (methods[method]) {
                    return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
                } else if ((typeof method === "undefined" ? "undefined" : _typeof(method)) === "object" || !method) {
                    return methods.init.apply(this, arguments);
                } else {
                    $.error("Method " + method + " does not exist");
                }
            };

            /* 
            allow setting plugin default options. 
            usage: $.mCustomScrollbar.defaults.scrollInertia=500; 
            to apply any changed default options on default selectors (below), use inside document ready fn 
            e.g.: $(document).ready(function(){ $.mCustomScrollbar.defaults.scrollInertia=500; });
            */
            $[pluginNS].defaults = defaults;

            /* 
            add window object (window.mCustomScrollbar) 
            usage: if(window.mCustomScrollbar){console.log("custom scrollbar plugin loaded");}
            */
            window[pluginNS] = true;

            $(window).load(function () {

                $(defaultSelector)[pluginNS](); /* add scrollbars automatically on default selector */

                /* extend jQuery expressions */
                $.extend($.expr[":"], {
                    /* checks if element is within scrollable viewport */
                    mcsInView: $.expr[":"].mcsInView || function (el) {
                        var $el = $(el),
                            content = $el.parents(".mCSB_container"),
                            wrapper,
                            cPos;
                        if (!content.length) {
                            return;
                        }
                        wrapper = content.parent();
                        cPos = [content[0].offsetTop, content[0].offsetLeft];
                        return cPos[0] + _childPos($el)[0] >= 0 && cPos[0] + _childPos($el)[0] < wrapper.height() - $el.outerHeight(false) && cPos[1] + _childPos($el)[1] >= 0 && cPos[1] + _childPos($el)[1] < wrapper.width() - $el.outerWidth(false);
                    },
                    /* checks if element is overflowed having visible scrollbar(s) */
                    mcsOverflow: $.expr[":"].mcsOverflow || function (el) {
                        var d = $(el).data(pluginPfx);
                        if (!d) {
                            return;
                        }
                        return d.overflowed[0] || d.overflowed[1];
                    }
                });
            });
        });
    });
    $(document).ready(function () {
        $('input, textarea').placeholder();
    });
    /*!
    * jQuery UI 1.8.13
    *
    * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
    * Dual licensed under the MIT or GPL Version 2 licenses.
    * http://jquery.org/license
    *
    * http://docs.jquery.com/UI
    */
    (function ($, undefined) {
        $.ui = $.ui || {};if ($.ui.version) {
            return;
        }$.extend($.ui, { version: "1.8.13", keyCode: { ALT: 18, BACKSPACE: 8, CAPS_LOCK: 20, COMMA: 188, COMMAND: 91, COMMAND_LEFT: 91, COMMAND_RIGHT: 93, CONTROL: 17, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, INSERT: 45, LEFT: 37, MENU: 93, NUMPAD_ADD: 107, NUMPAD_DECIMAL: 110, NUMPAD_DIVIDE: 111, NUMPAD_ENTER: 108, NUMPAD_MULTIPLY: 106, NUMPAD_SUBTRACT: 109, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SHIFT: 16, SPACE: 32, TAB: 9, UP: 38, WINDOWS: 91 } });$.fn.extend({ _focus: $.fn.focus, focus: function focus(delay, fn) {
                return typeof delay === "number" ? this.each(function () {
                    var elem = this;setTimeout(function () {
                        $(elem).focus();if (fn) {
                            fn.call(elem);
                        }
                    }, delay);
                }) : this._focus.apply(this, arguments);
            }, scrollParent: function scrollParent() {
                var scrollParent;if ($.browser.msie && /(static|relative)/.test(this.css('position')) || /absolute/.test(this.css('position'))) {
                    scrollParent = this.parents().filter(function () {
                        return (/(relative|absolute|fixed)/.test($.curCSS(this, 'position', 1)) && /(auto|scroll)/.test($.curCSS(this, 'overflow', 1) + $.curCSS(this, 'overflow-y', 1) + $.curCSS(this, 'overflow-x', 1))
                        );
                    }).eq(0);
                } else {
                    scrollParent = this.parents().filter(function () {
                        return (/(auto|scroll)/.test($.curCSS(this, 'overflow', 1) + $.curCSS(this, 'overflow-y', 1) + $.curCSS(this, 'overflow-x', 1))
                        );
                    }).eq(0);
                }return (/fixed/.test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent
                );
            }, zIndex: function zIndex(_zIndex2) {
                if (_zIndex2 !== undefined) {
                    return this.css("zIndex", _zIndex2);
                }if (this.length) {
                    var elem = $(this[0]),
                        position,
                        value;while (elem.length && elem[0] !== document) {
                        position = elem.css("position");if (position === "absolute" || position === "relative" || position === "fixed") {
                            value = parseInt(elem.css("zIndex"), 10);if (!isNaN(value) && value !== 0) {
                                return value;
                            }
                        }elem = elem.parent();
                    }
                }return 0;
            }, disableSelection: function disableSelection() {
                return this.bind(($.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function (event) {
                    event.preventDefault();
                });
            }, enableSelection: function enableSelection() {
                return this.unbind(".ui-disableSelection");
            } });$.each(["Width", "Height"], function (i, name) {
            var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"],
                type = name.toLowerCase(),
                orig = { innerWidth: $.fn.innerWidth, innerHeight: $.fn.innerHeight, outerWidth: $.fn.outerWidth, outerHeight: $.fn.outerHeight };function reduce(elem, size, border, margin) {
                $.each(side, function () {
                    size -= parseFloat($.curCSS(elem, "padding" + this, true)) || 0;if (border) {
                        size -= parseFloat($.curCSS(elem, "border" + this + "Width", true)) || 0;
                    }if (margin) {
                        size -= parseFloat($.curCSS(elem, "margin" + this, true)) || 0;
                    }
                });return size;
            }$.fn["inner" + name] = function (size) {
                if (size === undefined) {
                    return orig["inner" + name].call(this);
                }return this.each(function () {
                    $(this).css(type, reduce(this, size) + "px");
                });
            };$.fn["outer" + name] = function (size, margin) {
                if (typeof size !== "number") {
                    return orig["outer" + name].call(this, size);
                }return this.each(function () {
                    $(this).css(type, reduce(this, size, true, margin) + "px");
                });
            };
        });function _focusable2(element, isTabIndexNotNaN) {
            var nodeName = element.nodeName.toLowerCase();if ("area" === nodeName) {
                var map = element.parentNode,
                    mapName = map.name,
                    img;if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                    return false;
                }img = $("img[usemap=#" + mapName + "]")[0];return !!img && visible(img);
            }return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" == nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
        }function visible(element) {
            return !$(element).parents().andSelf().filter(function () {
                return $.curCSS(this, "visibility") === "hidden" || $.expr.filters.hidden(this);
            }).length;
        }$.extend($.expr[":"], { data: function data(elem, i, match) {
                return !!$.data(elem, match[3]);
            }, focusable: function focusable(element) {
                return _focusable2(element, !isNaN($.attr(element, "tabindex")));
            }, tabbable: function tabbable(element) {
                var tabIndex = $.attr(element, "tabindex"),
                    isTabIndexNaN = isNaN(tabIndex);return (isTabIndexNaN || tabIndex >= 0) && _focusable2(element, !isTabIndexNaN);
            } });$(function () {
            var body = document.body,
                div = body.appendChild(div = document.createElement("div"));$.extend(div.style, { minHeight: "100px", height: "auto", padding: 0, borderWidth: 0 });$.support.minHeight = div.offsetHeight === 100;$.support.selectstart = "onselectstart" in div;body.removeChild(div).style.display = "none";
        });$.extend($.ui, { plugin: { add: function add(module, option, set) {
                    var proto = $.ui[module].prototype;for (var i in set) {
                        proto.plugins[i] = proto.plugins[i] || [];proto.plugins[i].push([option, set[i]]);
                    }
                }, call: function call(instance, name, args) {
                    var set = instance.plugins[name];if (!set || !instance.element[0].parentNode) {
                        return;
                    }for (var i = 0; i < set.length; i++) {
                        if (instance.options[set[i][0]]) {
                            set[i][1].apply(instance.element, args);
                        }
                    }
                } }, contains: function contains(a, b) {
                return document.compareDocumentPosition ? a.compareDocumentPosition(b) & 16 : a !== b && a.contains(b);
            }, hasScroll: function hasScroll(el, a) {
                if ($(el).css("overflow") === "hidden") {
                    return false;
                }var scroll = a && a === "left" ? "scrollLeft" : "scrollTop",
                    has = false;if (el[scroll] > 0) {
                    return true;
                }el[scroll] = 1;has = el[scroll] > 0;el[scroll] = 0;return has;
            }, isOverAxis: function isOverAxis(x, reference, size) {
                return x > reference && x < reference + size;
            }, isOver: function isOver(y, x, top, left, height, width) {
                return $.ui.isOverAxis(y, top, height) && $.ui.isOverAxis(x, left, width);
            } });
    })(jQuery);(function ($, undefined) {
        if ($.cleanData) {
            var _cleanData = $.cleanData;$.cleanData = function (elems) {
                for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                    $(elem).triggerHandler("remove");
                }_cleanData(elems);
            };
        } else {
            var _remove = $.fn.remove;$.fn.remove = function (selector, keepData) {
                return this.each(function () {
                    if (!keepData) {
                        if (!selector || $.filter(selector, [this]).length) {
                            $("*", this).add([this]).each(function () {
                                $(this).triggerHandler("remove");
                            });
                        }
                    }return _remove.call($(this), selector, keepData);
                });
            };
        }$.widget = function (name, base, prototype) {
            var namespace = name.split(".")[0],
                fullName;name = name.split(".")[1];fullName = namespace + "-" + name;if (!prototype) {
                prototype = base;base = $.Widget;
            }$.expr[":"][fullName] = function (elem) {
                return !!$.data(elem, name);
            };$[namespace] = $[namespace] || {};$[namespace][name] = function (options, element) {
                if (arguments.length) {
                    this._createWidget(options, element);
                }
            };var basePrototype = new base();basePrototype.options = $.extend(true, {}, basePrototype.options);$[namespace][name].prototype = $.extend(true, basePrototype, { namespace: namespace, widgetName: name, widgetEventPrefix: $[namespace][name].prototype.widgetEventPrefix || name, widgetBaseClass: fullName }, prototype);$.widget.bridge(name, $[namespace][name]);
        };$.widget.bridge = function (name, object) {
            $.fn[name] = function (options) {
                var isMethodCall = typeof options === "string",
                    args = Array.prototype.slice.call(arguments, 1),
                    returnValue = this;options = !isMethodCall && args.length ? $.extend.apply(null, [true, options].concat(args)) : options;if (isMethodCall && options.charAt(0) === "_") {
                    return returnValue;
                }if (isMethodCall) {
                    this.each(function () {
                        var instance = $.data(this, name),
                            methodValue = instance && $.isFunction(instance[options]) ? instance[options].apply(instance, args) : instance;if (methodValue !== instance && methodValue !== undefined) {
                            returnValue = methodValue;return false;
                        }
                    });
                } else {
                    this.each(function () {
                        var instance = $.data(this, name);if (instance) {
                            instance.option(options || {})._init();
                        } else {
                            $.data(this, name, new object(options, this));
                        }
                    });
                }return returnValue;
            };
        };$.Widget = function (options, element) {
            if (arguments.length) {
                this._createWidget(options, element);
            }
        };$.Widget.prototype = { widgetName: "widget", widgetEventPrefix: "", options: { disabled: false }, _createWidget: function _createWidget(options, element) {
                $.data(element, this.widgetName, this);this.element = $(element);this.options = $.extend(true, {}, this.options, this._getCreateOptions(), options);var self = this;this.element.bind("remove." + this.widgetName, function () {
                    self.destroy();
                });this._create();this._trigger("create");this._init();
            }, _getCreateOptions: function _getCreateOptions() {
                return $.metadata && $.metadata.get(this.element[0])[this.widgetName];
            }, _create: function _create() {}, _init: function _init() {}, destroy: function destroy() {
                this.element.unbind("." + this.widgetName).removeData(this.widgetName);this.widget().unbind("." + this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass + "-disabled " + "ui-state-disabled");
            }, widget: function widget() {
                return this.element;
            }, option: function option(key, value) {
                var options = key;if (arguments.length === 0) {
                    return $.extend({}, this.options);
                }if (typeof key === "string") {
                    if (value === undefined) {
                        return this.options[key];
                    }options = {};options[key] = value;
                }this._setOptions(options);return this;
            }, _setOptions: function _setOptions(options) {
                var self = this;$.each(options, function (key, value) {
                    self._setOption(key, value);
                });return this;
            }, _setOption: function _setOption(key, value) {
                this.options[key] = value;if (key === "disabled") {
                    this.widget()[value ? "addClass" : "removeClass"](this.widgetBaseClass + "-disabled" + " " + "ui-state-disabled").attr("aria-disabled", value);
                }return this;
            }, enable: function enable() {
                return this._setOption("disabled", false);
            }, disable: function disable() {
                return this._setOption("disabled", true);
            }, _trigger: function _trigger(type, event, data) {
                var callback = this.options[type];event = $.Event(event);event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();data = data || {};if (event.originalEvent) {
                    for (var i = $.event.props.length, prop; i;) {
                        prop = $.event.props[--i];event[prop] = event.originalEvent[prop];
                    }
                }this.element.trigger(event, data);return !($.isFunction(callback) && callback.call(this.element[0], event, data) === false || event.isDefaultPrevented());
            } };
    })(jQuery);(function ($, undefined) {
        var mouseHandled = false;$(document).mousedown(function (e) {
            mouseHandled = false;
        });$.widget("ui.mouse", { options: { cancel: ':input,option', distance: 1, delay: 0 }, _mouseInit: function _mouseInit() {
                var self = this;this.element.bind('mousedown.' + this.widgetName, function (event) {
                    return self._mouseDown(event);
                }).bind('click.' + this.widgetName, function (event) {
                    if (true === $.data(event.target, self.widgetName + '.preventClickEvent')) {
                        $.removeData(event.target, self.widgetName + '.preventClickEvent');event.stopImmediatePropagation();return false;
                    }
                });this.started = false;
            }, _mouseDestroy: function _mouseDestroy() {
                this.element.unbind('.' + this.widgetName);
            }, _mouseDown: function _mouseDown(event) {
                if (mouseHandled) {
                    return;
                };this._mouseStarted && this._mouseUp(event);this._mouseDownEvent = event;var self = this,
                    btnIsLeft = event.which == 1,
                    elIsCancel = typeof this.options.cancel == "string" ? $(event.target).parents().add(event.target).filter(this.options.cancel).length : false;if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                    return true;
                }this.mouseDelayMet = !this.options.delay;if (!this.mouseDelayMet) {
                    this._mouseDelayTimer = setTimeout(function () {
                        self.mouseDelayMet = true;
                    }, this.options.delay);
                }if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                    this._mouseStarted = this._mouseStart(event) !== false;if (!this._mouseStarted) {
                        event.preventDefault();return true;
                    }
                }if (true === $.data(event.target, this.widgetName + '.preventClickEvent')) {
                    $.removeData(event.target, this.widgetName + '.preventClickEvent');
                }this._mouseMoveDelegate = function (event) {
                    return self._mouseMove(event);
                };this._mouseUpDelegate = function (event) {
                    return self._mouseUp(event);
                };$(document).bind('mousemove.' + this.widgetName, this._mouseMoveDelegate).bind('mouseup.' + this.widgetName, this._mouseUpDelegate);event.preventDefault();mouseHandled = true;return true;
            }, _mouseMove: function _mouseMove(event) {
                if ($.browser.msie && !(document.documentMode >= 9) && !event.button) {
                    return this._mouseUp(event);
                }if (this._mouseStarted) {
                    this._mouseDrag(event);return event.preventDefault();
                }if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                    this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);
                }return !this._mouseStarted;
            }, _mouseUp: function _mouseUp(event) {
                $(document).unbind('mousemove.' + this.widgetName, this._mouseMoveDelegate).unbind('mouseup.' + this.widgetName, this._mouseUpDelegate);if (this._mouseStarted) {
                    this._mouseStarted = false;if (event.target == this._mouseDownEvent.target) {
                        $.data(event.target, this.widgetName + '.preventClickEvent', true);
                    }this._mouseStop(event);
                }return false;
            }, _mouseDistanceMet: function _mouseDistanceMet(event) {
                return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
            }, _mouseDelayMet: function _mouseDelayMet(event) {
                return this.mouseDelayMet;
            }, _mouseStart: function _mouseStart(event) {}, _mouseDrag: function _mouseDrag(event) {}, _mouseStop: function _mouseStop(event) {}, _mouseCapture: function _mouseCapture(event) {
                return true;
            } });
    })(jQuery);(function ($, undefined) {
        var numPages = 5;$.widget("ui.slider", $.ui.mouse, { widgetEventPrefix: "slide", options: { animate: false, distance: 0, max: 100, min: 0, orientation: "horizontal", range: false, step: 1, value: 0, values: null }, _create: function _create() {
                var self = this,
                    o = this.options,
                    existingHandles = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),
                    handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",
                    handleCount = o.values && o.values.length || 1,
                    handles = [];this._keySliding = false;this._mouseSliding = false;this._animateOff = true;this._handleIndex = null;this._detectOrientation();this._mouseInit();this.element.addClass("ui-slider" + " ui-slider-" + this.orientation + " ui-widget" + " ui-widget-content" + " ui-corner-all" + (o.disabled ? " ui-slider-disabled ui-disabled" : ""));this.range = $([]);if (o.range) {
                    if (o.range === true) {
                        if (!o.values) {
                            o.values = [this._valueMin(), this._valueMin()];
                        }if (o.values.length && o.values.length !== 2) {
                            o.values = [o.values[0], o.values[0]];
                        }
                    }this.range = $("<div></div>").appendTo(this.element).addClass("ui-slider-range" + " ui-widget-header" + (o.range === "min" || o.range === "max" ? " ui-slider-range-" + o.range : ""));
                }for (var i = existingHandles.length; i < handleCount; i += 1) {
                    handles.push(handle);
                }this.handles = existingHandles.add($(handles.join("")).appendTo(self.element));this.handle = this.handles.eq(0);this.handles.add(this.range).filter("a").click(function (event) {
                    event.preventDefault();
                }).hover(function () {
                    if (!o.disabled) {
                        $(this).addClass("ui-state-hover");
                    }
                }, function () {
                    $(this).removeClass("ui-state-hover");
                }).focus(function () {
                    if (!o.disabled) {
                        $(".ui-slider .ui-state-focus").removeClass("ui-state-focus");$(this).addClass("ui-state-focus");
                    } else {
                        $(this).blur();
                    }
                }).blur(function () {
                    $(this).removeClass("ui-state-focus");
                });this.handles.each(function (i) {
                    $(this).data("index.ui-slider-handle", i);
                });this.handles.keydown(function (event) {
                    var ret = true,
                        index = $(this).data("index.ui-slider-handle"),
                        allowed,
                        curVal,
                        newVal,
                        step;if (self.options.disabled) {
                        return;
                    }switch (event.keyCode) {case $.ui.keyCode.HOME:case $.ui.keyCode.END:case $.ui.keyCode.PAGE_UP:case $.ui.keyCode.PAGE_DOWN:case $.ui.keyCode.UP:case $.ui.keyCode.RIGHT:case $.ui.keyCode.DOWN:case $.ui.keyCode.LEFT:
                            ret = false;if (!self._keySliding) {
                                self._keySliding = true;$(this).addClass("ui-state-active");allowed = self._start(event, index);if (allowed === false) {
                                    return;
                                }
                            }break;}step = self.options.step;if (self.options.values && self.options.values.length) {
                        curVal = newVal = self.values(index);
                    } else {
                        curVal = newVal = self.value();
                    }switch (event.keyCode) {case $.ui.keyCode.HOME:
                            newVal = self._valueMin();break;case $.ui.keyCode.END:
                            newVal = self._valueMax();break;case $.ui.keyCode.PAGE_UP:
                            newVal = self._trimAlignValue(curVal + (self._valueMax() - self._valueMin()) / numPages);break;case $.ui.keyCode.PAGE_DOWN:
                            newVal = self._trimAlignValue(curVal - (self._valueMax() - self._valueMin()) / numPages);break;case $.ui.keyCode.UP:case $.ui.keyCode.RIGHT:
                            if (curVal === self._valueMax()) {
                                return;
                            }newVal = self._trimAlignValue(curVal + step);break;case $.ui.keyCode.DOWN:case $.ui.keyCode.LEFT:
                            if (curVal === self._valueMin()) {
                                return;
                            }newVal = self._trimAlignValue(curVal - step);break;}self._slide(event, index, newVal);return ret;
                }).keyup(function (event) {
                    var index = $(this).data("index.ui-slider-handle");if (self._keySliding) {
                        self._keySliding = false;self._stop(event, index);self._change(event, index);$(this).removeClass("ui-state-active");
                    }
                });this._refreshValue();this._animateOff = false;
            }, destroy: function destroy() {
                this.handles.remove();this.range.remove();this.element.removeClass("ui-slider" + " ui-slider-horizontal" + " ui-slider-vertical" + " ui-slider-disabled" + " ui-widget" + " ui-widget-content" + " ui-corner-all").removeData("slider").unbind(".slider");this._mouseDestroy();return this;
            }, _mouseCapture: function _mouseCapture(event) {
                var o = this.options,
                    position,
                    normValue,
                    distance,
                    closestHandle,
                    self,
                    index,
                    allowed,
                    offset,
                    mouseOverHandle;if (o.disabled) {
                    return false;
                }this.elementSize = { width: this.element.outerWidth(), height: this.element.outerHeight() };this.elementOffset = this.element.offset();position = { x: event.pageX, y: event.pageY };normValue = this._normValueFromMouse(position);distance = this._valueMax() - this._valueMin() + 1;self = this;this.handles.each(function (i) {
                    var thisDistance = Math.abs(normValue - self.values(i));if (distance > thisDistance) {
                        distance = thisDistance;closestHandle = $(this);index = i;
                    }
                });if (o.range === true && this.values(1) === o.min) {
                    index += 1;closestHandle = $(this.handles[index]);
                }allowed = this._start(event, index);if (allowed === false) {
                    return false;
                }this._mouseSliding = true;self._handleIndex = index;closestHandle.addClass("ui-state-active").focus();offset = closestHandle.offset();mouseOverHandle = !$(event.target).parents().andSelf().is(".ui-slider-handle");this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : { left: event.pageX - offset.left - closestHandle.width() / 2, top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) - (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) + (parseInt(closestHandle.css("marginTop"), 10) || 0) };if (!this.handles.hasClass("ui-state-hover")) {
                    this._slide(event, index, normValue);
                }this._animateOff = true;return true;
            }, _mouseStart: function _mouseStart(event) {
                return true;
            }, _mouseDrag: function _mouseDrag(event) {
                var position = { x: event.pageX, y: event.pageY },
                    normValue = this._normValueFromMouse(position);this._slide(event, this._handleIndex, normValue);return false;
            }, _mouseStop: function _mouseStop(event) {
                this.handles.removeClass("ui-state-active");this._mouseSliding = false;this._stop(event, this._handleIndex);this._change(event, this._handleIndex);this._handleIndex = null;this._clickOffset = null;this._animateOff = false;return false;
            }, _detectOrientation: function _detectOrientation() {
                this.orientation = this.options.orientation === "vertical" ? "vertical" : "horizontal";
            }, _normValueFromMouse: function _normValueFromMouse(position) {
                var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;if (this.orientation === "horizontal") {
                    pixelTotal = this.elementSize.width;pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);
                } else {
                    pixelTotal = this.elementSize.height;pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);
                }percentMouse = pixelMouse / pixelTotal;if (percentMouse > 1) {
                    percentMouse = 1;
                }if (percentMouse < 0) {
                    percentMouse = 0;
                }if (this.orientation === "vertical") {
                    percentMouse = 1 - percentMouse;
                }valueTotal = this._valueMax() - this._valueMin();valueMouse = this._valueMin() + percentMouse * valueTotal;return this._trimAlignValue(valueMouse);
            }, _start: function _start(event, index) {
                var uiHash = { handle: this.handles[index], value: this.value() };if (this.options.values && this.options.values.length) {
                    uiHash.value = this.values(index);uiHash.values = this.values();
                }return this._trigger("start", event, uiHash);
            }, _slide: function _slide(event, index, newVal) {
                var otherVal, newValues, allowed;if (this.options.values && this.options.values.length) {
                    otherVal = this.values(index ? 0 : 1);if (this.options.values.length === 2 && this.options.range === true && (index === 0 && newVal > otherVal || index === 1 && newVal < otherVal)) {
                        newVal = otherVal;
                    }if (newVal !== this.values(index)) {
                        newValues = this.values();newValues[index] = newVal;allowed = this._trigger("slide", event, { handle: this.handles[index], value: newVal, values: newValues });otherVal = this.values(index ? 0 : 1);if (allowed !== false) {
                            this.values(index, newVal, true);
                        }
                    }
                } else {
                    if (newVal !== this.value()) {
                        allowed = this._trigger("slide", event, { handle: this.handles[index], value: newVal });if (allowed !== false) {
                            this.value(newVal);
                        }
                    }
                }
            }, _stop: function _stop(event, index) {
                var uiHash = { handle: this.handles[index], value: this.value() };if (this.options.values && this.options.values.length) {
                    uiHash.value = this.values(index);uiHash.values = this.values();
                }this._trigger("stop", event, uiHash);
            }, _change: function _change(event, index) {
                if (!this._keySliding && !this._mouseSliding) {
                    var uiHash = { handle: this.handles[index], value: this.value() };if (this.options.values && this.options.values.length) {
                        uiHash.value = this.values(index);uiHash.values = this.values();
                    }this._trigger("change", event, uiHash);
                }
            }, value: function value(newValue) {
                if (arguments.length) {
                    this.options.value = this._trimAlignValue(newValue);this._refreshValue();this._change(null, 0);return;
                }return this._value();
            }, values: function values(index, newValue) {
                var vals, newValues, i;if (arguments.length > 1) {
                    this.options.values[index] = this._trimAlignValue(newValue);this._refreshValue();this._change(null, index);return;
                }if (arguments.length) {
                    if ($.isArray(arguments[0])) {
                        vals = this.options.values;newValues = arguments[0];for (i = 0; i < vals.length; i += 1) {
                            vals[i] = this._trimAlignValue(newValues[i]);this._change(null, i);
                        }this._refreshValue();
                    } else {
                        if (this.options.values && this.options.values.length) {
                            return this._values(index);
                        } else {
                            return this.value();
                        }
                    }
                } else {
                    return this._values();
                }
            }, _setOption: function _setOption(key, value) {
                var i,
                    valsLength = 0;if ($.isArray(this.options.values)) {
                    valsLength = this.options.values.length;
                }$.Widget.prototype._setOption.apply(this, arguments);switch (key) {case "disabled":
                        if (value) {
                            this.handles.filter(".ui-state-focus").blur();this.handles.removeClass("ui-state-hover");this.handles.attr("disabled", "disabled");this.element.addClass("ui-disabled");
                        } else {
                            this.handles.removeAttr("disabled");this.element.removeClass("ui-disabled");
                        }break;case "orientation":
                        this._detectOrientation();this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation);this._refreshValue();break;case "value":
                        this._animateOff = true;this._refreshValue();this._change(null, 0);this._animateOff = false;break;case "values":
                        this._animateOff = true;this._refreshValue();for (i = 0; i < valsLength; i += 1) {
                            this._change(null, i);
                        }this._animateOff = false;break;}
            }, _value: function _value() {
                var val = this.options.value;val = this._trimAlignValue(val);return val;
            }, _values: function _values(index) {
                var val, vals, i;if (arguments.length) {
                    val = this.options.values[index];val = this._trimAlignValue(val);return val;
                } else {
                    vals = this.options.values.slice();for (i = 0; i < vals.length; i += 1) {
                        vals[i] = this._trimAlignValue(vals[i]);
                    }return vals;
                }
            }, _trimAlignValue: function _trimAlignValue(val) {
                if (val <= this._valueMin()) {
                    return this._valueMin();
                }if (val >= this._valueMax()) {
                    return this._valueMax();
                }var step = this.options.step > 0 ? this.options.step : 1,
                    valModStep = (val - this._valueMin()) % step;alignValue = val - valModStep;if (Math.abs(valModStep) * 2 >= step) {
                    alignValue += valModStep > 0 ? step : -step;
                }return parseFloat(alignValue.toFixed(5));
            }, _valueMin: function _valueMin() {
                return this.options.min;
            }, _valueMax: function _valueMax() {
                return this.options.max;
            }, _refreshValue: function _refreshValue() {
                var oRange = this.options.range,
                    o = this.options,
                    self = this,
                    animate = !this._animateOff ? o.animate : false,
                    valPercent,
                    _set = {},
                    lastValPercent,
                    value,
                    valueMin,
                    valueMax;if (this.options.values && this.options.values.length) {
                    this.handles.each(function (i, j) {
                        valPercent = (self.values(i) - self._valueMin()) / (self._valueMax() - self._valueMin()) * 100;_set[self.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";$(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);if (self.options.range === true) {
                            if (self.orientation === "horizontal") {
                                if (i === 0) {
                                    self.range.stop(1, 1)[animate ? "animate" : "css"]({ left: valPercent + "%" }, o.animate);
                                }if (i === 1) {
                                    self.range[animate ? "animate" : "css"]({ width: valPercent - lastValPercent + "%" }, { queue: false, duration: o.animate });
                                }
                            } else {
                                if (i === 0) {
                                    self.range.stop(1, 1)[animate ? "animate" : "css"]({ bottom: valPercent + "%" }, o.animate);
                                }if (i === 1) {
                                    self.range[animate ? "animate" : "css"]({ height: valPercent - lastValPercent + "%" }, { queue: false, duration: o.animate });
                                }
                            }
                        }lastValPercent = valPercent;
                    });
                } else {
                    value = this.value();valueMin = this._valueMin();valueMax = this._valueMax();valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;_set[self.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);if (oRange === "min" && this.orientation === "horizontal") {
                        this.range.stop(1, 1)[animate ? "animate" : "css"]({ width: valPercent + "%" }, o.animate);
                    }if (oRange === "max" && this.orientation === "horizontal") {
                        this.range[animate ? "animate" : "css"]({ width: 100 - valPercent + "%" }, { queue: false, duration: o.animate });
                    }if (oRange === "min" && this.orientation === "vertical") {
                        this.range.stop(1, 1)[animate ? "animate" : "css"]({ height: valPercent + "%" }, o.animate);
                    }if (oRange === "max" && this.orientation === "vertical") {
                        this.range[animate ? "animate" : "css"]({ height: 100 - valPercent + "%" }, { queue: false, duration: o.animate });
                    }
                }
            } });$.extend($.ui.slider, { version: "1.8.13" });
    })(jQuery);
    $(function () {

        if (!window.ymaps) return;

        var map1, map2, mapShops;

        /*Инициализация/перерисовка карт для попапов*/
        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            var href = $(e.target).attr("href");
            if (href == '#tab11' || href == '#tab13') {
                if (!$('ymaps', $(href)).length) ymaps.ready(init);else {
                    map1.container.fitToViewport();
                    map2.container.fitToViewport();
                }
            }
        });

        /*Инициализация карты*/
        if (!$('ymaps').length) {
            ymaps.ready(init);
        }

        /**
         * Создаёт карту
         */
        function init() {

            $.ajax({

                //url: 'json/mapobjects.json',
                url: '/ajax/shops.php',
                method: 'GET',
                dataType: 'json',
                success: function success(json) {

                    var options = [{
                        center: json['center'],
                        zoom: 12,
                        controls: [],
                        behaviors: ['drag', 'scrollZoom']
                    }, {
                        suppressMapOpenBlock: true
                    }];

                    /*
                    Контейнеры для карт:
                    #map1 - Попап выбора магазина
                    #map2 - Попап выбора магазина для заказа
                    #map - Карта магазинов
                    */
                    if ($('#map1').length) {
                        map1 = new ymaps.Map('map1', options[0], options[1]);
                        configureMap(map1);
                    }

                    if ($('#map2').length) {
                        map2 = new ymaps.Map('map2', options[0], options[1]);
                        configureMap(map2, true);
                    }

                    if ($('#map').length) {
                        mapShops = new ymaps.Map('map', options[0], options[1]);
                        mapShops.behaviors.disable("scrollZoom");
                        /*Кастомный ползунок зума*/
                        mapShops.controls.add(new ymaps.control.ZoomControl({ options: { position: { right: 20, top: 180 } } }));
                        configureMap(mapShops);
                    }

                    /*Кастомный скроллбар для карты магазинов*/
                    $('.b-shops__container').mCustomScrollbar({
                        theme: "olimp",
                        scrollInertia: 100,
                        scrollAmount: 100
                    });

                    /**
                     * Настраивает карту
                     * @param {object}  map   Объект карты
                     * @param {boolean} stock Отсутствие товара на складе
                     */
                    function configureMap(map, stock) {
                        if (json['cities'].length > 0) {

                            var html = '';

                            var BalloonContentLayout = ymaps.templateLayoutFactory.createClass('<div class="b-mapballoon">' + '<div class="b-mapballoon__name">{{properties.name}}</div>' + '<div class="b-mapballoon__info">{{properties.address}}<br />' + '{{properties.telephone}}<br />' + '{{properties.worktime}}</div>' + '</div>');

                            for (var i = 0; i < json['cities'].length; i++) {

                                html += '<h3 class="b-shops__city">' + json['cities'][i]['name'] + '</h3>';

                                for (var j = 0; j < json['cities'][i]['shops'].length; j++) {

                                    var shop = json['cities'][i]['shops'][j];
                                    var address = shop['address'] ? shop['address'] : " ";
                                    var telephone = shop['telephone'] ? shop['telephone'] : " ";
                                    var worktime = shop['worktime'] ? shop['worktime'] : " ";

                                    html += '<div class="b-shops__shop">\
                                <a href="javascript: void(0);" id="shop_id' + shop['id'] + '" class="b-shops__name">' + shop['name'] + '</a>\
                                <div class="b-shops__address">' + address + '</div>\
                                <div class="b-shops__telephone">' + telephone + '</div>\
                                <div class="b-shops__worktime">' + worktime + '</div>\
                                </div>';

                                    var markerPath;
                                    if (stock && !shop.available) markerPath = 'http://olimp.greensight.ru/html/build/img/map_placemark_not_available.png';else markerPath = 'http://olimp.greensight.ru/html/build/img/map_placemark.png';

                                    var myPlacemark = new ymaps.Placemark([shop['coordinates'][0], shop['coordinates'][1]], {
                                        city: json['cities'][i]['name'],
                                        name: shop['name'],
                                        address: shop['address'],
                                        telephone: shop['telephone'],
                                        worktime: shop['worktime']
                                    }, {
                                        balloonContentLayout: BalloonContentLayout,
                                        balloonPanelMaxMapArea: 0,
                                        iconLayout: 'default#image',
                                        iconImageHref: markerPath,
                                        iconImageSize: [32, 46],
                                        iconImageOffset: [-3, -42]
                                    });

                                    $('.b-shops__container').append(html);
                                    html = '';

                                    $('#shop_id' + shop['id']).attr('data-coord_1', shop['coordinates'][1]);
                                    $('#shop_id' + shop['id']).attr('data-coord_0', shop['coordinates'][0]);

                                    map.geoObjects.add(myPlacemark);
                                }
                            }

                            /*Центрирование на магазине при клике по имени (для shops.html)*/
                            $('.b-shops__name').on('click', function () {
                                map.setCenter([$(this).attr('data-coord_0'), $(this).attr('data-coord_1')], 14, {
                                    'duration': 600,
                                    'checkZoomRange': true
                                });
                            });
                        }

                        /*Сразу переходим к выбранному магазину на странице магазинов (для shops.html)*/
                        var city = $(".dk-select-options .dk-option-selected").text();
                        $('.b-shops__city:contains(' + city + ')').next().find("a").click();
                    }
                }
            });
        }
    });
    function setAttr(new_params, hash) {
        var res = '';
        var d = location.href.split("#")[0].split("?");
        var base = d[0];
        var query = d[1];
        if (query) {
            var params = query.split("&");
            for (var i = 0; i < params.length; i++) {
                var keyval = params[i].split("=");
                //if(keyval[0] != prmName) {
                if (keyval[0] in new_params == false) {
                    res += params[i] + '&';
                }
            }
        }
        $.each(new_params, function (prmName, val) {
            res += prmName + '=' + val + '&';
        });

        window.location.href = base + '?' + res + hash;
        return false;
    }

    $('.js-product_count').change(function () {

        var params = {
            'productCount': $(this).val()
        };

        setAttr(params, '');
    });
    /**
     * Открытие и закрытие попапов и модальных окон
     *
     * Использование:
     * <a href="#popupId" data-popup="open">Text</a>
     *
     * <div id="popupId" style="display: none;">Popup content</div>
     *
     * Закроет все попапы и модальные окна
     * <button type="button" data-popup="close">Text</button>
     */
    (function () {
        var settings = {
            padding: 0,
            margin: [10, 27, 10, 10],
            transitionIn: 'none',
            transitionOut: 'none',
            speedIn: 600,
            speedOut: 200,
            overlayShow: true,
            helpers: {
                title: null,
                overlay: {
                    showEarly: false,
                    locked: true,
                    autoCenter: false,
                    css: { 'background': 'rgba(0, 0, 0, .5)' }
                }
            },
            afterShow: function afterShow() {
                $('.fancybox-wrap').has('.b-popup-sign-up').css('max-width', '700px');

                $('.fancybox-wrap').has('.b-popup-avaiable').css('max-width', '900px');

                var img = $('.tab-carousel-indicator__carousel-inner .item.active img');
                $('.fancybox-wrap').has('.b-popup-product').css('max-width', img.attr('width') + 'px');

                /*Решение бага с перемещением fancybox-wrap из fancybox-overlay при открытии вложенных попапов*/
                $('html').addClass('fancybox-margin fancybox-lock');
                $('.fancybox-overlay').append($('.fancybox-wrap'));
            },
            afterClose: function afterClose() {
                if ($('#tab10').length) $('a[href="#tab10"]').tab('show');
                if ($('#tab12').length) $('a[href="#tab12"]').tab('show');
            }
        };

        if ($('[data-popup="open"]').length) {
            $('[data-popup="open"]').fancybox(settings);
            $('a[href="#popup-product"]').click(function () {
                var img = $('.tab-carousel-indicator__carousel-inner .item.active img');
                var src = img.attr('src');
                $('#popup-product #product-detail-image').attr('src', src);
            });
        }

        if ($('[data-popup="close"]').length) {
            $('[data-popup="close"]').on('click', function () {
                $.fancybox.close();
            });
        }
    })();

    $(document).ready(function () {
        $('.b-cart__goods-arrowmin').click(function () {
            var $input = $(this).parent().find('input');
            var count = parseInt($input.val()) - 1;
            count = count < 1 ? 1 : count;
            $input.val(count);
            $input.change();
            return false;
        });
        $('.b-cart__goods-arrowplus').click(function () {
            var $input = $(this).parent().find('input');
            $input.val(parseInt($input.val()) + 1);
            $input.change();
            return false;
        });
    });
    $(".b-tab-available__choice_by_user").children("input").change(function () {
        if ($("#radio22").prop("checked")) {
            $(".b-tab-available__shop-block").show();
            $(".b-tab-available__not-available").show();
            $('.b-tab-available__shop-adress').show();
            $(".b-tab-available__in-stock").show();
            $(".js-empty-stores").hide();
        } else {
            $(".b-tab-available__not-available").each(function () {
                if ($(this).siblings('.b-tab-available__in-stock').length == 0) $(this).parents(".b-tab-available__shop-block").hide();
                $(this).hide().next('.b-tab-available__shop-adress').hide();
            });
            if ($(".b-tab-available__in-stock").length == 0) $(".js-empty-stores").show();
        }
    });

    $(".b-product-info__size-link").on("click", function () {
        if ($(this).hasClass("b-product-info__size-link--no-size") || $(this).hasClass("b-product-info__size-link--active")) {
            return false;
        } else {
            var val = $(this).attr("title");
            $(".b-product-info__size-link").removeClass("b-product-info__size-link--active");
            $(this).addClass("b-product-info__size-link--active");

            var id = $(this).attr("data-id-offer");
            var price_type_id = $("#price_type_id").text();

            $.ajax({
                type: 'POST',
                url: '/ajax/catalog.element_main.php',
                data: { 'id': id, "price_type_id": price_type_id },
                success: function success(data) {
                    $(".b-product-info__price").html(data);
                }
            });

            $.ajax({
                type: 'POST',
                url: '/ajax/store_amount.php',
                data: { 'id': id },
                success: function success(data) {
                    var obj = jQuery.parseJSON(data);
                    $("[data-store]").each(function () {
                        var store = $(this).attr("data-store");
                        if (store) $(this).replaceWith(obj[store]);
                    });

                    $(".b-product-info__extra-link").text($(".b-tab-available__in-stock").length + " магазинах");
                    var text = $(".b-tab-available__in-stock").length == 0 ? "наличие" : "наличие (" + $(".b-tab-available__in-stock").length + ")";
                    $("a[href = '#tab4']").text(text);
                    if ($("#radio2").prop("checked")) {
                        $(".b-tab-available__not-available").each(function () {
                            if ($(this).siblings('.b-tab-available__in-stock').length == 0) $(this).parents(".b-tab-available__shop-block").hide();
                            $(this).hide().next('.b-tab-available__shop-adress').hide();
                        });
                        $(".b-tab-available__in-stock").each(function () {
                            $(this).next('.b-tab-available__shop-adress').show();
                            $(this).parents(".b-tab-available__shop-block").show();
                        });
                        if ($(".b-tab-available__in-stock").length == 0) $(".js-empty-stores").show();
                    } else {
                        $(".b-tab-available__shop-block").show();
                        $(".b-tab-available__not-available").show();
                        $('.b-tab-available__shop-adress').show();
                        $(".js-empty-stores").hide();
                    }
                }
            });

            $.ajax({
                type: "POST",
                url: "/ajax/catalog.element_favorite.php",
                data: { "id": +id, "action": "check", "price_code": $(".b-link__add-favorites").attr('data-price_code') },
                success: function success(data) {
                    $(".b-link__add-favorites.b-link__add-favorites--button").replaceWith(data);
                    addToFavorites();
                }
            });
        }
    });

    var Share = {

        vkontakte: function vkontakte(purl, ptitle, pimg, text) {
            url = 'http://vkontakte.ru/share.php?';
            url += 'url=' + encodeURIComponent(purl);
            url += '&title=' + encodeURIComponent(ptitle);
            url += '&description=' + encodeURIComponent(text);
            url += '&image=' + encodeURIComponent(pimg);
            url += '&noparse=true';
            Share.popup(url);
        },

        odnoklassniki: function odnoklassniki(purl, text) {
            url = 'http://www.odnoklassniki.ru/dk?st.cmd=addShare&st.s=1';
            url += '&st.comments=' + encodeURIComponent(text);
            url += '&st._surl=' + encodeURIComponent(purl);
            Share.popup(url);
        },

        facebook: function facebook(purl, ptitle, pimg, text) {
            url = 'http://www.facebook.com/sharer.php?s=100';
            url += '&p[title]=' + encodeURIComponent(ptitle);
            url += '&p[summary]=' + encodeURIComponent(text);
            url += '&p[url]=' + encodeURIComponent(purl);
            url += '&p[images][0]=' + encodeURIComponent(pimg);
            Share.popup(url);
        },

        twitter: function twitter(purl, ptitle) {
            url = 'http://twitter.com/share?';
            url += 'text=' + encodeURIComponent(ptitle);
            url += '&url=' + encodeURIComponent(purl);
            url += '&counturl=' + encodeURIComponent(purl);
            Share.popup(url);
        },

        me: function me(el) {
            Share.popup(el.href);
            return false;
        },

        popup: function popup(url) {
            var myWin = window.open(url, '', 'toolbar=0,status=0,width=626,height=436');
            setTimeout(function () {
                if (myWin.closed) {
                    $.get(location.href, { ajax: "Y" }, function (data) {
                        $('.b-product-info__favorite').empty().html(data);
                    });
                } else setTimeout(arguments.callee, 10);
            }, 10);
        }
    };

    function addResponse() {
        $(".b-popup-feedback__input-popup--feedback.btn.b-btn__default[data-type = response_add]").on("click", function () {
            var url = "/ajax/product_responses.php";
            var text = $("#text-contact").val();
            var vote = $('input:radio[name=rating-input-1]:checked').attr("data-vote");
            var product = $("#parent_product_id").text();
            if (text != "") {
                $.ajax({
                    type: "POST",
                    url: url,
                    data: { "text": text, "vote": vote, "product": product },
                    success: function success(data) {
                        $(data).insertAfter(".b-tab-review__add-review").promise().done(function () {
                            updateRating();
                            update_response_text();
                            $('input:radio[name=rating-input-1]:checked').attr("checked", false);
                        });
                        $(".close.b-popup__close").click();
                        $("#text-contact").val("");
                    }
                });
            }
        });
    }
    addResponse();

    function updateRating() {
        var summ = 2 * $(".b-tab-review__star_by_user").length;
        var count = $(".b-tab-review__user-list").length;

        var star = summ / count;
        var intStar = star / 2 >> 0;
        var halfstar = star % 2 != 0 ? true : false;
        var i = 0;
        var data = "";
        while (i != 5) {
            if (intStar > i) {
                data += '<li class="b-tab-review__star"></li>';
            } else if (halfstar && intStar == i) {
                data += '<li class="b-tab-review__star--halfstar"></li>';
            } else {
                data += '<li class="b-tab-review__star--nostar"></li>';
            }
            i++;
        }

        $(".b-tab-review__star-rating").html(data);
    }

    function update_response_text() {
        var count = $(".b-tab-review__user-list").length;
        var text = count != 0 ? "Отзывы (" + count + ")" : "Отзывы";
        $(".b-tab__nav--link.tx-dec_no[href = '#tab3']").text(text);
    }
    $(document).ready(function () {
        if ($(".js-range-slider").length) {
            $(".js-range-slider").slider({
                range: true,
                min: 0,
                max: 459,
                step: 100,
                animate: true,
                values: [0, 459],
                create: function create(event, ui) {
                    $(this).find("span:first").addClass("first-a");
                    $(this).find("span:last").addClass("last-a");
                    $(".js-range-min-cost").val(0);
                    $(".js-range-max-cost").val(459);
                },
                slide: function slide(event, ui) {
                    if ($(ui.handle).hasClass("first-a")) {
                        $(".js-range-min-cost").val(ui.value + ' руб.').attr('value', ui.value);
                    }
                    if ($(ui.handle).hasClass("last-a")) {
                        $(".js-range-max-cost").val(ui.value + ' руб.').attr('value', ui.value);
                    }
                }
            });
        }
    });
    //code
    function updatePaginationUrl() {

        $(".b-pagination__pagelink").each(function () {
            var curParams = window.location.href.slice(window.location.href.indexOf('?') + 1).replace('&&', '&').split('&');
            curParams.forEach(function (val, i) {
                if (val.indexOf('PAGEN_') != -1) curParams.splice(i, 1);
            });
            var reg4 = /(\?)/g;
            var href = window.location.href;
            var check = href.match(reg4);
            if (check) {
                $(this).attr('href').split('?')[1].split('&').forEach(function (val, i) {
                    if (val.indexOf('PAGEN_') != -1) curParams.push(val);
                });
                var url = "?" + curParams.join('&');
                $(this).attr("href", url.replace('&&', '&'));
            }
        });
    }

    function updatePageNavString() {
        var range = 2;
        var last = $(".b-pagination__pagelink:last").text(); //($(".b-pagination__pagelink:last").text() < $(".b-pagination__page--active").text()) ? $(".b-pagination__page--active").text() : $(".b-pagination__pagelink:last").text();
        $(".b-pagination__page--shorten").remove();
        $(".b-pagination__pagelink").each(function () {
            var value = $(this).text();
            var diff = $(".b-pagination__page--active").text() - value;
            if (Math.abs(diff) > range && value != 1 && value != last) $(this).parent().hide();else $(this).parent().show();

            if (Math.abs(diff) == range && value > range && value <= last - range) {
                if (diff < 0) $(this).parent().after('<li class="b-pagination__page--shorten"><span class="b-pagination__link" href="#" title="">...</span></li>');else $(this).parent().before('<li class="b-pagination__page--shorten"><span class="b-pagination__link" href="#" title="">...</span></li>');
            }

            if (parseInt($(".b-pagination__pagelink:last").text()) < parseInt($(".b-pagination__page--active").text()) && value == parseInt($(".b-pagination__page--active").text()) - range && parseInt($(".b-pagination__page--active").text()) > 4) $(this).parent().before('<li class="b-pagination__page--shorten"><span class="b-pagination__link" href="#" title="">...</span></li>');
        });
    }

    $('.b-link__show-more').on('click', function () {

        var dataForAjax = {
            'category_id': $(this).attr('data-category_id'),
            'current_page': $(this).attr('data-current_page'),
            'product_count': $(this).attr('data-product_count'),
            'sort_field': $(this).attr('data-sort_field'),
            'sort_order': $(this).attr('data-sort_order'),
            'filter': $(this).attr('data-filter')
        };
        var main = 0;
        if ($(this).attr('data-main') == 1) {
            main = 1;
            var main_type = $(this).attr('data-main-type');
        }
        $.ajax({
            url: '/ajax/load_more.php',
            data: dataForAjax,
            method: 'GET',
            dataType: 'json',
            success: function success(json) {
                var html = '';
                var current_type = $('.b-catalog-type__link--active');

                $.each(json['products'], function (i, val) {

                    if (current_type.hasClass('b-catalog-type__link--tile') || main == 1) html += catalog_tile_template(json['products'][i]);else if (current_type.hasClass('b-catalog-type__link--imagelist')) html += catalog_imagelist_template(json['products'][i]);else if (current_type.hasClass('b-catalog-type__link--list')) html += catalog_list_template(json['products'][i]);
                });

                if (main != 1) {
                    if (current_type.hasClass('b-catalog-type__link--tile') || main == 1) $('.b-product__list').append(html);else $('.b-catalog-photo__list').append(html);

                    $('.b-link__show-more').attr('data-current_page', json['page']);
                } else {
                    $('.b-product__list.' + main_type).append(html);

                    if (json['more'] == '0') {
                        $('.b-products__showmore.' + main_type).hide();
                    }

                    $('.b-products__showmore.' + main_type + ' .b-link__show-more').attr('data-current_page', json['page']);
                }

                if (main != 1) {
                    var old_page = $(".b-pagination__page--active").text();
                    $(".b-pagination__page--active").replaceWith('<li class="b-pagination__page"><a class="b-pagination__pagelink" href="' + window.location.href.slice(0, window.location.href.indexOf('\?')) + '?PAGEN_2=' + old_page + '">' + old_page + '</a></li>');
                    $('.b-pagination__pagelink:contains("' + json['page'] + '")').parents(".b-pagination__page").replaceWith('<li class="b-pagination__page b-pagination__page--active">' + json['page'] + '</li>');

                    if (parseInt($(".b-pagination__pagelink:last").text()) < parseInt($(".b-pagination__page--active").text())) {
                        $(".b-pagination__next").parent().html("");
                        $(".b-products__showmore").hide();
                    }

                    if ($(".b-pagination__page--active").text() != "1") {
                        var intNav = parseInt(json['page']) - 1;
                        $(".b-pagination__page:first").html('<a class="b-pagination__prev" href="' + window.location.href.slice(0, window.location.href.indexOf('\?')) + '?PAGEN_2=' + intNav + '"></a>');
                    }

                    var reg4 = /(\d+)/g;
                    var old_text = $(".b-pagination__showed").text();
                    var text_param = old_text.match(reg4);

                    var length = current_type.hasClass('b-catalog-type__link--tile') ? $(".b-product__item").length : $(".b-catalog-photo__item").length;

                    text_param[1] = parseInt(text_param[0]) + length - 1;
                    var new_text = text_param[0] + " - " + text_param[1] + " из " + text_param[2];
                    $(".b-pagination__showed").text(new_text);

                    updatePageNavString();
                    updatePaginationUrl();
                }
            }
        });
    });
    // updatePageNavString();
    // updatePaginationUrl();
    $(document).ready(function () {
        var MaxSlides, MinSlides;

        MinSlides = 1;
        MaxSlides = 6;

        //  320 960 1280 1560 
        if ($(window).width() >= 1590) {
            MaxSlides = 9;
            //alert(1);
        } else if ($(window).width() >= 1280) {
            MaxSlides = 7;
            //alert(2);
        } else if ($(window).width() >= 960) {
            MaxSlides = 4;
            //alert(3);
        } else if ($(window).width() >= 320) {
            MaxSlides = 4;
            //alert(4);
        }

        $('.b-brand-carousel__list').bxSlider({
            nextText: '<div class="b-btn__arrow b-btn__arrow--right b-btn-arrow-right"></div>',
            prevText: '<div class="b-btn__arrow b-btn__arrow--left b-btn-arrow-left"></div>',
            pager: false,
            adaptiveHeight: false,
            responsive: false,
            minSlides: MinSlides,
            moveSlides: 1,
            maxSlides: MaxSlides,
            slideWidth: 80,
            slideMargin: 30
        });
    });

    if ($('.bxslider-tab').length > 0) {
        if ($('.tab-carousel-indicator--desctop li').length > 3) var infiniteLoop = true;else var infiniteLoop = false;

        var product_slider_desctop = $('.js-picture-slider-desctop').bxSlider({
            mode: 'vertical',
            moveSlides: 1,
            minSlides: 4,
            maxSlides: 10,
            slideWidth: 100,
            slideMargin: 5,
            pager: false,
            infiniteLoop: infiniteLoop
        });
        var product_slider_mobile = $('.js-picture-slider-mobile').bxSlider({
            mode: 'horizontal',
            moveSlides: 1,
            minSlides: 4,
            maxSlides: 10,
            slideWidth: 100,
            slideMargin: 10,
            pager: false,
            infiniteLoop: infiniteLoop
        });
    }
    $(document).ready(function () {
        $("#tab-carousel-product").carousel({
            interval: false
        });
    });
    $(document).ready(function () {
        $('.slider-product-recent').bxSlider({
            prevText: '<div class="b-btn__arrow b-btn__arrow--left b-btn-arrow-left"></div>',
            nextText: '<div class="b-btn__arrow b-btn__arrow--right b-btn-arrow-right"></div>',
            pager: false,
            minSlides: 2,
            moveSlides: 0,
            maxSlides: 80,
            slideWidth: 190,
            slideMargin: 16
        });
        if ($(window).width() >= 1600 && $('.b-goods__item--recent').length > 7) {
            $(".b-goods__recent").addClass("b-goods__recent--arrow");
        }
        if ($(window).width() < 1600 && $('.b-goods__item--recent').length > 7) {
            $(".b-goods__recent").addClass("b-goods__recent--arrow");
        }
        if ($(window).width() < 1400 && $('.b-goods__item--recent').length > 6) {
            $(".b-goods__recent").addClass("b-goods__recent--arrow");
        }
        if ($(window).width() < 1280 && $('.b-goods__item--recent').length > 4) {
            $(".b-goods__recent").addClass("b-goods__recent--arrow");
        }
        if ($(window).width() < 960 && $('.b-goods__item--recent').length > 4) {
            $(".b-goods__recent").addClass("b-goods__recent--arrow");
        }
    });
    $(document).ready(function () {
        $('.slider-product-recommended').bxSlider({
            prevText: '<div class="b-btn__arrow b-btn__arrow--left b-btn-arrow-left"></div>',
            nextText: '<div class="b-btn__arrow b-btn__arrow--right b-btn-arrow-right"></div>',
            pager: false,
            minSlides: 1,
            moveSlides: 1,
            maxSlides: 8,
            slideWidth: 180,
            slideMargin: 16
        });
    });
    $(document).ready(function () {
        $('.slider-product-similar').bxSlider({
            prevText: '<div class="b-btn__arrow b-btn__arrow--left b-btn-arrow-left"></div>',
            nextText: '<div class="b-btn__arrow b-btn__arrow--right b-btn-arrow-right"></div>',
            pager: false,
            minSlides: 1,
            moveSlides: 1,
            maxSlides: 4,
            slideWidth: 295
        });
        if ($(window).width() >= 1600 && $('.b-goods__item--similar').length > 4) {
            $(".b-goods__similar").addClass("b-goods__similar--arrow");
        }
        if ($(window).width() < 1600 && $('.b-goods__item--similar').length > 3) {
            $(".b-goods__similar").addClass("b-goods__similar--arrow");
        }
        if ($(window).width() < 1280 && $('.b-goods__item--similar').length > 3) {
            $(".b-goods__similar").addClass("b-goods__similar--arrow");
        }
    });
    $('.js-products-sort').change(function () {
        window.location = '?sort=' + $(this).val();
    });
    var orderdirection = new Array();
    function is_num(text, flag) {
        if (flag == 0) {
            return text;
        } else {
            return parseFloat(text);
        }
    }
    function oi_div_order(selector, container, block, flag) {
        block = container + ' ' + block;
        var ordered_dives = $(block).sort(function (a, b) {
            a = $(a).find('[data-name=' + selector + ']').text();
            b = $(b).find('[data-name=' + selector + ']').text();
            if (orderdirection[selector] == undefined || orderdirection[selector] == 0) {
                return is_num(a, flag) > is_num(b, flag) ? 1 : is_num(a, flag) < is_num(b, flag) ? -1 : 0;
            } else {
                return is_num(a, flag) < is_num(b, flag) ? 1 : is_num(a, flag) > is_num(b, flag) ? -1 : 0;
            }
        });
        $(container).html(ordered_dives);

        if (orderdirection[selector] == undefined || orderdirection[selector] == 0) {
            orderdirection[selector] = 1;
            $('[data-orderby=' + selector + ']').addClass('up');
        } else {
            orderdirection[selector] = 0;
            $('[data-orderby=' + selector + ']').removeClass('up');
        }
    }
    $('[data-orderby]').on('click', function () {
        var orderby = $(this).data('orderby');
        switch (orderby) {
            case 'number':
                flag = 1;break;
            default:
                flag = 0;
        }
        oi_div_order(orderby, '.b-my-orders__list', '.js-my-orders__sort--row', flag);
    });
    $(document).ready(function () {
        $('.yourclass').bxSlider({
            nextText: '<div class="b-btn__arrow b-btn__arrow--left b-btn-arrow-left"></div>',
            prevText: '<div class="b-btn__arrow b-btn__arrow--right b-btn-arrow-right"></div>',
            pager: false,
            slideWidth: 500,
            minSlides: 2,
            moveSlides: 2,
            slideMargin: 20
        });
    });
    /**
     * Реализует переключение вкладок
     * 
     * @param  {Object} options
     *
     * Использование:
     * $('.tabs').tabSwitcher();
     *
     * Callback отрабатывает после переключения вкладки
     * @elem вкладка, на которую переключились
     * $('.tabs').tabSwitcher({
     *     afterSwitch: function(elem) {
     *         console.log(elem);
     *     }
     * });
     */
    $.fn.tabSwitcher = function (options) {
        var self = this;

        var optionsCustom = {
            // callback functions
            afterSwitch: options && $.isFunction(options.afterSwitch) ? options.afterSwitch : function () {}
        };

        this.each(function () {
            $(this).on('click', '[data-tabs-target="true"]', onTabClick);
        });

        function onTabClick() {
            self.switchTab($(this));
            return false;
        }

        this.switchTab = function (elem) {
            // switching tab
            var selfId = elem.closest(self).prop('id'),
                contentId = elem.closest(self).data('tabs-cnt'),
                contentItemId = elem.data('tabs-item');

            $('#' + selfId).find('[data-tabs-target="true"]').removeClass('active');
            elem.addClass('active');

            $(contentId).find($(contentItemId)).siblings().removeClass('active').end().addClass('active');

            optionsCustom.afterSwitch(elem);
        };
    };
    $('body').on('mouseover', 'a[data-tooltip]', function () {

        if ($('.b-tooltip').length > 0) return;
        $(this).append('<span class="b-tooltip">' + $(this).attr('title') + '</span>');

        $(this).on('mouseout', function () {

            $('.b-tooltip').remove();
        });
    });
    $(document).ready(function () {

        var validation = new Validation_MOD();
        //Так переопределяется стиль вывода ошибок, где вместо %ERROR%
        validation.patternErrorText = '<div class="error-message">%ERROR%</div>';
        //Так переопределение режим вставки этого стиля, after-до элемента который вернулся из поисковой функции
        //before - до этого элемента, append - добавить внутрь, replace - заменить * осторожнее с этим методом
        validation.modeError = 'after';
        //И класс ошибки
        validation.errorClass = 'error';
        //переопределение поисковой функции для текста/ Она принимет input и должна вернуть элемент который в
        // дальнейшем используется с режимом вставки modeError
        validation.elementErrorText = function ($input) {
            return $input;
            //Это поведение по умолчанию, так что в принципе и функция такая не нужна,
            //но как пример вот, так как нам нужно вставить текст ошибки после инпута,
            //то мы сразу его и возвращаем, и для этого мы выставили modeError в значение after
        };
        //Похожая функция, но для поиска элемента к которому припишется класс
        validation.elementErrorClass = function ($input) {
            return $input.closest('.form-row');
        };

        //Тексты ошибок переопределяются так(если все разом, именно все разом)
        validation.lang = {
            email: 'Введите корректный E-mail',
            req: 'Поле обязательно для заполнения',
            min: 'Слишком короткое значение',
            max: 'Слишком длинное значение',
            pattern: 'Введите корректное значение',
            phone: 'Введите корректный телефон',
            geooff: 'Вы запретили определять ваше местоположение',
            compare: 'Значения не совпадают',
            date: 'Введите дату в формате dd.mm.yyyy'
        };
        //или так если по одному
        //validation.lang.email = 'Текст';

        //Есть типы проверки которые записываются в data-rules и разделяются точкой с запятой
        //Ошибки выводятся по порядку важности, самые первые покажатся первыми
        //пример data-rules="email;req;min=4;max=10;pattern=^[a-zA-Z0-9_]+$;phone";

        // Пример если нужен тип паттерна ^[a-zA-Z0-9_]+$  ,
        // главное чтобы точек с запятой не было и знаков равно(это нужно доработать)


        validation.keyup($('.js-validation-change'));
        validation.form_submit($('.js-validation-change').parents('form'), $('.js-validation-change'));
    });
    /**
     * Скрывает элемент hiddenElem при клике за пределами элемента targetElem
     * 
     * @param  {Element} targetElem
     * @param  {Element} hiddenElem
     * @param  {Function} [optionalCb] отрабатывает сразу не дожидаясь завершения анимации
     */
    function onOutsideClickHide(targetElem, hiddenElem, optionalCb) {
        $(document).bind('mouseup touchend', function (e) {
            if (!targetElem.is(e.target) && $(e.target).closest(targetElem).length == 0) {
                hiddenElem.stop(true, true).fadeOut(global.animationTime);
                if (optionalCb) {
                    optionalCb();
                }
            }
        });
    }

    /**
     * Хэлпер для показа, скрытия или чередования видимости элементов
     *
     * Использование:
     * <button type="button" data-visibility="show" data-show="#elemId1"></button>
     *
     * или
     * <button type="button" data-visibility="hide" data-hide="#elemId2"></button>
     *
     * или
     * <button type="button" data-visibility="toggle" data-toggle="#elemId3"></button>
     * 
     * или
     * <button type="button" data-visibility="show" data-show="#elemId1|#elemId3"></button>
     * 
     * <div id="elemId1" style="display: none;">Text</div>
     * <div id="elemId2">Text</div>
     * <div id="elemId3" style="display: none;">Text</div>
     */
    function visibilityControl() {
        var settings = {
            types: ['show', 'hide', 'toggle']
        };

        if ($('[data-visibility]').length > 0) {
            var visibilityCaller;

            (function () {

                /**
                 * Устанавливает видимость
                 * @param {String} visibilityType тип отображения
                 * @param {Array} list массив элементов, с которым работаем
                 */
                var setVisibility = function setVisibility(visibilityType, list) {
                    for (var i = 0; i < list.length; i++) {
                        if (visibilityType == settings.types[0]) {
                            $(list[i]).fadeIn(global.animationTime);
                        }

                        if (visibilityType == settings.types[1]) {
                            $(list[i]).fadeOut(global.animationTime);
                        }

                        if (visibilityType == settings.types[2]) {
                            if ($(list[i]).is(':visible')) {
                                $(list[i]).fadeOut(global.animationTime);
                            } else {
                                $(list[i]).fadeIn(global.animationTime);
                            }
                        }
                    }
                };

                visibilityCaller = $('[data-visibility]');


                visibilityCaller.on('click', function () {
                    for (var i = 0; i < settings.types.length; i++) {
                        if ($(this).data(settings.types[i])) {
                            var visibilityList = $(this).data(settings.types[i]).split('|');
                            setVisibility(settings.types[i], visibilityList);
                        }
                    }

                    return false;
                });
            })();
        }
    }

    if ($(window).width() < 960) {
        if ($('.b-product-info--mobile').length <= 0) {
            $('.b-product-info__compare').find('.b-checkbox__item--product').addClass('b-checkbox__item--mobile');
            var compare = $('.b-product-info__compare');

            $('.b-product-main').removeClass('b-product-main').addClass('b-product-info').addClass('b-product-info--mobile').prepend($('.b-product-info__extra')).prepend($('.b-product-info__favorite')).prepend($('.b-product-info__bonus')).prepend($('.b-product-info__form')).prepend($('#tab-carousel-product').addClass('carousel-product-mobile')).prepend($('.b-product-info__head'));

            $('.b-product-info__form form').prepend($('.b-product-info__price').addClass('b-product-info__price--mobile').append(compare));

            $('.b-product-info--mobile').siblings('.b-product-info').remove();
            //$('.b-product-info>.b-product-info__head').detach().prependTo('.b-product-main');
        }
    } else {
        if ($('.b-product-info--mobile').length > 0) {
            $('.b-product-info__compare').find('.b-checkbox__item--product').removeClass('b-checkbox__item--mobile');
            var compare = $('.b-product-info__compare');
            $('.b-product-info__action').prepend(compare);
            $('.b-product-info--mobile').removeClass('b-product-info').removeClass('b-product-info--mobile').addClass('b-product-main');
            $('#tab-carousel-product').removeClass('carousel-product-mobile');
            $('.b-product-main').after('<div class="b-product-info"></div>');

            $('.b-product-info').append($('.b-product-info__head')).append($('.b-product-info__form')).append($('.b-product-info__bonus')).append($('.b-product-info__favorite')).append($('.b-product-info__extra'));

            $('.b-product-info__form form').append($('.b-product-info__price').removeClass('b-product-info__price--mobile'));
        }
    }
    $(document).ready(function () {
        $('.b-form--checkout').on('submit', function () {
            $('.b-checkout-login').hide();
            $('.b-checkout-login+.b-order').show();
            return false;
        });
    });
    /*
    Реализует кастомный скроллбар с помощью malihu-custom-scrollbar-plugin
    Пример использования:
    <div class="some-scroll-block" data-scrollbar="custom"></div>
    */

    $(function () {
        $('[data-scrollbar="custom"]').mCustomScrollbar({
            theme: 'custom',
            scrollInertia: 0
        });
    });

    $(window).load(function () {
        // стилизация элементов формы
        //$('select').styleSelectField();
        $('input[type="file"]').styleFileField();
        $('input[data-check="checkbox"], input[data-check="radio"]').styledCheck();

        $('.b-tabs').tabSwitcher();

        visibilityControl();

        $("#slider-brand").carousel();
    });

    var resizeTimer;
    function MobileContentResize() {
        clearTimeout(resizeTimer);
        /**
         * Отрабатывает после завершения события ресайза
         */
        resizeTimer = setTimeout(function () {
            if ($(window).width() < 960) {
                if ($('.b-product-info--mobile').length <= 0) {
                    $('.b-product-info__compare').find('.b-checkbox__item--product').addClass('b-checkbox__item--mobile');
                    var compare = $('.b-product-info__compare');

                    $('.b-product-main').removeClass('b-product-main').addClass('b-product-info').addClass('b-product-info--mobile').prepend($('.b-product-info__extra')).prepend($('.b-product-info__favorite')).prepend($('.b-product-info__bonus')).prepend($('.b-product-info__form')).prepend($('#tab-carousel-product').addClass('carousel-product-mobile')).prepend($('.b-product-info__head'));

                    $('.b-product-info__form form').prepend($('.b-product-info__price').addClass('b-product-info__price--mobile').append(compare));

                    $('.b-product-info--mobile').siblings('.b-product-info').remove();
                    //$('.b-product-info>.b-product-info__head').detach().prependTo('.b-product-main');
                }
            } else {
                if ($('.b-product-info--mobile').length > 0) {
                    $('.b-product-info__compare').find('.b-checkbox__item--product').removeClass('b-checkbox__item--mobile');
                    var compare = $('.b-product-info__compare');
                    $('.b-product-info__action').prepend(compare);
                    $('.b-product-info--mobile').removeClass('b-product-info').removeClass('b-product-info--mobile').addClass('b-product-main');
                    $('#tab-carousel-product').removeClass('carousel-product-mobile');
                    $('.b-product-main').after('<div class="b-product-info"></div>');

                    $('.b-product-info').append($('.b-product-info__head')).append($('.b-product-info__form')).append($('.b-product-info__bonus')).append($('.b-product-info__favorite')).append($('.b-product-info__extra'));

                    $('.b-product-info__form form').append($('.b-product-info__price').removeClass('b-product-info__price--mobile'));
                }
            }
        }, 250);
    }
    $(window).resize(function (e) {
        MobileContentResize();
    });
    MobileContentResize();

    $('#myTab a').click(function (e) {
        e.preventDefault();

        $(this).tab('show');
    });

    //$('.selectpicker').selectpicker();

    $(".select-header").dropkick({

        change: function change() {
            console.log(this);
            var key = this.value.split(';')[0];
            $.cookie('KEY_CITY', key, { expires: 365, path: '/' });
            window.location.reload();
        },
        mobile: true
    });

    $(".b-my-orders__item--open").click(function () {
        //$(".b-my-orders__info").slideToggle("slow");
        $(this).parent().parent().parent().find(".b-my-orders__info").slideToggle("slow");
        $(this).toggleClass("active");
        return false;
    });

    // скрытие/показ поиска в мобильной версии
    $(".b-header-mobile__search").click(function () {
        $(".b-header-mobile__list").addClass("hidden");
        $(".b-header-mobile__search-list").addClass("show");
        return false;
    });

    $(".b-header-mobile__search-list--close").click(function () {
        $(".b-header-mobile__search-list").removeClass("show");
        $(".b-header-mobile__list").removeClass("hidden");
        return false;
    });

    // выпадающее меню в мобильной версии
    $(".b-header-mobile__menu").click(function () {
        $(".b-header-mobile__menu-dropdown").slideToggle("slow");
        return false;
    });

    $(".js-modile-menu-link-level-one").click(function () {
        $(this).parent().addClass("active");
        $(".js-mobile-menu-level-two.js-mobile-menu-level-one").removeClass("js-mobile-menu-level-one");
        $(this).parent().find(".b-header-mobile__menu--section").addClass("show");
        $(".b-header-mobile__menu--nav").addClass("show");
        $('.b-header-mobile__menu--item-category:not(.active)').css('display', 'none');
        return false;
    });

    $(".js-backwards-two").click(function () {
        $(".b-header-mobile__menu--section, .b-header-mobile__menu--nav").removeClass("show");
        $(".js-mobile-menu-level-two").addClass("js-mobile-menu-level-one");
        $(".b-header-mobile__menu--item-category").css('display', 'block');
        $('.b-header-mobile__menu--item.active').removeClass('active');
        return false;
    });

    $(".b-tab__accordion--name").click(function () {
        $(this).parent(".b-tab__accordion--item").toggleClass("active");
        return false;
    });

    $(".js-modile-menu-link-level-two").click(function () {
        var elem_id = $(this).attr('id');
        $('#level3_' + elem_id).removeClass("hidden");
        $('#level3_' + elem_id).find(".b-header-mobile__menu--item-category").css('display', 'block');
        $('#level3_' + elem_id).find(".b-header-mobile__menu--section").css('display', 'block');
        $(".js-mobile-menu-level-two").removeClass("show");
        $(".js-mobile-menu-level-two").addClass("hidden");
        return false;
    });

    $(".js-modile-menu-link-level-three").click(function () {
        $(this).parents(".js-mobile-menu-level-three").addClass("hidden");
        $(".js-mobile-menu-level-two").removeClass("hidden");
        $(".js-mobile-menu-level-two").addClass("show");
        $(".b-header-mobile__menu--nav").addClass("show");
        $('.b-header-mobile__menu--item-category:not(.active)').css('display', 'none');
        $(".b-header-mobile__menu--section, .b-header-mobile__menu--nav").addClass("show");
        return false;
    });

    $(".js-modile-menu-link-level-categories").click(function () {
        $(this).parents(".js-mobile-menu-level-three").addClass("hidden");
        $(".js-mobile-menu-level-two").removeClass("hidden");
        $(".js-mobile-menu-level-two").addClass("show");
        $(".b-header-mobile__menu--nav").addClass("show");
        $('.b-header-mobile__menu--item-category:not(.active)').css('display', 'none');
        $(".b-header-mobile__menu--section, .b-header-mobile__menu--nav").addClass("show");
        $(".b-header-mobile__menu--section, .b-header-mobile__menu--nav").removeClass("show");
        $(".js-mobile-menu-level-two").addClass("js-mobile-menu-level-one");
        $(".b-header-mobile__menu--item-category").css('display', 'block');
        $('.b-header-mobile__menu--item.active').removeClass('active');
        return false;
    });

    $(".js-nav__see-link").click(function () {
        $(this).parents(".b-nav-column__list").addClass("active");
        return false;
    });

    $('[data-toggle="tooltip"]').tooltip();

    $(function () {
        $(document).click(function (event) {
            if ($(event.target).closest(".b-header-mobile__menu-dropdown").length) return;
            if ($(".b-header-mobile__menu-dropdown").css("display") != "none") $(".b-header-mobile__menu-dropdown").slideToggle("slow");
        });
    });

    $('[data-action="add-review"]').click(function () {
        var parent = $(this).closest('.b-personal-information__archives-product--item'),
            review = $('[data-review="true"]', parent);

        parent.toggleClass('active');

        if (parent.hasClass('active')) {
            review.attr('data-rules', 'req');
        } else {
            review.removeAttr('data-rules');
        }

        return false;
    });

    $(function () {
        $('#b-datepicker__input').datepicker();
    });

    var li_count = $('.b-brand-list--index li').length;
    $('.b-brand-list--index').css('width', li_count * 255 / 2 - 56);

    if ($('.js_substribe').length) {
        $('.js_substribe').on('click', function () {
            var email;
            $(".popup-substribe-text").html("Отправка запроса");
            if ($(this).prev('[type="email"]').length) {
                //форма на главной
                email = $(this).prev('[type="email"]').val();
            } else {
                //форма в футере
                email = $('.js_footer_substr').val();
            }

            $.post('/ajax/csubscriptionadd.php', {
                action: 'add_sub',
                EMAIL: email
            }, function (data) {
                $(".popup-substribe-text").html(data);
                console.log(data);
            }, 'html');
            //return false;
        });
    }

    if ($('.js_filter_clear').length) {
        $('.js_filter_clear').on('click', function () {
            $("#del_filter").click();
        });
    }

    $('.b-popup-avaiable__button--not-avaiable').prop('disabled', true);

    /*Подключаем маски всем телефонным инпутам*/
    $('input[type="tel"]').inputmask("+7 (999) 999-99-99");

    /* ajax запрос для обратной связи */
    $(".form-feedback").submit(function (e) {
        $("#web_form_submit").prop('disabled', true);
        $.ajax({
            url: $(this).attr("action"),
            data: $(this).serialize(),
            type: 'post',
            success: function success(data) {
                $(".message_from_feedback").html(data);
                $(this).hide();
            },
            error: function error(data) {
                $(".message_from_feedback").html("Произошла ошибка.");
                $("#web_form_submit").prop('disabled', false);
            }
        });
        e.preventDefault();
    });
})(jQuery);
//# sourceMappingURL=data:application/json;base64,
